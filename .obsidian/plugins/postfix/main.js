/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    console.log("My plugin has loaded!");
    const templates = [
      { regex: /(.*)\.###\s+(.*)$/, before: "### ", after: "$1$2" },
      { regex: /(.*)\.##\s+(.*)$/, before: "## ", after: "$1$2" },
      { regex: /(.*)\.#\s+(.*)$/, before: "# ", after: "$1$2" },
      { regex: /(.*)\.\-\s+(.*)$/, before: "- ", after: "$1$2" },
      { regex: /(.*)\.>\s+(.*)$/, before: "> ", after: "$1$2" },
      { regex: /(.*)\.\+\s+(.*)$/, before: "+ ", after: "$1$2" },
      { regex: /\-(.*)\.\[\]\s+(.*)$/, before: "- [ ] ", after: "$1$2 " },
      { regex: /(.*)\.\[\]\s+(.*)$/, before: "[ ] ", after: "$1$2 " },
      { regex: /\-(.*)\.\[x\]\s+(.*)$/, before: "- [x] ", after: "$1$2 " },
      { regex: /(.*)\.\[x\]\s+(.*)$/, before: "[x] ", after: "$1$2 " }
    ];
    this.registerEvent(
      this.app.workspace.on("editor-change", (editor) => {
        const cm = editor;
        const cursor = cm.getCursor();
        const line = cm.getLine(cursor.line);
        const lineLength = line.length;
        const prevLine = cm.getLine(cursor.line - 1);
        const prevLineLength = prevLine.length;
        for (const { regex, before, after } of templates) {
          if (regex.test(line)) {
            const newLine = line.replace(regex, `${before}$2${after}`);
            cm.replaceRange(newLine, { line: cursor.line, ch: 0 }, { line: cursor.line, ch: lineLength });
            break;
          } else if (regex.test(prevLine)) {
            const newLine = prevLine.replace(regex, `${before}$2${after}`);
            cm.replaceRange(newLine, { line: cursor.line - 1, ch: 0 }, { line: cursor.line - 1, ch: prevLineLength });
            break;
          }
        }
      })
    );
  }
  onunload() {
    console.log("My plugin has been unloaded!");
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldywgTW9kYWwsIE5vdGljZSwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZyB9IGZyb20gJ29ic2lkaWFuJztcblxuaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNeVBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG4gIGFzeW5jIG9ubG9hZCgpIHtcbiAgICBjb25zb2xlLmxvZygnTXkgcGx1Z2luIGhhcyBsb2FkZWQhJyk7XG5cbiAgICBjb25zdCB0ZW1wbGF0ZXMgPSBbXG4gICAgICB7IHJlZ2V4OiAvKC4qKVxcLiMjI1xccysoLiopJC8sIGJlZm9yZTogJyMjIyAnLCBhZnRlcjogJyQxJDInIH0sXG4gICAgICB7IHJlZ2V4OiAvKC4qKVxcLiMjXFxzKyguKikkLywgYmVmb3JlOiAnIyMgJywgYWZ0ZXI6ICckMSQyJyB9LFxuICAgICAgeyByZWdleDogLyguKilcXC4jXFxzKyguKikkLywgYmVmb3JlOiAnIyAnLCBhZnRlcjogJyQxJDInIH0sXG4gICAgICB7IHJlZ2V4OiAvKC4qKVxcLlxcLVxccysoLiopJC8sIGJlZm9yZTogJy0gJywgYWZ0ZXI6ICckMSQyJyB9LFxuICAgICAgeyByZWdleDogLyguKilcXC4+XFxzKyguKikkLywgYmVmb3JlOiAnPiAnLCBhZnRlcjogJyQxJDInIH0sXG4gICAgICB7IHJlZ2V4OiAvKC4qKVxcLlxcK1xccysoLiopJC8sIGJlZm9yZTogJysgJywgYWZ0ZXI6ICckMSQyJyB9LFxuICAgICAgeyByZWdleDogL1xcLSguKilcXC5cXFtcXF1cXHMrKC4qKSQvLCBiZWZvcmU6ICctIFsgXSAnLCBhZnRlcjogJyQxJDIgJyB9LFxuICAgICAgeyByZWdleDogLyguKilcXC5cXFtcXF1cXHMrKC4qKSQvLCBiZWZvcmU6ICdbIF0gJywgYWZ0ZXI6ICckMSQyICcgfSxcbiAgICAgIHsgcmVnZXg6IC9cXC0oLiopXFwuXFxbeFxcXVxccysoLiopJC8sIGJlZm9yZTogJy0gW3hdICcsIGFmdGVyOiAnJDEkMiAnIH0sXG4gICAgICB7IHJlZ2V4OiAvKC4qKVxcLlxcW3hcXF1cXHMrKC4qKSQvLCBiZWZvcmU6ICdbeF0gJywgYWZ0ZXI6ICckMSQyICcgfSxcbiAgICBdO1xuXG4gICAgdGhpcy5yZWdpc3RlckV2ZW50KFxuICAgICAgdGhpcy5hcHAud29ya3NwYWNlLm9uKCdlZGl0b3ItY2hhbmdlJywgKGVkaXRvcikgPT4ge1xuICAgICAgICBjb25zdCBjbSAgPSBlZGl0b3I7XG4gICAgICAgIGNvbnN0IGN1cnNvciA9IGNtLmdldEN1cnNvcigpO1xuICAgICAgICBjb25zdCBsaW5lID0gY20uZ2V0TGluZShjdXJzb3IubGluZSk7XG4gICAgICAgIGNvbnN0IGxpbmVMZW5ndGggPSBsaW5lLmxlbmd0aDtcbiAgICAgICAgY29uc3QgcHJldkxpbmUgPSBjbS5nZXRMaW5lKGN1cnNvci5saW5lIC0gMSk7XG4gICAgICAgIGNvbnN0IHByZXZMaW5lTGVuZ3RoID0gcHJldkxpbmUubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoY29uc3QgeyByZWdleCwgYmVmb3JlLCBhZnRlciB9IG9mIHRlbXBsYXRlcykge1xuICAgICAgICAgIGlmIChyZWdleC50ZXN0KGxpbmUpKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdMaW5lID0gbGluZS5yZXBsYWNlKHJlZ2V4LCBgJHtiZWZvcmV9JDIke2FmdGVyfWApO1xuICAgICAgICAgICAgY20ucmVwbGFjZVJhbmdlKG5ld0xpbmUsIHsgbGluZTogY3Vyc29yLmxpbmUsIGNoOiAwIH0sIHsgbGluZTogY3Vyc29yLmxpbmUsIGNoOiBsaW5lTGVuZ3RoIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfSBlbHNlIGlmIChyZWdleC50ZXN0KHByZXZMaW5lKSkge1xuICAgICAgICAgICAgY29uc3QgbmV3TGluZSA9IHByZXZMaW5lLnJlcGxhY2UocmVnZXgsIGAke2JlZm9yZX0kMiR7YWZ0ZXJ9YCk7XG4gICAgICAgICAgICBjbS5yZXBsYWNlUmFuZ2UobmV3TGluZSwgeyBsaW5lOiBjdXJzb3IubGluZSAtIDEsIGNoOiAwIH0sIHsgbGluZTogY3Vyc29yLmxpbmUgLSAxLCBjaDogcHJldkxpbmVMZW5ndGggfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIG9udW5sb2FkKCkge1xuICAgIGNvbnNvbGUubG9nKCdNeSBwbHVnaW4gaGFzIGJlZW4gdW5sb2FkZWQhJyk7XG4gICAgLy91bmhvb2tcblxuICB9XG59XG5cblxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVBLHNCQUF1QjtBQUV2QixJQUFxQixXQUFyQixjQUFzQyx1QkFBTztBQUFBLEVBQzNDLE1BQU0sU0FBUztBQUNiLFlBQVEsSUFBSSx1QkFBdUI7QUFFbkMsVUFBTSxZQUFZO0FBQUEsTUFDaEIsRUFBRSxPQUFPLHFCQUFxQixRQUFRLFFBQVEsT0FBTyxPQUFPO0FBQUEsTUFDNUQsRUFBRSxPQUFPLG9CQUFvQixRQUFRLE9BQU8sT0FBTyxPQUFPO0FBQUEsTUFDMUQsRUFBRSxPQUFPLG1CQUFtQixRQUFRLE1BQU0sT0FBTyxPQUFPO0FBQUEsTUFDeEQsRUFBRSxPQUFPLG9CQUFvQixRQUFRLE1BQU0sT0FBTyxPQUFPO0FBQUEsTUFDekQsRUFBRSxPQUFPLG1CQUFtQixRQUFRLE1BQU0sT0FBTyxPQUFPO0FBQUEsTUFDeEQsRUFBRSxPQUFPLG9CQUFvQixRQUFRLE1BQU0sT0FBTyxPQUFPO0FBQUEsTUFDekQsRUFBRSxPQUFPLHdCQUF3QixRQUFRLFVBQVUsT0FBTyxRQUFRO0FBQUEsTUFDbEUsRUFBRSxPQUFPLHNCQUFzQixRQUFRLFFBQVEsT0FBTyxRQUFRO0FBQUEsTUFDOUQsRUFBRSxPQUFPLHlCQUF5QixRQUFRLFVBQVUsT0FBTyxRQUFRO0FBQUEsTUFDbkUsRUFBRSxPQUFPLHVCQUF1QixRQUFRLFFBQVEsT0FBTyxRQUFRO0FBQUEsSUFDakU7QUFFQSxTQUFLO0FBQUEsTUFDSCxLQUFLLElBQUksVUFBVSxHQUFHLGlCQUFpQixDQUFDLFdBQVc7QUFDakQsY0FBTSxLQUFNO0FBQ1osY0FBTSxTQUFTLEdBQUcsVUFBVTtBQUM1QixjQUFNLE9BQU8sR0FBRyxRQUFRLE9BQU8sSUFBSTtBQUNuQyxjQUFNLGFBQWEsS0FBSztBQUN4QixjQUFNLFdBQVcsR0FBRyxRQUFRLE9BQU8sT0FBTyxDQUFDO0FBQzNDLGNBQU0saUJBQWlCLFNBQVM7QUFFaEMsbUJBQVcsRUFBRSxPQUFPLFFBQVEsTUFBTSxLQUFLLFdBQVc7QUFDaEQsY0FBSSxNQUFNLEtBQUssSUFBSSxHQUFHO0FBQ3BCLGtCQUFNLFVBQVUsS0FBSyxRQUFRLE9BQU8sR0FBRyxXQUFXLE9BQU87QUFDekQsZUFBRyxhQUFhLFNBQVMsRUFBRSxNQUFNLE9BQU8sTUFBTSxJQUFJLEVBQUUsR0FBRyxFQUFFLE1BQU0sT0FBTyxNQUFNLElBQUksV0FBVyxDQUFDO0FBQzVGO0FBQUEsVUFDRixXQUFXLE1BQU0sS0FBSyxRQUFRLEdBQUc7QUFDL0Isa0JBQU0sVUFBVSxTQUFTLFFBQVEsT0FBTyxHQUFHLFdBQVcsT0FBTztBQUM3RCxlQUFHLGFBQWEsU0FBUyxFQUFFLE1BQU0sT0FBTyxPQUFPLEdBQUcsSUFBSSxFQUFFLEdBQUcsRUFBRSxNQUFNLE9BQU8sT0FBTyxHQUFHLElBQUksZUFBZSxDQUFDO0FBQ3hHO0FBQUEsVUFDRjtBQUFBLFFBQ0Y7QUFBQSxNQUNGLENBQUM7QUFBQSxJQUNIO0FBQUEsRUFDRjtBQUFBLEVBRUEsV0FBVztBQUNULFlBQVEsSUFBSSw4QkFBOEI7QUFBQSxFQUc1QztBQUNGOyIsCiAgIm5hbWVzIjogW10KfQo=
