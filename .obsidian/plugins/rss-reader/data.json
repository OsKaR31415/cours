{
  "feeds": [
    {
      "name": "xkcd",
      "url": "https://xkcd.com/rss.xml ",
      "folder": "xkcd"
    },
    {
      "name": "css tricks",
      "url": "https://css-tricks.com/feed",
      "folder": "css-tricks"
    }
  ],
  "updateTime": 60,
  "filtered": [
    {
      "name": "Favorites",
      "read": true,
      "unread": true,
      "filterTags": [],
      "filterFolders": [],
      "filterFeeds": [],
      "ignoreTags": [],
      "ignoreFeeds": [],
      "ignoreFolders": [],
      "favorites": true,
      "sortOrder": "ALPHABET_NORMAL"
    },
    {
      "name": "unread",
      "sortOrder": "DATE_NEWEST",
      "filterFeeds": [],
      "filterFolders": [],
      "filterTags": [],
      "ignoreFolders": [],
      "ignoreFeeds": [],
      "ignoreTags": [],
      "unread": true
    }
  ],
  "saveLocation": "default",
  "displayStyle": "cards",
  "saveLocationFolder": "",
  "items": [
    {
      "title": "xkcd.com",
      "subtitle": "",
      "link": "https://xkcd.com/",
      "image": null,
      "description": "xkcd.com: A webcomic of romance and math humor.",
      "items": [
        {
          "title": "America Songs",
          "description": "<img src=\"https://imgs.xkcd.com/comics/america_songs.png\" title=\"Juraaaassic Park, Juraaaassic Park, God shed his grace on theeeee\" alt=\"Juraaaassic Park, Juraaaassic Park, God shed his grace on theeeee\" />",
          "content": "<img src=\"https://imgs.xkcd.com/comics/america_songs.png\" title=\"Juraaaassic Park, Juraaaassic Park, God shed his grace on theeeee\" alt=\"Juraaaassic Park, Juraaaassic Park, God shed his grace on theeeee\" />",
          "category": "",
          "link": "https://xkcd.com/2665/",
          "creator": "",
          "pubDate": "Mon, 29 Aug 2022 04:00:00 -0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "xkcd",
          "feed": "xkcd",
          "read": true,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "eb4d2fee5ddb6e8bfc5634ee17222537",
          "highlights": []
        },
        {
          "title": "Cloud Swirls",
          "description": "<img src=\"https://imgs.xkcd.com/comics/cloud_swirls.png\" title=\"'Why did you get into fluid dynamics?' 'Well, SOME planet has to have the coolest clouds, odds are it's not ours, and rockets are slow.'\" alt=\"'Why did you get into fluid dynamics?' 'Well, SOME planet has to have the coolest clouds, odds are it's not ours, and rockets are slow.'\" />",
          "content": "<img src=\"https://imgs.xkcd.com/comics/cloud_swirls.png\" title=\"'Why did you get into fluid dynamics?' 'Well, SOME planet has to have the coolest clouds, odds are it's not ours, and rockets are slow.'\" alt=\"'Why did you get into fluid dynamics?' 'Well, SOME planet has to have the coolest clouds, odds are it's not ours, and rockets are slow.'\" />",
          "category": "",
          "link": "https://xkcd.com/2664/",
          "creator": "",
          "pubDate": "Fri, 26 Aug 2022 04:00:00 -0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "xkcd",
          "feed": "xkcd",
          "read": true,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "41fee2fd7f89380576674c1eb76ea786",
          "highlights": []
        },
        {
          "title": "Tetherball Configurations",
          "description": "<img src=\"https://imgs.xkcd.com/comics/tetherball_configurations.png\" title=\"Ground-pole-ball-pole can be fun if you shake the first pole to get the second one whipping around dangerously, but the ball at the joint gets torn apart pretty fast.\" alt=\"Ground-pole-ball-pole can be fun if you shake the first pole to get the second one whipping around dangerously, but the ball at the joint gets torn apart pretty fast.\" />",
          "content": "<img src=\"https://imgs.xkcd.com/comics/tetherball_configurations.png\" title=\"Ground-pole-ball-pole can be fun if you shake the first pole to get the second one whipping around dangerously, but the ball at the joint gets torn apart pretty fast.\" alt=\"Ground-pole-ball-pole can be fun if you shake the first pole to get the second one whipping around dangerously, but the ball at the joint gets torn apart pretty fast.\" />",
          "category": "",
          "link": "https://xkcd.com/2663/",
          "creator": "",
          "pubDate": "Wed, 24 Aug 2022 04:00:00 -0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "xkcd",
          "feed": "xkcd",
          "read": true,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "b3be5b864ca9f33883d120c599a1df43",
          "highlights": []
        },
        {
          "title": "Physics Safety Tip",
          "description": "<img src=\"https://imgs.xkcd.com/comics/physics_safety_tip.png\" title=\"In general, avoid exposure to any temperatures, pressures, particle energies, or states of matter that physicists think are neat.\" alt=\"In general, avoid exposure to any temperatures, pressures, particle energies, or states of matter that physicists think are neat.\" />",
          "content": "<img src=\"https://imgs.xkcd.com/comics/physics_safety_tip.png\" title=\"In general, avoid exposure to any temperatures, pressures, particle energies, or states of matter that physicists think are neat.\" alt=\"In general, avoid exposure to any temperatures, pressures, particle energies, or states of matter that physicists think are neat.\" />",
          "category": "",
          "link": "https://xkcd.com/2662/",
          "creator": "",
          "pubDate": "Mon, 22 Aug 2022 04:00:00 -0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "xkcd",
          "feed": "xkcd",
          "read": true,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "fb7748d396dd7eac398b08c4f2ca9e31",
          "highlights": []
        },
        {
          "title": "Age Milestone Privileges",
          "description": "<img src=\"https://imgs.xkcd.com/comics/age_milestone_privileges.png\" title=\"If you reach 122, you get complete unrevertible editorial control over Jeanne Calment's Wikipedia article.\" alt=\"If you reach 122, you get complete unrevertible editorial control over Jeanne Calment's Wikipedia article.\" />",
          "content": "<img src=\"https://imgs.xkcd.com/comics/age_milestone_privileges.png\" title=\"If you reach 122, you get complete unrevertible editorial control over Jeanne Calment's Wikipedia article.\" alt=\"If you reach 122, you get complete unrevertible editorial control over Jeanne Calment's Wikipedia article.\" />",
          "category": "",
          "link": "https://xkcd.com/2661/",
          "creator": "",
          "pubDate": "Fri, 19 Aug 2022 04:00:00 -0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "xkcd",
          "feed": "xkcd",
          "read": true,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "617add6581f226409247a3d6a76f6b74",
          "highlights": []
        },
        {
          "title": "Gen Z",
          "description": "<img src=\"https://imgs.xkcd.com/comics/gen_z.png\" title=\"Curdled milk, of a peculiar kind, made after a Bulgarian recipe and called &quot;yaghurt,&quot; is now a Parisian fad and is believed to be a remedy against growing old. A correspondent who has tried it, says he would prefer to die young. (1905, The Elk Falls Journal)\" alt=\"Curdled milk, of a peculiar kind, made after a Bulgarian recipe and called &quot;yaghurt,&quot; is now a Parisian fad and is believed to be a remedy against growing old. A correspondent who has tried it, says he would prefer to die young. (1905, The Elk Falls Journal)\" />",
          "content": "<img src=\"https://imgs.xkcd.com/comics/gen_z.png\" title=\"Curdled milk, of a peculiar kind, made after a Bulgarian recipe and called &quot;yaghurt,&quot; is now a Parisian fad and is believed to be a remedy against growing old. A correspondent who has tried it, says he would prefer to die young. (1905, The Elk Falls Journal)\" alt=\"Curdled milk, of a peculiar kind, made after a Bulgarian recipe and called &quot;yaghurt,&quot; is now a Parisian fad and is believed to be a remedy against growing old. A correspondent who has tried it, says he would prefer to die young. (1905, The Elk Falls Journal)\" />",
          "category": "",
          "link": "https://xkcd.com/2660/",
          "creator": "",
          "pubDate": "Wed, 17 Aug 2022 04:00:00 -0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "xkcd",
          "feed": "xkcd",
          "read": true,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "76cca346a970976242acc88baad7d4ee",
          "highlights": []
        }
      ],
      "folder": "xkcd",
      "name": "xkcd",
      "language": "en",
      "hash": "607f9afd994b6620307bb62d65b9db3c"
    },
    {
      "title": "CSS-Tricks",
      "subtitle": "",
      "link": "https://css-tricks.com",
      "image": "\n\t",
      "description": "Tips, Tricks, and Techniques on using Cascading Style Sheets.",
      "items": [
        {
          "title": "Interpolating Numeric CSS Variables",
          "description": "<p>We can make variables in CSS pretty easily:</p>\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:root {\n  --scale: 1;\n}</code></pre>\n<p>And we can declare them on any element:</p>\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.thing {\n  transform: scale(--scale);\n}</code></pre>\n<p>Even better for an example like this is applying the variable on a user &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/interpolating-numeric-css-variables/\">Interpolating Numeric CSS Variables</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "content": "\n<p>We can make variables in CSS pretty easily:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:root {\n  --scale: 1;\n}</code></pre>\n\n\n\n<p>And we can declare them on any element:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.thing {\n  transform: scale(--scale);\n}</code></pre>\n\n\n\n<p>Even better for an example like this is applying the variable on a user interaction, say <code>:hover</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:root {\n  --scale: 1;\n}\n\n.thing {\n  height: 100px;\n  transform: scale(--scale);\n  width: 100px;\n}\n\n.thing:hover {\n  --scale: 3;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_KKoYgKR\" src=\"//codepen.io/anon/embed/KKoYgKR?height=450&amp;theme-id=1&amp;slug-hash=KKoYgKR&amp;default-tab=css,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed KKoYgKR\" title=\"CodePen Embed KKoYgKR\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>But if we wanted to use that variable in an animation&#8230; nada.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:root {\n  --scale: 1;\n}\n\n@keyframes scale {\n  from { --scale: 0; }\n  to { --scale: 3; }\n}\n\n/* Nope! */\n.thing {\n  animation: scale .25s ease-in;\n  height: 100px;\n  width: 100px;\n}</code></pre>\n\n\n\n<p>That&#8217;s because the variable is recognized as a string and what we need is a number that can be interpolated between two numeric values. That&#8217;s where we can call on <code>@property</code> to not only register the variable as a custom property, but define its syntax as a number:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@property --scale {\n  syntax: \"&lt;number>\";\n  initial-value: 1;\n  inherits: true;\n}</code></pre>\n\n\n\n<p>Now we get the animation!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_LYdvRbV\" src=\"//codepen.io/anon/embed/LYdvRbV?height=450&amp;theme-id=1&amp;slug-hash=LYdvRbV&amp;default-tab=css,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed LYdvRbV\" title=\"CodePen Embed LYdvRbV\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>You&#8217;re going to want to <a href=\"https://caniuse.com/mdn-css_at-rules_property\" rel=\"noopener\">check browser support</a> since <code>@property</code> has only landed in Chrome (starting in <a href=\"https://developer.chrome.com/blog/new-in-chrome-85/\" rel=\"noopener\">version 85</a>) as of this writing. And if you&#8217;re hoping to sniff it out with <code>@supports</code>, we&#8217;re currently out of luck because it doesn&#8217;t accept at-rules as values&#8230; yet. That will change once <a href=\"https://github.com/w3c/csswg-drafts/issues/2463#issuecomment-1016720310\" rel=\"noopener\"><code>at-rule()</code>becomes a real thing</a>.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_VwXNazX\" src=\"//codepen.io/anon/embed/VwXNazX?height=850&amp;theme-id=1&amp;slug-hash=VwXNazX&amp;default-tab=result\" height=\"850\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed VwXNazX\" title=\"CodePen Embed VwXNazX\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/interpolating-numeric-css-variables/\">Interpolating Numeric CSS Variables</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "category": "Article",
          "link": "https://css-tricks.com/interpolating-numeric-css-variables/",
          "creator": "Geoff Graham",
          "pubDate": "Tue, 30 Aug 2022 13:17:25 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "css-tricks",
          "feed": "css tricks",
          "read": true,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "2965d85f1d419c3a74ea340f0881a1c3",
          "highlights": []
        },
        {
          "title": "Using Grid Named Areas to Visualize (and Reference) Your Layout",
          "description": "<p>Whenever we build simple or complex layouts using CSS Grid, we&#8217;re usually positioning items with line numbers. Grid layouts contain grid lines that are automatically indexed with positive and negative line numbers (that is unless we <a href=\"https://css-tricks.com/things-ive-learned-css-grid-layout/#aa-things-are-way-easier-if-you-name-your-grid-lines\">explicitly name them</a>). &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/using-grid-named-areas-to-visualize-and-reference-your-layout/\">Using Grid Named Areas to Visualize (and Reference) Your Layout</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "content": "\n<p>Whenever we build simple or complex layouts using CSS Grid, we&#8217;re usually positioning items with line numbers. Grid layouts contain grid lines that are automatically indexed with positive and negative line numbers (that is unless we <a href=\"https://css-tricks.com/things-ive-learned-css-grid-layout/#aa-things-are-way-easier-if-you-name-your-grid-lines\">explicitly name them</a>). Positioning items with line numbers is a fine way to lay things out, though CSS Grid has numerous ways to accomplish the same with an undersized cognitive encumbrance. One of those ways is something I like to think of as the &#8220;ASCII&#8221; method.</p>\n\n\n\n<span id=\"more-372634\"></span>\n\n\n<h3 id=\"the-ascii-method-in-a-nutshell\">The ASCII method in a nutshell</h3>\n\n\n<p>The method boils down to using <code>grid-template-areas</code> to position grid items using custom-named areas at the grid container level rather than line numbers.</p>\n\n\n\n<p>When we declare an element as a grid container using <code>display: grid</code>, the grid container, by default, generates a single-column track and rows that sufficiently hold the grid items. The container&#8217;s child elements that participate in the grid layout are converted to grid items, irrespective of their <code>display</code> property.</p>\n\n\n\n<p>For instance, let&#8217;s create a grid by explicitly defining columns and rows using the <a href=\"https://css-tricks.com/almanac/properties/g/grid-template-columns/\"><code>grid-template-columns</code></a> and <a href=\"https://css-tricks.com/almanac/properties/g/grid-template-rows/\"><code>grid-template-rows</code></a> properties.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: repeat(3, 200px);\n}</code></pre>\n\n\n\n<p>This little snippet of CSS creates a 3×2 grid where the grid items take up equal space in the columns, and where the grid contains three rows with a track size of <code>200px</code>.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"798\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Explicit-Grid.jpg?resize=1600%2C798&#038;ssl=1\" alt=\"\" class=\"wp-image-372635\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Explicit-Grid.jpg?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Explicit-Grid.jpg?resize=300%2C150&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Explicit-Grid.jpg?resize=1024%2C511&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Explicit-Grid.jpg?resize=768%2C383&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Explicit-Grid.jpg?resize=1536%2C766&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We can define the entire layout with <a href=\"https://css-tricks.com/simple-named-grid-areas/\">named grid areas</a> using the <a href=\"https://css-tricks.com/almanac/properties/g/grid-template-areas/\"><code>grid-template-areas</code></a> property. According to <a href=\"https://www.w3.org/TR/css-grid-2/#grid-template-areas-property\" rel=\"noopener\">the spec</a>, the initial value of <code>grid-template-areas</code> is <code>none</code>.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">grid-template-areas = none | &lt;string>+</code></pre>\n\n\n\n<p><code>&lt;string&gt;+</code> is listing the group of strings enclosed with a quote. Each string is represented as a cell, and each quoted string is represented as a row. Like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">grid-template-areas: \"head head\" \"nav main\" \"foot foot\";</code></pre>\n\n\n\n<p>The value of <code>grid-template-areas</code> describes the layout as having four grid areas. They are,</p>\n\n\n\n<ul><li><code>head</code></li><li><code>nav</code></li><li><code>main</code></li><li><code>foot</code></li></ul>\n\n\n\n<p><code>head</code> and <code>foot</code> span two column tracks and one row track. The remaining <code>nav</code> and <code>main</code> each span one column track and one row track. The value of <code>grid-template-areas</code> is a lot like arranging ASCII characters, and as <a href=\"https://css-tricks.com/little-tip-draw-your-grid-in-ascii-in-your-css-comments-for-quick-reference/\">Chris suggested</a> a while back, we can get a visualization of the overall structure of the layout from the CSS itself which is the most trouble-free way to understand it.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2560\" height=\"1930\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/value-of-grid-template-areas-1-scaled.gif?resize=2560%2C1930&#038;ssl=1\" alt=\"\" class=\"wp-image-372882\" data-recalc-dims=\"1\"/><figcaption>(<a href=\"https://css-tricks.com/wp-content/uploads/2022/08/value-of-grid-template-areas-1.gif\">Full size GIF</a>)</figcaption></figure>\n\n\n\n<p>OK, so we created our layout with four named grid areas: <code>head</code>, <code>nav</code>, <code>main</code>, <code>foot</code>.</p>\n\n\n\n<p>Now, let&#8217;s start to position the grid items against named grid areas instead of line numbers. Specifically, let&#8217;s place a <code>header</code> element into the named grid area <code>head</code> and specify the named grid area <code>head</code> in the <code>header</code> element using the <code>grid-area</code> property.</p>\n\n\n\n<p>Named grid areas in a grid layout are called <strong>idents</strong>. So, what we just did was create a custom ident named <code>head</code> that we can use to place items into certain grid tracks.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">header { grid-area: head; }</code></pre>\n\n\n\n<p>We can other HTML elements using other custom idents:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">nav { grid-area: nav; }\nmain { grid-area: main; }\nfooter { grid-area: foot; }</code></pre>\n\n\n<h3 id=\"writing-named-area-values\">Writing named area values</h3>\n\n\n<p>According to <a href=\"https://www.w3.org/TR/css-grid-1/#valdef-grid-template-areas-string\" rel=\"noopener\">CSS Grid Layout Module Level 1</a>, all strings must be defined under the following tokens:</p>\n\n\n\n<ul><li><strong>Named cell token:</strong> This represents the named grid area in the grid. For instance, <code>head</code> is a named cell token.</li><li><strong>Null cell token:</strong> This represents the unnamed grid area in the grid container. For instance, an empty cell in the grid is a null cell token.</li><li><strong>Trash token:</strong> This is a syntax error, such as an invalid declaration. For instance, a disparate number of cells and rows compared to the number of grid items would make a declaration invalid.</li></ul>\n\n\n\n<p>In <code>grid-template-area</code>, every quoted string (the rows) must have the same number of cells and define the complete grid without ignoring any cell.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1598\" height=\"718\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Dos-and-Donts.jpg?resize=1598%2C718&#038;ssl=1\" alt=\"\" class=\"wp-image-372637\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Dos-and-Donts.jpg?w=1598&amp;ssl=1 1598w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Dos-and-Donts.jpg?resize=300%2C135&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Dos-and-Donts.jpg?resize=1024%2C460&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Dos-and-Donts.jpg?resize=768%2C345&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Dos-and-Donts.jpg?resize=1536%2C690&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We can ignore a cell or leave it as an <strong>empty cell</strong> using the full-stop character (<code>.</code>)</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"6\"><code markup=\"tt\">.grid { \n  display: grid;\n  grid-template-areas:\n    \"head head\"\n    \"nav main\"\n    \"foot .\";\n}</code></pre>\n\n\n\n<p>If that feels visually awkward or imbalanced to you, we can use multiple full-stop characters without any whitespaces separating them:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"6\"><code markup=\"tt\">.grid {\n  display: grid;\n  grid-template-areas:\n    \"head head\"\n    \"nav main\"\n    \"foot ....\";\n}</code></pre>\n\n\n\n<p>A named cell token can span multiple grid cells, But those cells must form a rectangular layout. In other words, we&#8217;re unable to create &#8220;L&#8221; or &#8220;T&#8221;-shaped layouts, although the spec does <a href=\"https://www.w3.org/TR/css-grid-1/#valdef-grid-template-areas-string\" rel=\"noopener\">hint at support</a> for non-rectangular layouts with disconnected regions in the future.</p>\n\n\n<h3 id=\"ascii-is-better-than-linebased-placement\">ASCII is better than line-based placement</h3>\n\n\n<p>Line-based placement is where we use the <code>grid-column</code> and <code>grid-row</code> properties to position an element on the grid using grid line numbers that are automatically indexed by a number:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid-item {\n  grid-column: 1 / 3; /* start at grid column line 1 and span to line 3 */\n}</code></pre>\n\n\n\n<p>But grid item line numbers can change if our layout changes at a breakpoint. In those cases, it&#8217;s not like we can rely on the same line numbers we used at a specific breakpoint. This is where it takes extra cognitive encumbrance to understand the code.</p>\n\n\n\n<p>That&#8217;s why I think an ASCII-based approach works best. We can redefine the layout for each breakpoint using <code>grid-template-areas</code> within the grid container, which offers a convenient visual for how the layout will look directly in the CSS — it&#8217;s like self-documented code!</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid {\n  grid-template-areas:\n    \"head head\"\n    \"nav main\"\n    \"foot ....\"; /* much easier way to see the grid! */\n}\n\n.grid-item {\n  grid-area: foot; /* much easier to place the item! */\n}</code></pre>\n\n\n\n<p>We can actually see a grid&#8217;s line numbers and grid areas in DevTools. In Firefox, for example, go to the Layout panel. Then, under the <strong>Grid</strong> tab, locate the <strong>&#8220;Grid display settings&#8221;</strong> and enable the <strong>&#8220;Display line number&#8221;</strong> and <strong>&#8220;Display area names&#8221;</strong> options.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1598\" height=\"564\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Grid-Display-Settings.jpg?resize=1598%2C564&#038;ssl=1\" alt=\"Enabling grid settings.\" class=\"wp-image-372641\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Grid-Display-Settings.jpg?w=1598&amp;ssl=1 1598w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Grid-Display-Settings.jpg?resize=300%2C106&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Grid-Display-Settings.jpg?resize=1024%2C361&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Grid-Display-Settings.jpg?resize=768%2C271&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Grid-Display-Settings.jpg?resize=1536%2C542&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>This ASCII approach using named areas requires a lot less effort to visualize and easily find the placement of elements.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1601\" height=\"728\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/line-based-vs-ASCII-Art.jpg?resize=1601%2C728&#038;ssl=1\" alt=\"Line-based placement versus ASCII Art placement.\" class=\"wp-image-372642\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/line-based-vs-ASCII-Art.jpg?w=1601&amp;ssl=1 1601w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/line-based-vs-ASCII-Art.jpg?resize=300%2C136&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/line-based-vs-ASCII-Art.jpg?resize=1024%2C466&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/line-based-vs-ASCII-Art.jpg?resize=768%2C349&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/line-based-vs-ASCII-Art.jpg?resize=1536%2C698&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"lets-look-at-the-universal-use-case\">Let&#8217;s look at the &#8220;universal&#8221; use case</h3>\n\n\n<p>Whenever I see a tutorial on named grid areas, the common example is generally some layout pattern containing <code>header</code>, <code>main</code>, <code>sidebar</code>, and <code>footer</code> areas. I like to think of this as the &#8220;universal&#8221; use case since it casts such a wide net.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1331\" height=\"788\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Universal-Usecase.png?resize=1331%2C788&#038;ssl=1\" alt=\"The Holy Grail layout in rectangles.\" class=\"wp-image-372644\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Universal-Usecase.png?w=1331&amp;ssl=1 1331w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Universal-Usecase.png?resize=300%2C178&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Universal-Usecase.png?resize=1024%2C606&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Universal-Usecase.png?resize=768%2C455&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>It&#8217;s a great example to illustrate how <code>grid-template-areas</code> works, but a real-life implementation usually involves media queries set to change the layout at certain viewport widths. Rather than having to re-declare <code>grid-area</code> on each grid item at each breakpoint to re-position everything, we can use <code>grid-template-areas</code> to &#8220;respond&#8221; to the breakpoint instead — and get a nice visual of the layout at each breakpoint in the process!</p>\n\n\n\n<p>Before defining the layout, let&#8217;s assign an ident to each element using the <code>grid-area</code> property as a base style.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">header {\n  grid-area: head;\n}\n\n.left-side {\n  grid-area: left;\n}\n\nmain {\n  grid-area: main;\n}\n\n.right-side {\n  grid-area: right;\n}\n\nfooter {\n  grid-area: foot;\n}</code></pre>\n\n\n\n<p>Now, let&#8217;s define the layout again as a base style. We&#8217;re going with a mobile-first approach so that things will stack by default:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid-container {\n  display: grid;\n  grid-template-areas:\n    \"head\"\n    \"left\"\n    \"main\"\n    \"right\"\n    \"foot\";\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"890\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Mobile-breakpoint.jpg?resize=1600%2C890&#038;ssl=1\" alt=\"\" class=\"wp-image-372646\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Mobile-breakpoint.jpg?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Mobile-breakpoint.jpg?resize=300%2C167&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Mobile-breakpoint.jpg?resize=1024%2C570&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Mobile-breakpoint.jpg?resize=768%2C427&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Mobile-breakpoint.jpg?resize=1536%2C854&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Each grid item is <strong>auto-sized</strong> in this configuration — which seems a little bit weird — so we can set <code>min-height: 100vh</code> on the grid container to give us more room to work with:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"9\"><code markup=\"tt\">.grid-container {\n  display: grid;\n  grid-template-areas:\n    \"head\"\n    \"left\"\n    \"main\"\n    \"right\"\n    \"foot\";\n  min-height: 100vh;\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"882\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Mobile-breakpoint-with-equal-space.jpg?resize=1600%2C882&#038;ssl=1\" alt=\"\" class=\"wp-image-372647\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Mobile-breakpoint-with-equal-space.jpg?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Mobile-breakpoint-with-equal-space.jpg?resize=300%2C165&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Mobile-breakpoint-with-equal-space.jpg?resize=1024%2C564&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Mobile-breakpoint-with-equal-space.jpg?resize=768%2C423&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Mobile-breakpoint-with-equal-space.jpg?resize=1536%2C847&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Now let&#8217;s say we want the <code>main</code> element to sit to the right of the stacked <code>left</code> and <code>right</code> sidebars when we get to a slightly wider viewport width. We re-declare <code>grid-template-areas</code> with an updated ASCII layout to get that:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@media (min-width: 800px) {\n  .parent {\n    grid-template-columns: 0.5fr 1fr;\n    grid-template-rows: 100px 1fr 1fr 100px;\n    grid-template-areas:\n      \"head head\"\n      \"left main\"\n      \"right main\"\n      \"foot foot\";\n  }\n}</code></pre>\n\n\n\n<p class=\"is-style-explanation\">I tossed some column and row sizing in there purely for aesthetics.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"878\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Tablet-breakpoint.jpg?resize=1600%2C878&#038;ssl=1\" alt=\"\" class=\"wp-image-372648\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Tablet-breakpoint.jpg?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Tablet-breakpoint.jpg?resize=300%2C165&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Tablet-breakpoint.jpg?resize=1024%2C562&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Tablet-breakpoint.jpg?resize=768%2C421&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Tablet-breakpoint.jpg?resize=1536%2C843&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>As the browser gets even wider, we may want to change the layout again, so that <code>main</code> is sandwiched between the <code>left</code> and <code>right</code> sidebars. Let&#8217;s write the layout visually!</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid-container {\n  grid-template-columns: 200px 1fr 200px; /* again, just for sizing */\n  grid-template-areas:\n    \"head head head\"\n    \"left main right\"\n    \"left main right\"\n    \"foot foot foot\";\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1331\" height=\"788\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Universal-Usecase-1.png?resize=1331%2C788&#038;ssl=1\" alt=\"\" class=\"wp-image-372649\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Universal-Usecase-1.png?w=1331&amp;ssl=1 1331w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Universal-Usecase-1.png?resize=300%2C178&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Universal-Usecase-1.png?resize=1024%2C606&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Universal-Usecase-1.png?resize=768%2C455&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_bGvmbZK\" src=\"//codepen.io/anon/embed/bGvmbZK?height=450&amp;theme-id=1&amp;slug-hash=bGvmbZK&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed bGvmbZK\" title=\"CodePen Embed bGvmbZK\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"leveraging-implicit-line-names-for-flexibility\">Leveraging implicit line names for flexibility</h3>\n\n\n<p>According to the spec, <code>grid-template-areas</code> automatically generates names for the grid lines created by named grid areas. We call these implicitly-named grid lines because they are named for us for free without any additional work.</p>\n\n\n\n<p>Every named grid area gets four implicitly-named grid lines, two in the column direction and two in the row direction, where <code>-start</code> and <code>-end</code> are appended to the ident. For example, a grid area named <code>head</code> gets <code>head-start</code> and <code>head-end</code> lines in both directions for a total of four implicitly-named grid lines.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"826\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Implicitly-assigned-line-names.jpg?resize=1600%2C826&#038;ssl=1\" alt=\"Implicitly assigned line names.\" class=\"wp-image-372651\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Implicitly-assigned-line-names.jpg?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Implicitly-assigned-line-names.jpg?resize=300%2C155&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Implicitly-assigned-line-names.jpg?resize=1024%2C529&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Implicitly-assigned-line-names.jpg?resize=768%2C396&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Implicitly-assigned-line-names.jpg?resize=1536%2C793&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We can use these lines to our advantage! For instance, if we want an element to overlay the <code>main</code>, <code>left</code>, and <code>right</code> areas of our grid. Earlier, we talked about how layouts have to be rectangular — no &#8220;T&#8221; and &#8220;L&#8221; shaped layouts allowed. Consequently, we&#8217;re unable to use the ASCII visual layout method to place the overlay. We can, however, use our implicit line names using the same <code>grid-area</code> property on the overlay that we use to position the other elements.</p>\n\n\n\n<p>Did you know that <code>grid-area</code> is a shorthand property, sort of the same way that <code>margin</code> and <code>padding</code> are shorthand properties? It takes multiple values the same way, but instead of following a &#8220;clockwise&#8221; direction like, <code>margin</code> — which goes in order of <code>margin-block-start</code>, <code>margin-inline-end</code>, <code>margin-block-end</code>, and <code>margin-inline-start</code> — <code>grid-area</code> goes like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">grid-area: block-start / inline-start / block-end / inline-end;</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"826\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Block-and-inline-flow.jpg?resize=1600%2C826&#038;ssl=1\" alt=\"Showing the block and inline flow directions in a left-to-right writing mode.\" class=\"wp-image-372652\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Block-and-inline-flow.jpg?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Block-and-inline-flow.jpg?resize=300%2C155&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Block-and-inline-flow.jpg?resize=1024%2C529&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Block-and-inline-flow.jpg?resize=768%2C396&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Block-and-inline-flow.jpg?resize=1536%2C793&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>But we&#8217;re talking about rows and columns, not block and inline directions, right? Well, they correspond to one another. The row axis corresponds to the block direction, and the column axis corresponds to the inline direction:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">grid-area: grid-row-start / grid-column-start / grid-row-end / grid-column-end;</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"826\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Flow-relative-direction.jpg?resize=1600%2C826&#038;ssl=1\" alt=\"Block and inline axis.\" class=\"wp-image-372654\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Flow-relative-direction.jpg?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Flow-relative-direction.jpg?resize=300%2C155&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Flow-relative-direction.jpg?resize=1024%2C529&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Flow-relative-direction.jpg?resize=768%2C396&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Flow-relative-direction.jpg?resize=1536%2C793&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Back to positioning that overlay element as a grid item in our layout. The <code>grid-area</code> property will be helpful to position the element using our implicitly-named grid lines:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.overlay {\n  grid-area: left-start / left-start / right-end / main-end;\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gOeBWWL\" src=\"//codepen.io/anon/embed/gOeBWWL?height=750&amp;theme-id=1&amp;slug-hash=gOeBWWL&amp;default-tab=result\" height=\"750\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gOeBWWL\" title=\"CodePen Embed gOeBWWL\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"creating-a-minimal-grid-system\">Creating a minimal grid system</h3>\n\n\n<p>When we focus on layouts like the &#8220;universal&#8221; use case we just saw, it&#8217;s tempting to think of grid areas in terms of one area per element. But it doesn&#8217;t have to work like that. We can repeat idents to reserve more space for them in the layout. We saw that when we repeated the <code>head</code> and <code>foot</code> idents in the last example:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"4,7\"><code markup=\"tt\">.grid-container {\n  grid-template-areas:\n    \"head head head\"\n    \"left main right\"\n    \"left main right\"\n    \"foot foot foot\";\n}</code></pre>\n\n\n\n<p>Notice that <code>main</code>, <code>left</code>, and <code>right</code> are also repeated but in the block direction.</p>\n\n\n\n<p>Let&#8217;s forget about full page layouts and use named grid areas on a component. Grid is just as good for component layouts as full pages!</p>\n\n\n\n<p>Here&#8217;s a pretty standard hero component that sports a row of images followed by different blocks of text:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2560\" height=\"1820\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Layout-scaled.jpg?resize=2560%2C1820&#038;ssl=1\" alt=\"A row of weightlifting photos above a heading, blurb, then a row of three links.\" class=\"wp-image-372656\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Layout-scaled.jpg?w=2560&amp;ssl=1 2560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Layout-scaled.jpg?resize=300%2C213&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Layout-scaled.jpg?resize=1024%2C728&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Layout-scaled.jpg?resize=768%2C546&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Layout-scaled.jpg?resize=1536%2C1092&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Layout-scaled.jpg?resize=2048%2C1456&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>The HTML is pretty simple:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"hero\">\n  &lt;div class=\"image\">\n    &lt;img src=\"...\" alt=\"\" />\n  &lt;/div>\n  &lt;div class=\"text\">\n    &lt;!-- ... -->\n  &lt;/div>\n&lt;/div></code></pre>\n\n\n\n<p>We could do this for a real fast stacked layout:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.hero {\n  grid-template-areas:\n    \"image\"\n    \"text\";\n}</code></pre>\n\n\n\n<p>But then we have to reach for some <code>padding</code>, <code>max-width</code> or whatever to get the text area narrower than the row of images. How about we expand our ASCII layout into a four-column grid instead by repeating our idents on both rows:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.hero {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr); /* maintain equal sizing */\n  grid-template-areas:\n    \"image image image image\"\n    \"text  text  text  text\";\n}</code></pre>\n\n\n\n<p>Alright, now we can place our grid items into those named areas:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.hero .image {\n  grid-area: image;\n}\n\n.hero .text {\n  grid-area: text;\n}</code></pre>\n\n\n\n<p>So far, so good — both rows take up the entire width. We can use that as our base layout for small screens.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"958\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Mobile-Breakpoint.jpg?resize=1600%2C958&#038;ssl=1\" alt=\"Showing grid lines on the stacked mobile version of the page.\" class=\"wp-image-372658\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Mobile-Breakpoint.jpg?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Mobile-Breakpoint.jpg?resize=300%2C180&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Mobile-Breakpoint.jpg?resize=1024%2C613&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Mobile-Breakpoint.jpg?resize=768%2C460&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Mobile-Breakpoint.jpg?resize=1536%2C920&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>But maybe we want to introduce the narrower text when the viewport reaches a larger width. We can use what we know about the full-stop character to &#8220;skip&#8221; columns. Let&#8217;s have the <code>text</code> ident skip the first and last columns in this case.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@media (min-width: 800px) {\n  main {\n    grid-template-columns: repeat(6, 1fr); /* increase to six columns */\n    grid-template-areas:\n      \"image image image image image image\"\n      \"..... text  text  text  text  .....\";\n  }\n}</code></pre>\n\n\n\n<p>Now we have the spacing we want:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"970\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Small-Tablet-Breakpoint.jpg?resize=1600%2C970&#038;ssl=1\" alt=\"Showing grid lines for a table-sized layout of the page.\" class=\"wp-image-372660\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Small-Tablet-Breakpoint.jpg?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Small-Tablet-Breakpoint.jpg?resize=300%2C182&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Small-Tablet-Breakpoint.jpg?resize=1024%2C621&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Small-Tablet-Breakpoint.jpg?resize=768%2C466&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Small-Tablet-Breakpoint.jpg?resize=1536%2C931&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>If the layout needs additional tweaking at even larger breakpoints, we can add more columns and go from there:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.hero {\n  grid-template-columns: repeat(8, 1fr);\n  grid-template-areas:\n    \"image image image image image image image image\"\n    \"..... text  text  text  text  text  text  .....\";\n}</code></pre>\n\n\n\n<p>Dev tool visualization:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"974\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Large-Tablet-Breakpoint.jpg?resize=1600%2C974&#038;ssl=1\" alt=\"Showing grid lines for a large table sized layout of the page.\" class=\"wp-image-372662\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Large-Tablet-Breakpoint.jpg?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Large-Tablet-Breakpoint.jpg?resize=300%2C183&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Large-Tablet-Breakpoint.jpg?resize=1024%2C623&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Large-Tablet-Breakpoint.jpg?resize=768%2C468&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Minimal-Large-Tablet-Breakpoint.jpg?resize=1536%2C935&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Remember when 12-column and 16-column layouts were the big things in CSS frameworks? We can quickly scale up to that and maintain a nice visual ASCII layout in the code:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">main {\n  grid-template-columns: repeat(12, 1fr);\n  grid-template-areas:\n    \"image image image image image image image image image image image image\"\n    \"..... text  text  text  text  text  text  text  text  text  text  .....\";\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_rNdqBbX\" src=\"//codepen.io/anon/embed/rNdqBbX?height=900&amp;theme-id=1&amp;slug-hash=rNdqBbX&amp;default-tab=result\" height=\"900\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed rNdqBbX\" title=\"CodePen Embed rNdqBbX\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"lets-look-at-something-more-complex\">Let&#8217;s look at something more complex</h3>\n\n\n<p>We&#8217;ve looked at one fairly generic example and one relatively straightforward example. We can still get nice ASCII layout visualizations with more complex layouts.</p>\n\n\n\n<p>Let&#8217;s work up to this:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2560\" height=\"1820\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Layout-scaled.jpg?resize=2560%2C1820&#038;ssl=1\" alt=\"Three images positioned around a fancy heading.\" class=\"wp-image-372664\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Layout-scaled.jpg?w=2560&amp;ssl=1 2560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Layout-scaled.jpg?resize=300%2C213&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Layout-scaled.jpg?resize=1024%2C728&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Layout-scaled.jpg?resize=768%2C546&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Layout-scaled.jpg?resize=1536%2C1092&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Layout-scaled.jpg?resize=2048%2C1456&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>I&#8217;ve split this up into two elements in the HTML, a <code>header</code> and a <code>main</code>:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;header>\n  &lt;div class=\"logo\"> ... &lt;/div>\n  &lt;div class=\"menu\"> ... &lt;/div>\n&lt;/header>\n&lt;main>\n  &lt;div class=\"image\"> ... &lt;/div>\n  &lt;h2> ... &lt;/h2>\n  &lt;div class=\"image\"> ... &lt;/div>\n  &lt;div class=\"image\"> ... &lt;/div>\n&lt;/main></code></pre>\n\n\n\n<p>I think flexbox is more appropriate for the <code>header</code> since we can space its child elements out easily that way. So, no <code>grid</code> there:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">header {\n  display: flex;\n  justify-content: space-between;\n  /* etc. */\n}</code></pre>\n\n\n\n<p>But <code>grid</code> is well-suited for the <code>main</code> element&#8217;s layout. Let&#8217;s define the layout and assign the idents to the corresponding elements that we need to position the <code>.text</code> and three <code>.image</code> elements. We&#8217;ll start with this as our baseline for small screens:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-template-areas:\n    \"image1 image1 .....  image2\"\n    \"texts  texts  texts  texts\"\n    \".....  image3 image3 .....\";\n}</code></pre>\n\n\n\n<p>You can already see where we&#8217;re going with this, right? The layout is visualized for us, and we can drop the grid items into place with the custom idents:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.image:nth-child(1) {\n  grid-area: image1;\n}\n\n.image:nth-last-child(2) {\n  grid-area: image2;\n}\n\n.image:nth-last-child(1) {\n  grid-area: image3;\n}\n\nh2 {\n  grid-area: texts;\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"958\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Mobile-Breakpoint.jpg?resize=1600%2C958&#038;ssl=1\" alt=\"Showing grid lines on a mobile layout of the page.\" class=\"wp-image-372666\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Mobile-Breakpoint.jpg?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Mobile-Breakpoint.jpg?resize=300%2C180&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Mobile-Breakpoint.jpg?resize=1024%2C613&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Mobile-Breakpoint.jpg?resize=768%2C460&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Mobile-Breakpoint.jpg?resize=1536%2C920&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>That&#8217;s our base layout, so let&#8217;s venture into a wider breakpoint:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@media (min-width: 800px) {\n  .grid {\n    grid-template-columns: repeat(8, 1fr);\n    grid-template-areas:\n      \". image1 image1 ...... ......  ...... image2 .\"\n      \". texts  texts  texts  texts   texts  image2 .\"\n      \". .....  image3 image3 image3  image3 ...... .\";\n  }\n}</code></pre>\n\n\n\n<p>I bet you know exactly how that will look because the layout is right there in the code!</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"983\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Tablet-Breakpoint.jpg?resize=1600%2C983&#038;ssl=1\" alt=\"Showing grid lines for a table-sized layout of the page.\" class=\"wp-image-372668\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Tablet-Breakpoint.jpg?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Tablet-Breakpoint.jpg?resize=300%2C184&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Tablet-Breakpoint.jpg?resize=1024%2C629&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Tablet-Breakpoint.jpg?resize=768%2C472&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Tablet-Breakpoint.jpg?resize=1536%2C944&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Same deal if we decide to scale up even further:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.grid {\n  grid-template-columns: repeat(12, 1fr);\n  grid-template-areas:\n    \". image1 image1 .....  .....   .....  .....  .....  .....  .....  .....  .\"\n    \". texts  texts  texts  texts   texts  texts  texts  texts  texts  image2 .\"\n    \". .....  image3 image3 image3  image3 .....  .....  .....  .....  .....  .\";\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1600\" height=\"960\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Desktop-Breakpoint.jpg?resize=1600%2C960&#038;ssl=1\" alt=\"Showing grid lines for a desktop-sized layout of the page.\" class=\"wp-image-372670\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Desktop-Breakpoint.jpg?w=1600&amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Desktop-Breakpoint.jpg?resize=300%2C180&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Desktop-Breakpoint.jpg?resize=1024%2C614&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Desktop-Breakpoint.jpg?resize=768%2C461&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Modern-Desktop-Breakpoint.jpg?resize=1536%2C922&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Here&#8217;s the full demo:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gOeBYNo\" src=\"//codepen.io/anon/embed/gOeBYNo?height=900&amp;theme-id=1&amp;slug-hash=gOeBYNo&amp;default-tab=result\" height=\"900\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gOeBYNo\" title=\"CodePen Embed gOeBYNo\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p class=\"is-style-explanation\">I&#8217;m using the &#8220;negative <code>margin</code> hack&#8221; to get the first image to overlap the heading.</p>\n\n\n<h3 id=\"wrapping-up\">Wrapping up</h3>\n\n\n<p>I&#8217;m curious if anyone else is using <code>grid-template-areas</code> to create named areas for the benefit of having an ASCII visual of the grid layout. Having that as a reference in my CSS code has helped de-mystify some otherwise complex designs that may have been even more complex when dealing with line numbers.</p>\n\n\n\n<p>But if nothing else, defining grid layouts this way teaches us some interesting things about CSS Grid that we saw throughout this post:</p>\n\n\n\n<ul><li>The <code>grid-template-areas</code> property allows us to create custom idents — or &#8220;named areas&#8221; — and use them to position grid items using the <code>grid-area</code> property.</li><li>There are three types of &#8220;tokens&#8221; that <code>grid-template-areas</code> accepts as values, including named cell tokens, null cell tokens, and trash cell tokens.</li><li>Each row that is defined in <code>grid-template-areas</code> needs the same number of cells. Ignoring a single cell doesn&#8217;t create a layout; it is considered a trash token.</li><li>We can get a visual ASCII-like diagram of the grid layout in the <code>grid-template-areas</code> property value by using required whitespaces between named cell tokens while defining the grid layout.</li><li>Make sure there is no whitespace inside a null cell token (e.g. <code>.....</code>). Otherwise, a single whitespace between null cell tokens creates unnecessary empty cells, resulting in an invalid layout.</li><li>We can redefine the layout at various breakpoints by re-positioning the grid items using <code>grid-area</code>, then re-declaring the layout with <code>grid-template-areas</code> on the grid container to update the track listing, if needed. There&#8217;s no need to touch the grid items.</li><li>Custom named grid areas automatically get four implicitly assigned line names — <code>&lt;custom-ident&gt;-start</code> and <code>&lt;custom-ident&gt;-end</code> in both the column and row directions.</li></ul>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/using-grid-named-areas-to-visualize-and-reference-your-layout/\">Using Grid Named Areas to Visualize (and Reference) Your Layout</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "category": "Article",
          "link": "https://css-tricks.com/using-grid-named-areas-to-visualize-and-reference-your-layout/",
          "creator": "Preethi Selvam",
          "pubDate": "Fri, 26 Aug 2022 13:44:49 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "css-tricks",
          "feed": "css tricks",
          "read": true,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "51ba05ec155d0ef129a4fa1f080418a0",
          "highlights": []
        },
        {
          "title": "Not Sure How to WordPress Anymore?",
          "description": "<p>Neither do I! And that&#8217;s probably because there&#8217;s a lot happening in WordPress-land. The evolution towards full-site editing (FSE) introduces frequent changes to the way we build themes and plugins, and at such break-neck speed that the documentation itself is &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/not-sure-how-to-wordpress-anymore/\">Not Sure How to WordPress Anymore?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "content": "\n<p>Neither do I! And that&#8217;s probably because there&#8217;s a lot happening in WordPress-land. The evolution towards full-site editing (FSE) introduces frequent changes to the way we build themes and plugins, and at such break-neck speed that the documentation itself is either non-existent or nearly stale upon being published. Heck, the term &#8220;full-site editing&#8221; <a href=\"https://wptavern.com/wordpress-contributors-consider-renaming-full-site-editing\" rel=\"noopener\">might even change</a>.</p>\n\n\n\n<span id=\"more-372616\"></span>\n\n\n\n<p>Tom McFarlin was musing about this in his post titled <a href=\"https://tommcfarlin.com/writing-tutorials-in-these-gutenberg-times/\" rel=\"noopener\">&#8220;Writing Tutorials in These Gutenberg Times&#8221;</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>I know Gutenberg has been in development for five years and I know that it’s matured a lot over the course of that time. But [t]he number of tutorials explaining how to do something that’s already outdated was absolutely incredible.</p></blockquote>\n\n\n\n<p>The truth is that I wouldn&#8217;t know where to start if I was asked to make a new WordPress site. As I see, there are a number of ways to go in this evolving era of WordPress:</p>\n\n\n\n<ul><li>Make a virtually empty theme that leverages the Site Editor for templating and block patterns for layouts.</li><li>Make a child theme based on the existing Twenty Twenty-Two theme (because it supports FSE out of the box and is minimal enough to customize without much fuss).</li><li>Make a classic theme.</li><li>Ditch theming altogether and make a headless front-end that consumes the WordPress REST API.</li></ul>\n\n\n\n<p>I mean, we have so many tools for extending WordPress as a CMS that the front end of a WordPress site may vary from site to site. We can quite literally build an entire custom WordPress site with nothing but some tweaks to the <code>theme.json</code> file and fiddling around with layouts in the Block Editor.</p>\n\n\n\n<p>It&#8217;s amazing and dizzying all at once.</p>\n\n\n\n<p>It can also be frustrating, and we saw some of the frustration boil over when Matt Mullenweg <a href=\"https://make.wordpress.org/meta/2022/08/01/developing-the-redesigned-home-and-download-pages/#comment-9362\" rel=\"noopener\">commented on the recent design updates</a> to the WordPress.org homepage and the amount of time took to complete:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>[&#8230;] it’s such a basic layout, it’s hard to imagine it taking a single person more than a day on Squarespace, Wix, Webflow, or one of the WP page builders.</p></blockquote>\n\n\n\n<p>(And, yes, someone proved that a nearly identical copy of the design could be <a href=\"https://wptavern.com/jamie-marsland-recreates-wordpress-org-homepage-in-20-minutes-using-the-block-editor\" rel=\"noopener\">created in 20 minutes</a>.)</p>\n\n\n\n<p>I think Matt&#8217;s comments have more to do with the process and solving the right problems than they are criticizing the approach that was taken. But reading the comments on that post is a nice microcosm of what I believe is an existential dilemma that many WordPress developers — including myself — are feeling after five years of living between &#8220;classic&#8221; and FSE themes.</p>\n\n\n\n<p>I&#8217;ll be honest: I feel super out of touch with FSE development. So out of touch that I&#8217;ve wondered whether I&#8217;ve fallen too far behind and whether I&#8217;ll be able to catch up. I know there&#8217;s a huge effort to bolster learning (<a href=\"https://learn.wordpress.org\" rel=\"noopener\">Learn WordPress</a> is a great example of that), but it feels like there&#8217;s still something missing — or some sorta disconnect — that&#8217;s preventing the community from being on the same page as far as where we are and where we&#8217;re heading.</p>\n\n\n\n<p>Could it be a lack of communication? Nah, there&#8217;s lots of that, not to mention lots of opportunities to attend meetings and view meeting notes. Could it be a lack of stable documentation? That&#8217;s legit, at least when I&#8217;ve tried seeking information on block development.</p>\n\n\n\n<p>Perhaps the biggest shortcoming is the dearth of blog posts that share tips, tricks, and best practices. The WordPress community has always been a vast army of folks who generously share their talents and wisdom. But I think Tom summed it up best when he tweeted:</p>\n\n\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">my sympathy to anyone who duckduckgo&#8217;s/googles a tutorial for how to create a gutenberg block and cannot find a single consistent tutorial.<br><br>what a mess.</p>— Tom McFarlin (@tommcfarlin) <a href=\"https://twitter.com/tommcfarlin/status/1559908867169030145?ref_src=twsrc%5Etfw\" rel=\"noopener\">August 17, 2022</a></blockquote> <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n\n<p>I, for one, would love to be writing about WordPress as much as I have in the &#8220;classic&#8221; era. But again, there&#8217;s that elusive starting point that prevents me from feeling confident about anything I&#8217;d say.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/not-sure-how-to-wordpress-anymore/\">Not Sure How to WordPress Anymore?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "category": "Article",
          "link": "https://css-tricks.com/not-sure-how-to-wordpress-anymore/",
          "creator": "Geoff Graham",
          "pubDate": "Thu, 25 Aug 2022 14:34:06 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "css-tricks",
          "feed": "css tricks",
          "read": true,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "450ef5c94349ac496bc7393d4ea52d1c",
          "highlights": []
        },
        {
          "title": "Using CSS Cascade Layers to Manage Custom Styles in a Tailwind Project",
          "description": "<p>If a utility class only does one thing, chances are you don’t want it to be overridden by any styles coming from elsewhere. One approach is to use <code>!important</code> to be 100% certain the style will be applied, regardless of &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/using-css-cascade-layers-to-manage-custom-styles-in-a-tailwind-project/\">Using CSS Cascade Layers to Manage Custom Styles in a Tailwind Project</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "content": "\n<p>If a utility class only does one thing, chances are you don’t want it to be overridden by any styles coming from elsewhere. One approach is to use <code>!important</code> to be 100% certain the style will be applied, regardless of specificity conflicts.</p>\n\n\n\n<p>The Tailwind config file has an <code>!important</code> option that will automatically add <code>!important</code> to every utility class. There’s nothing wrong with using <code>!important</code> this way, but nowadays there are better ways to handle specificity. Using <a href=\"https://css-tricks.com/css-cascade-layers/\">CSS Cascade Layers</a> we can avoid the heavy-handed approach of using <code>!important</code>.</p>\n\n\n\n<span id=\"more-372576\"></span>\n\n\n\n<p>Cascade layers allow us to group styles into “layers”. The precedence of a layer always beats the specificity of a selector. Specificity only matters inside each layer. Establishing a sensible layer order helps avoid styling conflicts and specificity wars. That’s what makes CSS Cascade Layers a great tool for <a href=\"https://css-tricks.com/css-cascade-layers/#aa-using-third-party-tools-and-frameworks\">managing custom styles alongside styles from third-party frameworks</a>, like Tailwind.</p>\n\n\n\n<p>A Tailwind source <code>.css</code> file usually starts something like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@tailwind base;\n@tailwind components;\n@tailwind utilities;\n@tailwind variants;</code></pre>\n\n\n\n<p>Let’s take a look at the <a href=\"https://tailwindcss.com/docs/functions-and-directives\" rel=\"noopener\">official Tailwind docs</a> about directives:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Directives are custom Tailwind-specific at-rules you can use in your CSS that offer special functionality for Tailwind CSS projects. Use the <code>@tailwind</code> directive to insert Tailwind’s <code>base</code>, <code>components</code>, <code>utilities</code> and <code>variants</code> styles into your CSS.</p></blockquote>\n\n\n\n<p>In the output CSS file that gets built, Tailwind’s CSS reset — known as <a href=\"https://tailwindcss.com/docs/preflight\" rel=\"noopener\">Preflight</a> — is included first as part of the base styles. The rest of <code>base</code> consists of CSS variables needed for Tailwind to work. <code>components</code> is a place for you to add your own custom classes. Any utility classes you’ve used in your markup will appear next. Variants are styles for things like hover and focus states and responsive styles, which will appear last in the generated CSS file.</p>\n\n\n<h3 id=\"the-tailwind-layer-directive\">The Tailwind <code>@layer</code> directive</h3>\n\n\n<p>Confusingly, Tailwind has its own <code>@layer</code> syntax. This article is about the CSS standard, but let’s take a quick look at the Tailwind version (which gets compiled away and doesn’t end up in the output CSS). The Tailwind <code>@layer</code> directive is a way to inject your own extra styles into a specified part of the output CSS file.</p>\n\n\n\n<p>For example, to append your own styles to the <code>base</code> styles, you would do the following:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer base {\n  h1 {\n    font-size: 30px;\n  }\n}</code></pre>\n\n\n\n<p>The <code>components</code> layer is empty by default — it’s just a place to put your own classes. If you were doing things the Tailwind way, you’d probably use <a href=\"https://tailwindcss.com/docs/reusing-styles#extracting-classes-with-apply\" rel=\"noopener\"><code>@apply</code></a> (although the creator of Tailwind recently <a href=\"https://twitter.com/adamwathan/status/1559250403547652097\" rel=\"noopener\">advised against it</a>), but you can also write classes the regular way:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer components {\n  .btn-blue {\n    background-color: blue;\n    color: white;\n  }\n}</code></pre>\n\n\n\n<p>The CSS standard is much more powerful. Let’s get back to that…</p>\n\n\n<h3 id=\"using-the-css-standard-layer\">Using the CSS standard <code>@layer</code></h3>\n\n\n<p>Here’s how we can rewrite this to use the CSS standard <code>@layer</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer tailwind-base, my-custom-styles, tailwind-utilities;\n\n@layer tailwind-base {\n  @tailwind base;\n}\n\n@layer tailwind-utilities {\n  @tailwind utilities;\n  @tailwind variants;\n} </code></pre>\n\n\n\n<p>Unlike the Tailwind directive, these don’t get compiled away. They’re understood by the browser. In fact, DevTools in Edge, Chrome, Safari, and Firefox will even show you any layers you’ve defined.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1142\" height=\"1092\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_E1087A94CE080EE75D2EC0CAB1FAD8929CE3A7BC90C46499A89BF881781214C6_1659999863993_ScreenShot2022-08-09at12.03.56AM.png?resize=1142%2C1092&#038;ssl=1\" alt=\"CSS Cascade Layers with Tailwind CSS layers in DevTools.\" class=\"wp-image-372579\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_E1087A94CE080EE75D2EC0CAB1FAD8929CE3A7BC90C46499A89BF881781214C6_1659999863993_ScreenShot2022-08-09at12.03.56AM.png?w=1142&amp;ssl=1 1142w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_E1087A94CE080EE75D2EC0CAB1FAD8929CE3A7BC90C46499A89BF881781214C6_1659999863993_ScreenShot2022-08-09at12.03.56AM.png?resize=300%2C287&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_E1087A94CE080EE75D2EC0CAB1FAD8929CE3A7BC90C46499A89BF881781214C6_1659999863993_ScreenShot2022-08-09at12.03.56AM.png?resize=1024%2C979&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_E1087A94CE080EE75D2EC0CAB1FAD8929CE3A7BC90C46499A89BF881781214C6_1659999863993_ScreenShot2022-08-09at12.03.56AM.png?resize=768%2C734&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>You can have as many layers as you want — and name them whatever you want — but in this example, all my custom styles are in a single layer (<code>my-custom-styles</code>). The first line establishes the layer order:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer tailwind-base, my-custom-styles, tailwind-utilities;</code></pre>\n\n\n\n<p>This needs to be provided upfront. Be sure to include this line before any other code that uses <code>@layer</code>. The first layer in the list will be the <em>least</em> powerful, and the last layer in the list will be the <em>most</em> powerful. That means <code>tailwind-base</code> is the <em>least powerful</em> layer and any code in it will be overridden by all the subsequent layers. That also means <code>tailwind-utilities</code> will always trump any other styles — <em>regardless of source order or specificity</em>. (Utilities and variants <em>could</em> go in separate layers, but the maintainers of Tailwind will ensure variants always trump utilities, so long as you include the variants below the utilities directive.)</p>\n\n\n\n<p>Anything that isn’t in a layer will override anything that is in a layer (with the one exception being styles that use <code>!important</code>). So, you could also opt to leave <code>utilities</code> and <code>variants</code> outside of any layer:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer tailwind-base, tailwind-components, my-custom-styles;\n\n@layer tailwind-base {\n  @tailwind base;\n}\n\n@layer tailwind-components {\n  @tailwind components;\n}\n\n@tailwind utilities;\n@tailwind variants;</code></pre>\n\n\n\n<p>What did this actually buy us?&nbsp;There are plenty of times when advanced CSS selectors come in pretty handy. Let’s create a version of&nbsp;<code>:focus-within</code>&nbsp;that only responds to keyboard focus rather than mouse clicks using the&nbsp;<code>:has</code>&nbsp;selector (<a href=\"https://caniuse.com/css-has\" target=\"_blank\" rel=\"noreferrer noopener\">which&nbsp;lands in Chrome 105</a>). This will style a parent element when any of its children receive focus. Tailwind 3.1 introduced&nbsp;<a href=\"https://tailwindcss.com/blog/tailwindcss-v3-1#arbitrary-values-but-for-variants\" target=\"_blank\" rel=\"noreferrer noopener\">custom variants</a>&nbsp;— e.g.&nbsp;<code>&lt;div class=\"[&amp;:has(:focus-visible)]:outline-red-600\"&gt;</code> — but sometimes it’s easier to just write CSS:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@layer tailwind-base, my-custom-styles;\n@layer tailwind-base {\n  @tailwind base;\n}\n\n@tailwind utilities;\n\n@layer my-custom-styles {\n  .radio-container {\n    padding: 4px 24px;\n    border: solid 2px rgb(230, 230, 230);\n  }\n  .radio-container:has(:focus-visible) {\n    outline: solid 2px blue;\n  }\n}</code></pre>\n\n\n\n<p>Let’s say in just one instance we want to override the <code>outline-color</code> from <code>blue</code> to something else. Let’s say the element we’re working with has both the Tailwind class <code>.outline-red-600</code> and our own <code>.radio-container:has(:focus-visible)</code> class:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"outline-red-600 radio-container\"> ... &lt;/div></code></pre>\n\n\n\n<p>Which <code>outline-color</code> will win?</p>\n\n\n\n<p>Ordinarily, the higher specificity of <code>.radio-container:has(:focus-visible)</code> would mean the Tailwind class has no effect — even if it’s lower in the source order. But, unlike the Tailwind <code>@layer</code> directive that relies on source order, the CSS standard <code>@layer</code> overrules specificity.</p>\n\n\n\n<iframe loading=\"lazy\" src=\"https://play.tailwindcss.com/IzAf5vZdl8?file=css\" width=\"100%\" height=\"450\"></iframe>\n\n\n\n<p>As a result, we can use complex selectors in our own custom styles but still override them with Tailwind’s utility classes when we need to — without having to resort to heavy-handed <code>!important</code> usage to get what we want.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/using-css-cascade-layers-to-manage-custom-styles-in-a-tailwind-project/\">Using CSS Cascade Layers to Manage Custom Styles in a Tailwind Project</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "category": "Article",
          "link": "https://css-tricks.com/using-css-cascade-layers-to-manage-custom-styles-in-a-tailwind-project/",
          "creator": "Ollie Williams",
          "pubDate": "Wed, 24 Aug 2022 13:11:47 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "css-tricks",
          "feed": "css tricks",
          "read": true,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "82414a0ad4626fd5caedcf16eabbeb89",
          "highlights": []
        },
        {
          "title": "Removing jQuery from GOV.UK",
          "description": "<p>The GOV.UK team recently published &#8220;<a href=\"https://insidegovuk.blog.gov.uk/2022/08/11/how-and-why-we-removed-jquery-from-gov-uk/\" rel=\"noopener\">How and why we removed jQuery from GOV.UK</a>&#8220;. This was an insightful look at how an organization can assess its tooling and whether something is still the best tool for the job. This &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/removing-jquery-from-gov-uk/\">Removing jQuery from GOV.UK</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "content": "\n<p>The GOV.UK team recently published &#8220;<a href=\"https://insidegovuk.blog.gov.uk/2022/08/11/how-and-why-we-removed-jquery-from-gov-uk/\" rel=\"noopener\">How and why we removed jQuery from GOV.UK</a>&#8220;. This was an insightful look at how an organization can assess its tooling and whether something is still the best tool for the job. This is not a nudge to strip libraries out of your current project right now! Many of us may still be supporting legacy projects and browser requirements that prevent this from being a viable option.</p>\n\n\n\n<span id=\"more-372485\"></span>\n\n\n\n<p>Some of the criticism appears to be that the library size argument is negligible on modern network speeds and caching.</p>\n\n\n\n<p class=\"is-style-explanation\">GOV.UK posted an update to address this criticism with metrics &#8211; &#8220;<a href=\"https://insidegovuk.blog.gov.uk/2022/08/15/the-impact-of-removing-jquery-on-our-web-performance/\" rel=\"noopener\">The impact of removing jQuery on our web performance</a>&#8220;.</p>\n\n\n\n<p>This article also makes the case for improving maintenance. Instead of upgrading disparate outdated versions of code and having to address security updates in a piecemeal approach, removing the dependency reduces this footprint. This is the dream of having the luxury for <a href=\"https://css-tricks.com/defining-and-dealing-with-technical-debt/\">addressing technical debt</a>.</p>\n\n\n\n<p class=\"is-style-explanation\">Previously, <a href=\"https://css-tricks.com/removing-jquery-from-github-com-frontend/\">GitHub also documented how they incrementally decoupled jQuery from their front-end code</a>. Improving maintenance and developer experience played a role into their decision.</p>\n\n\n\n<p>What caught my eye in particular was the link to the <a href=\"https://docs.publishing.service.gov.uk/manual/how-to-remove-jquery-from-javascript.html\" rel=\"noopener\">documentation on how to remove jQuery</a>. Understanding how to decouple and perform migration steps are maintenance tasks that will continue to come up for websites and it&#8217;s reassuring to have a guide from someone that had to do the same.</p>\n\n\n\n<p>Further musing on this subject turned up the old chestnuts &#8220;<a href=\"https://css-tricks.com/might-need-jquery/\">You Might Not Need jQuery</a>&#8221; (2014), &#8220;<a href=\"https://css-tricks.com/now-ever-might-not-need-jquery/\">(Now More Than Ever) You Might Not Need jQuery</a>&#8221; (2017), &#8220;<a href=\"https://css-tricks.com/jquery-still-relevant/\">Is jQuery still relevant? (1)</a>&#8221; (2016),  and &#8220;<a href=\"https://css-tricks.com/jquery-still-relevant-2/\">Is jQuery still relevant? (2)</a>&#8221; (2017).</p>\n<p><a href=\"https://insidegovuk.blog.gov.uk/2022/08/11/how-and-why-we-removed-jquery-from-gov-uk/\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/removing-jquery-from-gov-uk/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/removing-jquery-from-gov-uk/\">Removing jQuery from GOV.UK</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "category": "Link",
          "link": "https://css-tricks.com/removing-jquery-from-gov-uk/",
          "creator": "Bradley Kouchi",
          "pubDate": "Tue, 23 Aug 2022 13:04:31 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "css-tricks",
          "feed": "css tricks",
          "read": true,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "db896d878339c872d96f0005234d6aeb",
          "highlights": []
        },
        {
          "title": "CSS Grid and Custom Shapes, Part 2",
          "description": "<p>Alright, so the <a href=\"https://css-tricks.com/css-grid-and-custom-shapes-part-1\">last time we checked in</a>, we were using CSS Grid and combining them with CSS <code>clip-path</code> and <code>mask</code> techniques to create grids with fancy shapes.</p>\n<p>Here&#8217;s just one of the fantastic grids we made together:</p>\n<p>CodePen&#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-grid-and-custom-shapes-part-2/\">CSS Grid and Custom Shapes, Part 2</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "content": "\n<p>Alright, so the <a href=\"https://css-tricks.com/css-grid-and-custom-shapes-part-1\">last time we checked in</a>, we were using CSS Grid and combining them with CSS <code>clip-path</code> and <code>mask</code> techniques to create grids with fancy shapes.</p>\n\n\n\n<p>Here&#8217;s just one of the fantastic grids we made together:</p>\n\n\n\n<span id=\"more-372396\"></span>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_OJvWKPm\" src=\"//codepen.io/anon/embed/OJvWKPm?height=550&amp;theme-id=1&amp;slug-hash=OJvWKPm&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed OJvWKPm\" title=\"CodePen Embed OJvWKPm\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Ready for the second round? We are still working with CSS Grid, <code>clip-path</code>, and <code>mask</code>, but by the end of this article, we&#8217;ll end up with different ways to arrange images on the grid, including some rad hover effects that make for an authentic, interactive experience to view pictures.</p>\n\n\n\n<p>And guess what? We&#8217;re using the <strong>same markup that we used last time</strong>. Here&#8217;s that again:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"gallery\">\n  &lt;img src=\"...\" alt=\"...\">\n  &lt;img src=\"...\" alt=\"...\">\n  &lt;img src=\"...\" alt=\"...\">\n  &lt;img src=\"...\" alt=\"...\">\n  &lt;!-- as many times as we want -->\n&lt;/div></code></pre>\n\n\n\n<p>Like the previous article, we only need a container with images inside. Nothing more!</p>\n\n\n<h3 id=\"nested-image-grid\">Nested Image Grid</h3>\n\n\n<p>Last time, our grids were, well, typical image grids. Other than the neat shapes we masked them with, they were pretty standard symmetrical grids as far as how we positioned the images inside.</p>\n\n\n\n<p>Let&#8217;s try nesting an image in the center of the grid:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_MWVbgOo\" src=\"//codepen.io/anon/embed/MWVbgOo?height=550&amp;theme-id=1&amp;slug-hash=MWVbgOo&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed MWVbgOo\" title=\"CodePen Embed MWVbgOo\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We start by setting a 2✕2 grid for four images:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery {\n  --s: 200px; /* controls the image size */\n  --g: 10px; /* controls the gap between images */\n\n  display: grid;\n  gap: var(--g);\n  grid-template-columns: repeat(2, auto);\n}\n.gallery > img {\n  width: var(--s);\n  aspect-ratio: 1;\n  object-fit: cover;\n}</code></pre>\n\n\n\n<p>Nothing complex yet. The next step is to cut the corner of our images to create the space for the nested image. I already have a detailed article on <a href=\"https://css-tricks.com/cut-corners-using-css-mask-and-clip-path-properties/\">how to cut corners using <code>clip-path</code> and <code>mask</code></a>. You can also use my <a href=\"https://css-generators.com/custom-corners/\" rel=\"noopener\">online generator</a> to get the CSS for masking corners.</p>\n\n\n\n<p>What we need here is to cut out the corners at an angle equal to <code>90deg</code>. We can use the same <a href=\"https://css-tricks.com/cut-corners-using-css-mask-and-clip-path-properties/#aa-angled-cut-out\">conic-gradient technique</a> from that article to do that:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery > img {\n   mask: conic-gradient(from var(--_a), #0000 90deg, #000 0);\n}\n.gallery > img:nth-child(1) { --_a: 90deg; }\n.gallery > img:nth-child(2) { --_a: 180deg; }\n.gallery > img:nth-child(3) { --_a: 0deg; }\n.gallery > img:nth-child(4) { --_a:-90deg; }</code></pre>\n\n\n\n<p>We could use the <code>clip-path</code> method for cutting corners from that same article, but masking with gradients is more suitable here because we have the same configuration for all the images — all we need is a rotation (defined with the variable <code>--_a</code>) get the effect, so we&#8217;re masking from the inside instead of the outside edges.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"436\" height=\"431\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659346143713_image.png?resize=436%2C431&#038;ssl=1\" alt=\"Two by two grid of images with a white square stacked on top in the center.\" class=\"wp-image-372397\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659346143713_image.png?w=436&amp;ssl=1 436w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659346143713_image.png?resize=300%2C297&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Now we can place the nested image inside the masked space. First, let&#8217;s make sure we have a fifth image element in the HTML:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"6\"><code markup=\"tt\">&lt;div class=\"gallery\">\n  &lt;img src=\"...\" alt=\"...\">\n  &lt;img src=\"...\" alt=\"...\">\n  &lt;img src=\"...\" alt=\"...\">\n  &lt;img src=\"...\" alt=\"...\">\n  &lt;img src=\"...\" alt=\"...\">\n&lt;/div></code></pre>\n\n\n\n<p>We are going to rely on the good ol&#8217; absolute positioning to place it in there:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery > img:nth-child(5) {\n  position: absolute;\n  inset: calc(50% - .5*var(--s));\n  clip-path: inset(calc(var(--g) / 4));\n}</code></pre>\n\n\n\n<p>The <a href=\"https://css-tricks.com/almanac/properties/i/inset/\"><code>inset</code></a> property allows us to place the image at the center using a single declaration. We know the size of the image (defined with the variable <code>--s</code>), and we know that the container&#8217;s size equals 100%. We do some math, and the distance from each edge should be equal to <code>(100% - var(--s))/2</code>.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"646\" height=\"478\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659347070519_image.png?resize=646%2C478&#038;ssl=1\" alt=\"Diagram of the widths needed to complete the design.\" class=\"wp-image-372398\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659347070519_image.png?w=646&amp;ssl=1 646w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659347070519_image.png?resize=300%2C222&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>You might be wondering why we&#8217;re using <code>clip-path</code> at all here. We&#8217;re using it with the nested image to have a consistent gap. If we were to remove it, you would notice that we don&#8217;t have the same gap between all the images. This way, we&#8217;re cutting a little bit from the fifth image to get the proper spacing around it.</p>\n\n\n\n<p>The complete code again:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery {\n  --s: 200px; /* controls the image size */\n  --g: 10px;  /* controls the gap between images */\n  \n  display: grid;\n  gap: var(--g);\n  grid-template-columns: repeat(2, auto);\n  position: relative;\n}\n\n.gallery > img {\n  width: var(--s);\n  aspect-ratio: 1;\n  object-fit: cover;\n  mask: conic-gradient(from var(--_a), #0000 90deg, #000 0);\n}\n\n.gallery > img:nth-child(1) {--_a: 90deg}\n.gallery > img:nth-child(2) {--_a:180deg}\n.gallery > img:nth-child(3) {--_a:  0deg}\n.gallery > img:nth-child(4) {--_a:-90deg}\n.gallery > img:nth-child(5) {\n  position: absolute;\n  inset: calc(50% - .5*var(--s));\n  clip-path: inset(calc(var(--g) / 4));\n}</code></pre>\n\n\n\n<p>Now, many of you might also be wondering: why all the complex stuff when we can place the last image on the top and add a border to it? That would hide the images underneath the nested image without a mask, right?</p>\n\n\n\n<p>That&#8217;s true, and we will get the following:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_poLpQax/5196aeab31a41be5483bf8aacc2e2cc5\" src=\"//codepen.io/anon/embed/preview/poLpQax/5196aeab31a41be5483bf8aacc2e2cc5?height=550&amp;theme-id=1&amp;slug-hash=poLpQax/5196aeab31a41be5483bf8aacc2e2cc5&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed poLpQax/5196aeab31a41be5483bf8aacc2e2cc5\" title=\"CodePen Embed poLpQax/5196aeab31a41be5483bf8aacc2e2cc5\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>No <code>mask</code>, no <code>clip-path</code>. Yes, the code is easy to understand, but there is a little drawback: the border color needs to be the same as the main background to make the illusion perfect. This little drawback is enough for me to make the code more complex in exchange for real transparency independent of the background. I am not saying a border approach is bad or wrong. I would recommend it in most cases where the background is known. But we are here to explore new stuff and, most important, build components that don&#8217;t depend on their environment.</p>\n\n\n\n<p>Let&#8217;s try another shape this time:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_mdxwvKB/0b799ba9d9abbfe24f7f5ba2d60a4700\" src=\"//codepen.io/anon/embed/preview/mdxwvKB/0b799ba9d9abbfe24f7f5ba2d60a4700?height=550&amp;theme-id=1&amp;slug-hash=mdxwvKB/0b799ba9d9abbfe24f7f5ba2d60a4700&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed mdxwvKB/0b799ba9d9abbfe24f7f5ba2d60a4700\" title=\"CodePen Embed mdxwvKB/0b799ba9d9abbfe24f7f5ba2d60a4700\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>This time, we made the nested image a circle instead of a square. That&#8217;s an easy task with <a href=\"https://css-tricks.com/almanac/properties/b/border-radius/\"><code>border-radius</code></a> But we need to use a <a href=\"https://css-tricks.com/cut-corners-using-css-mask-and-clip-path-properties/#aa-circular-cut-out\">circular cut-out</a> for the other images. This time, though, we will rely on a <code>radial-gradient()</code> instead of a <code>conic-gradient()</code> to get that nice rounded look.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery > img {\n  mask: \n    radial-gradient(farthest-side at var(--_a),\n      #0000 calc(50% + var(--g)/2), #000 calc(51% + var(--g)/2));\n}\n.gallery > img:nth-child(1) { --_a: calc(100% + var(--g)/2) calc(100% + var(--g)/2); }\n.gallery > img:nth-child(2) { --_a: calc(0%   - var(--g)/2) calc(100% + var(--g)/2); }\n.gallery > img:nth-child(3) { --_a: calc(100% + var(--g)/2) calc(0%   - var(--g)/2); }\n.gallery > img:nth-child(4) { --_a: calc(0%   - var(--g)/2) calc(0%   - var(--g)/2); }</code></pre>\n\n\n\n<p>All the images use the same configuration as the previous example, but we update the center point each time.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"533\" height=\"538\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659350991210_image.png?resize=533%2C538&#038;ssl=1\" alt=\"Diagram showing the center values for each quadrant of the grid.\" class=\"wp-image-372399\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659350991210_image.png?w=533&amp;ssl=1 533w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659350991210_image.png?resize=297%2C300&amp;ssl=1 297w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659350991210_image.png?resize=150%2C150&amp;ssl=1 150w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>The above figure illustrates the center point for each circle. Still, in the actual code, you will notice that I am also accounting for the gap to ensure all the points are at the same position (the center of the grid) to get a continuous circle if we combine them.</p>\n\n\n\n<p>Now that we have our layout let&#8217;s talk about the hover effect. In case you didn&#8217;t notice, a cool hover effect increases the size of the nested image and adjusts everything else accordingly. Increasing the size is a relatively easy task, but updating the gradient is more complicated since, by default, gradients cannot be animated. To overcome this, I will use a <code>font-size</code> hack to be able to animate the radial gradient.</p>\n\n\n\n<p>If you check the code of the gradient, you can see that I am adding <code>1em</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask: \n    radial-gradient(farthest-side at var(--_a),\n      #0000 calc(50% + var(--g)/2 + 1em), #000 calc(51% + var(--g)/2 + 1em));</code></pre>\n\n\n\n<p>It&#8217;s known that <code>em</code> units are relative to the parent element&#8217;s <code>font-size</code>, so changing the <code>font-size</code> of the <code>.gallery</code> will also change the computed <code>em</code> value — this is the trick we are using. We are animating the <code>font-size</code> from a value of <code>0</code> to a given value and, as a result, the gradient is animated, making the cut-out part larger, following the size of the nested image that is getting bigger.</p>\n\n\n\n<p>Here is the code that highlights the parts involved in the hover effect:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery {\n  --s: 200px; /* controls the image size */\n  --g: 10px; /* controls the gaps between images */\n\n  font-size: 0; /* initially we have 1em = 0 */\n  transition: .5s;\n}\n/* we increase the cut-out by 1em */\n.gallery > img {\n  mask: \n    radial-gradient(farthest-side at var(--_a),\n      #0000 calc(50% + var(--g)/2 + 1em), #000 calc(51% + var(--g)/2 + 1em));\n}\n/* we increase the size by 2em */\n.gallery > img:nth-child(5) {\n  width: calc(var(--s) + 2em);\n}\n/* on hover 1em = S/5 */\n.gallery:hover {\n  font-size: calc(var(--s) / 5);\n}</code></pre>\n\n\n\n<p>The <code>font-size</code> trick is helpful if we want to animate gradients or other properties that cannot be animated. Custom properties defined with @property can solve such a problem, but <a href=\"https://caniuse.com/mdn-css_at-rules_property\" rel=\"noopener\">support for it</a> is still lacking at the time of writing.</p>\n\n\n\n<p class=\"is-style-explanation\">I discovered the <code>font-size</code> trick from <a href=\"https://twitter.com/SelenIT2\" rel=\"noopener\">@SelenIT2</a> while trying to solve <a href=\"https://twitter.com/ChallengesCss/status/1539997366606073856\" rel=\"noopener\">a challenge on Twitter</a>.</p>\n\n\n\n<p>Another shape? Let&#8217;s go!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_OJvpddG\" src=\"//codepen.io/anon/embed/preview/OJvpddG?height=550&amp;theme-id=1&amp;slug-hash=OJvpddG&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed OJvpddG\" title=\"CodePen Embed OJvpddG\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>This time we clipped the nested image into the shape of a rhombus. I&#8217;ll let you dissect the code as an exercise to figure out how we got here. You will notice that the structure is the same as in our examples. The only differences are how we&#8217;re using the gradient to create the shape. Dig in and learn!</p>\n\n\n<h3 id=\"circular-image-grid\">Circular Image Grid</h3>\n\n\n<p>We can combine what we&#8217;ve learned here and in previous articles to make an even more exciting image grid. This time, let&#8217;s make all the images in our grid circular and, on hover, expand an image to reveal the entire thing as it covers the rest of the photos.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_xxWXbXz\" src=\"//codepen.io/anon/embed/preview/xxWXbXz?height=550&amp;theme-id=1&amp;slug-hash=xxWXbXz&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed xxWXbXz\" title=\"CodePen Embed xxWXbXz\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>The HTML and CSS structure of the grid is nothing new from before, so let&#8217;s skip that part and focus instead on the circular shape and hover effect we want.</p>\n\n\n\n<p>We are going to use <code>clip-path</code> and its <code>circle()</code> function to — you guessed it! — cut a circle out of the images.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"687\" height=\"339\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659432990294_image.png?resize=687%2C339&#038;ssl=1\" alt=\"Showing the two states of an image, the natural state on the left, and the hovered state on the right, including the clip-path values to create them.\" class=\"wp-image-372401\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659432990294_image.png?w=687&amp;ssl=1 687w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659432990294_image.png?resize=300%2C148&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>That figure illustrates the <code>clip-path</code> used for the first image. The left side shows the image&#8217;s initial state, while the right shows the hovered state. You can use <a href=\"https://bennettfeely.com/clippy/\" rel=\"noopener\">this online tool</a> to play and visualize the <code>clip-path</code> values.</p>\n\n\n\n<p>For the other images, we can update the center of the circle (<code>70% 70%</code>) to get the following code:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery > img:hover {\n  --_c: 50%; /* same as \"50% at 50% 50%\" */\n}\n.gallery > img:nth-child(1) {\n  clip-path: circle(var(--_c, 55% at 70% 70%));\n}\n.gallery > img:nth-child(2) {\n  clip-path: circle(var(--_c, 55% at 30% 70%));\n}\n.gallery > img:nth-child(3) {\n  clip-path: circle(var(--_c, 55% at 70% 30%));\n}\n.gallery > img:nth-child(4) {\n  clip-path: circle(var(--_c, 55% at 30% 30%));\n}</code></pre>\n\n\n\n<p>Note how we are defining the <code>clip-path</code> values as a fallback inside <code>var()</code>. This way allows us to more easily update the value on hover by setting the value of the <code>--_c</code> variable. When using <code>circle()</code>, the default position of the center point is <code>50% 50%</code>, so we get to omit that for more concise code. That&#8217;s why you see that we are only setting <code>50%</code> instead of <code>50% at 50% 50%</code>.</p>\n\n\n\n<p>Then we increase the size of our image on hover to the overall size of the grid so we can cover the other images. We also ensure the <code>z-index</code> has a higher value on the hovered image, so it is the top one in our <a href=\"https://css-tricks.com/its-always-the-stacking-context/\">stacking context</a>.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery {\n  --s: 200px; /* controls the image size */\n  --g: 8px;   /* controls the gap between images */\n\n  display: grid;\n  grid: auto-flow var(--s) / repeat(2, var(--s));\n  gap: var(--g);\n}\n\n.gallery > img {\n  width: 100%; \n  aspect-ratio: 1;\n  cursor: pointer;\n  z-index: 0;\n  transition: .25s, z-index 0s .25s;\n}\n.gallery > img:hover {\n  --_c: 50%; /* change the center point on hover */\n  width: calc(200% + var(--g));\n  z-index: 1;\n  transition: .4s, z-index 0s;\n}\n\n.gallery > img:nth-child(1){\n  clip-path: circle(var(--_c, 55% at 70% 70%));\n  place-self: start;\n}\n.gallery > img:nth-child(2){\n  clip-path: circle(var(--_c, 55% at 30% 70%));\n  place-self: start end;\n}\n.gallery > img:nth-child(3){\n  clip-path: circle(var(--_c, 55% at 70% 30%));\n  place-self: end start;\n}\n.gallery > img:nth-child(4){\n  clip-path: circle(var(--_c, 55% at 30% 30%));\n  place-self: end;\n}</code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>What’s going on with the <code>place-self</code> property? Why do we need it and why does each image have a specific value?</p></blockquote>\n\n\n\n<p>Do you remember the issue we had in the previous article when <a href=\"https://css-tricks.com/css-grid-and-custom-shapes-part-1#aa-css-grid-of-puzzle-pieces\">creating the grid of puzzle pieces</a>? We increased the size of the images to create an overflow, but the overflow of some images was incorrect. We fixed them using the <a href=\"https://css-tricks.com/almanac/properties/p/place-self/\"><code>place-self</code></a> property.</p>\n\n\n\n<p>Same issue here. We are increasing the size of the images so each one overflows its grid cells. But if we do nothing, all of them will overflow on the right and bottom sides of the grid. What we need is:</p>\n\n\n\n<ol><li>the first image to overflow the bottom-right edge (the default behavior),</li><li>the second image to overflow the bottom-left edge,</li><li>the third image to overflow the top-right edge, and</li><li>the fourth image to overflow the top-left edge.</li></ol>\n\n\n\n<p>To get that, we need to place each image correctly using the <code>place-self</code> property.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"420\" height=\"418\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659434107931_image.png?resize=420%2C418&#038;ssl=1\" alt=\"Diagram showing the place-self property values for each quadrant of the grid.\" class=\"wp-image-372403\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659434107931_image.png?w=420&amp;ssl=1 420w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659434107931_image.png?resize=300%2C300&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659434107931_image.png?resize=150%2C150&amp;ssl=1 150w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>In case you are not familiar with <code>place-self</code>, it&#8217;s the shorthand for <code>justify-self</code> and <code>align-self</code> to place the element horizontally and vertically. When it takes one value, both alignments use that same value.</p>\n\n\n<h3 id=\"expanding-image-panels\">Expanding Image Panels</h3>\n\n\n<p><a href=\"https://css-tricks.com/zooming-images-in-a-grid-layout/\">In a previous article</a>, I created a cool zoom effect that applies to a grid of images where we can control everything: number of rows, number of columns, sizes, scale factor, etc.</p>\n\n\n\n<p>A particular case was the classic expanding panels, where we only have one row and a full-width container.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_WNzxeOO\" src=\"//codepen.io/anon/embed/preview/WNzxeOO?height=550&amp;theme-id=1&amp;slug-hash=WNzxeOO&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed WNzxeOO\" title=\"CodePen Embed WNzxeOO\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We will take this example and combine it with shapes!</p>\n\n\n\n<p class=\"is-style-explanation\">Before we continue, I highly recommend reading my <a href=\"https://css-tricks.com/zooming-images-in-a-grid-layout/\">other article</a> to understand how the tricks we&#8217;re about to cover work. Check that out, and we&#8217;ll continue here to focus on creating the panel shapes.</p>\n\n\n\n<p>First, let&#8217;s start by simplifying the code and removing some variables</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_MWVQOoB/53d2002802315ef9ee82a57696baef7e\" src=\"//codepen.io/anon/embed/preview/MWVQOoB/53d2002802315ef9ee82a57696baef7e?height=550&amp;theme-id=1&amp;slug-hash=MWVQOoB/53d2002802315ef9ee82a57696baef7e&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed MWVQOoB/53d2002802315ef9ee82a57696baef7e\" title=\"CodePen Embed MWVQOoB/53d2002802315ef9ee82a57696baef7e\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We only need one row and the number of columns should adjust based on the number of images. That means we no longer need variables for the number of rows (<code>--n</code>) and columns (<code>--m</code> ) but we need to use <code>grid-auto-flow: column</code>, allowing the grid to auto-generate columns as we add new images. We will consider a fixed height for our container; by default, it will be full-width.</p>\n\n\n\n<p>Let&#8217;s clip the images into a slanted shape:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"310\" height=\"313\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659449689269_image.png?resize=310%2C313&#038;ssl=1\" alt=\"A headshot of a calm red wolf looking downward with vertices overlayed showing the clip-path property points.\" class=\"wp-image-372405\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659449689269_image.png?w=310&amp;ssl=1 310w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659449689269_image.png?resize=297%2C300&amp;ssl=1 297w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659449689269_image.png?resize=150%2C150&amp;ssl=1 150w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption><code>clip-path: polygon(S 0%, 100% 0%, (100% - S) 100%, 0% 100%);</code></figcaption></figure>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_XWEZzEG/4bd3d50c3d057ba4162bd4480eca83de\" src=\"//codepen.io/anon/embed/preview/XWEZzEG/4bd3d50c3d057ba4162bd4480eca83de?height=550&amp;theme-id=1&amp;slug-hash=XWEZzEG/4bd3d50c3d057ba4162bd4480eca83de&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed XWEZzEG/4bd3d50c3d057ba4162bd4480eca83de\" title=\"CodePen Embed XWEZzEG/4bd3d50c3d057ba4162bd4480eca83de\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Once again, each image is contained in its grid cell, so there&#8217;s more space between the images than we&#8217;d like:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1177\" height=\"410\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659449937689_image.png?resize=1177%2C410&#038;ssl=1\" alt=\"A six-panel grid of slanted images of various wild animals showing the grid lines and gaps.\" class=\"wp-image-372407\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659449937689_image.png?w=1177&amp;ssl=1 1177w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659449937689_image.png?resize=300%2C105&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659449937689_image.png?resize=1024%2C357&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659449937689_image.png?resize=768%2C268&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We need to increase the width of the images to create an overlap. We replace <code>min-width:</code> <code>100%</code> with <code>min-width: calc(100% + var(--s))</code>, where <code>--s</code> is a new variable that controls the shape.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_vYRdWaX/99f51abe7cfda123b05b8af08d4d9b30\" src=\"//codepen.io/anon/embed/preview/vYRdWaX/99f51abe7cfda123b05b8af08d4d9b30?height=550&amp;theme-id=1&amp;slug-hash=vYRdWaX/99f51abe7cfda123b05b8af08d4d9b30&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed vYRdWaX/99f51abe7cfda123b05b8af08d4d9b30\" title=\"CodePen Embed vYRdWaX/99f51abe7cfda123b05b8af08d4d9b30\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Now we need to fix the first and last images, so they sort of bleed off the page without gaps. In other words, we can remove the slant from the left side of the first image and the slant from the right side of the last image. We need a new <code>clip-path</code> specifically for those two images.</p>\n\n\n\n<p>We also need to rectify the overflow. By default, all the images will overflow on both sides, but for the first one, we need an overflow on the right side while we need a left overflow for the last image.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery > img:first-child {\n  min-width: calc(100% + var(--s)/2);\n  place-self: start;\n  clip-path: polygon(0 0,100% 0,calc(100% - var(--s)) 100%,0 100%);\n}\n.gallery > img:last-child {\n  min-width: calc(100% + var(--s)/2);\n  place-self: end;\n  clip-path: polygon(var(--s) 0,100% 0,100% 100%,0 100%);\n}</code></pre>\n\n\n\n<p>The final result is a nice expanding panel of slanted images!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_mdxMmVr\" src=\"//codepen.io/anon/embed/preview/mdxMmVr?height=550&amp;theme-id=1&amp;slug-hash=mdxMmVr&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed mdxMmVr\" title=\"CodePen Embed mdxMmVr\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We can add as many images as you want, and the grid will adjust automatically. Plus, we only need to control one value to control the shape!</p>\n\n\n\n<p>We could have made this same layout with flexbox since we are dealing with a single row of elements. Here is <a href=\"https://codepen.io/t_afif/pen/WNzEjjz\" rel=\"noopener\">my implementation</a>.</p>\n\n\n\n<p>Sure, slanted images are cool, but what about a zig-zag pattern? I already teased this one at <a href=\"https://css-tricks.com/css-grid-and-custom-shapes-part-1#aa-wrapping-up\">the end of the last article</a>.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_wvmrbje/4c5661d94923554d54b49cbe96a13545\" src=\"//codepen.io/anon/embed/preview/wvmrbje/4c5661d94923554d54b49cbe96a13545?height=550&amp;theme-id=1&amp;slug-hash=wvmrbje/4c5661d94923554d54b49cbe96a13545&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed wvmrbje/4c5661d94923554d54b49cbe96a13545\" title=\"CodePen Embed wvmrbje/4c5661d94923554d54b49cbe96a13545\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>All I&#8217;m doing here is replacing <code>clip-path</code> with <code>mask</code>… and guess what? I already have a detailed article on <a href=\"https://css-tricks.com/css-borders-using-masks/\">creating that zig-zag shape</a> — not to mention <a href=\"https://css-tricks.com/css-borders-using-masks/\"></a>an online <a href=\"https://css-generators.com/custom-borders/\" rel=\"noopener\">generator to get the code</a>. See how all everything comes together?</p>\n\n\n\n<p>The trickiest part here is to make sure the zig-zags are perfectly aligned, and for this, we need to add an offset for every <code>:nth-child(odd)</code> image element.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery > img {\n  mask: \n    conic-gradient(from -135deg at right, #0000, #000 1deg 89deg, #0000 90deg) \n      100% calc(50% + var(--_p, 0%))/51% calc(2*var(--s)) repeat-y,\n    conic-gradient(from   45deg at left,  #0000, #000 1deg 89deg, #0000 90deg) \n      0%   calc(50% + var(--_p, 0%))/51% calc(2*var(--s)) repeat-y;\n}\n/* we add an offset to the odd elements */\n.gallery > img:nth-child(odd) {\n  --_p: var(--s);\n}\n.gallery > img:first-child {\n  mask: \n    conic-gradient(from -135deg at right, #0000, #000 1deg 89deg, #0000 90deg) \n      0 calc(50% + var(--_p, 0%))/100% calc(2*var(--s));\n}\n.gallery > img:last-child {\n  mask: \n    conic-gradient(from 45deg at left, #0000, #000 1deg 89deg, #0000 90deg) \n      0 calc(50% + var(--_p, 0%)) /100% calc(2*var(--s));\n}</code></pre>\n\n\n\n<p>Note the use of the <code>--_p</code> variable, which will fall back to <code>0%</code> but will be equal to <code>--_s</code> for the odd images.</p>\n\n\n\n<p>Here is a demo that illustrates the issue. Hover to see how the offset — defined by <code>--_p</code> — is fixing the alignment.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_YzaeOzN/b80ffd7a5f0e11cecffb564cd9d3823d\" src=\"//codepen.io/anon/embed/preview/YzaeOzN/b80ffd7a5f0e11cecffb564cd9d3823d?height=550&amp;theme-id=1&amp;slug-hash=YzaeOzN/b80ffd7a5f0e11cecffb564cd9d3823d&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed YzaeOzN/b80ffd7a5f0e11cecffb564cd9d3823d\" title=\"CodePen Embed YzaeOzN/b80ffd7a5f0e11cecffb564cd9d3823d\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Also, notice how we use a different mask for the first and last image as we did in the previous example. We only need a zig-zag on the right side of the first image and the left side of the last image.</p>\n\n\n\n<p>And why not rounded sides? Let&#8217;s do it!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_PoRQdJa/ce036f4355ca80c601aa0f5db0e6c5ac\" src=\"//codepen.io/anon/embed/preview/PoRQdJa/ce036f4355ca80c601aa0f5db0e6c5ac?height=550&amp;theme-id=1&amp;slug-hash=PoRQdJa/ce036f4355ca80c601aa0f5db0e6c5ac&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed PoRQdJa/ce036f4355ca80c601aa0f5db0e6c5ac\" title=\"CodePen Embed PoRQdJa/ce036f4355ca80c601aa0f5db0e6c5ac\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>I know that the code may look scary and tough to understand, but all that&#8217;s going on is a combination of different tricks we&#8217;ve covered in this and other articles I&#8217;ve already shared. In this case, I use the same code structure as the zig-zag and the slanted shapes. Compare it with those examples, and you will find no difference! Those are the same tricks in <a href=\"https://css-tricks.com/zooming-images-in-a-grid-layout/\">my previous article about the zoom effect</a>. Then, I am using my <a href=\"https://css-tricks.com/css-borders-using-masks/\">other writing</a> and <a href=\"https://css-generators.com/custom-borders/\" rel=\"noopener\">my online generator</a> to get the code for the mask that creates those rounded shapes.</p>\n\n\n\n<p>If you recall what we did for the zig-zag, we had used the same mask for all the images but then had to add an offset to the odd images to create a perfect overlap. In this case, we need a different mask for the odd-numbered images.</p>\n\n\n\n<p>The first mask:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask: \n  linear-gradient(-90deg,#0000 calc(2*var(--s)),#000 0) var(--s),\n  radial-gradient(var(--s),#000 98%,#0000) 50% / calc(2*var(--s)) calc(1.8*var(--s)) space repeat;</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659477832525_image.png\" alt=\"\"/></figure>\n\n\n\n<p>The second one:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">mask:\n  radial-gradient(calc(var(--s) + var(--g)) at calc(var(--s) + var(--g)) 50%,#0000 98% ,#000) \n  calc(50% - var(--s) - var(--g)) / 100% calc(1.8*var(--s))</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1659477972929_image.png\" alt=\"\"/></figure>\n\n\n\n<p>The only effort I did here is update the second mask to include the gap variable (<code>--g</code>) to create that space between the images.</p>\n\n\n\n<p>The final touch is to fix the first and last image. Like all the previous examples, the first image needs a straight left edge while the last one needs a straight right edge.</p>\n\n\n\n<p>For the first image, we always know the mask it needs to have, which is the following:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery > img:first-child {\n  mask: \n    radial-gradient(calc(var(--s) + var(--g)) at right, #0000 98%, #000) 50% / 100% calc(1.8 * var(--s));\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"225\" height=\"364\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1660041272028_image.png?resize=225%2C364&#038;ssl=1\" alt=\"A brown bear headshot with a wavy pattern for the right border.\" class=\"wp-image-372410\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1660041272028_image.png?w=225&amp;ssl=1 225w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1660041272028_image.png?resize=185%2C300&amp;ssl=1 185w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>For the last image, it depends on the number of elements, so it matters if that element is <code>:nth-child(odd)</code> or <code>:nth-child(even)</code>.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"887\" height=\"368\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1660041502555_image.png?resize=887%2C368&#038;ssl=1\" alt=\"The complete grid of wild animal photos with all of the correct borders and gaps between images.\" class=\"wp-image-372411\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1660041502555_image.png?w=887&amp;ssl=1 887w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1660041502555_image.png?resize=300%2C124&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1660041502555_image.png?resize=768%2C319&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery > img:last-child:nth-child(even) {\n  mask: \n    linear-gradient(to right,#0000 var(--s),#000 0),\n    radial-gradient(var(--s),#000 98%,#0000) left / calc(2*var(--s)) calc(1.8*var(--s)) repeat-y\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"782\" height=\"366\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1660041680278_image.png?resize=782%2C366&#038;ssl=1\" alt=\"A single-row grid of three wild animal photos with wavy borders where the last image is an odd-numbered element.\" class=\"wp-image-372412\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1660041680278_image.png?w=782&amp;ssl=1 782w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1660041680278_image.png?resize=300%2C140&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_FAB34E73C762388DCCA56C848404D3DB6086BACB8979A53257F8F23B4F6FCB93_1660041680278_image.png?resize=768%2C359&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery > img:last-child:nth-child(odd) {\n  mask: \n    radial-gradient(calc(var(--s) + var(--g)) at left,#0000 98%,#000) 50% / 100% calc(1.8*var(--s))\n}</code></pre>\n\n\n\n<p>That&#8217;s all! Three different layouts but the same CSS tricks each time:</p>\n\n\n\n<ul><li>the code structure to create the zoom effect</li><li>a mask or clip-path to create the shapes</li><li>a separate configuration for the odd elements in some cases to make sure we have a perfect overlap</li><li>a specific configuration for the first and last image to keep the shape on only one side.</li></ul>\n\n\n\n<p>And here is a big demo with all of them together. All you need is to add a class to activate the layout you want to see.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_oNqPjPd/280daf53dab4b57b4fdc92aeae60d1ed\" src=\"//codepen.io/anon/embed/preview/oNqPjPd/280daf53dab4b57b4fdc92aeae60d1ed?height=700&amp;theme-id=1&amp;slug-hash=oNqPjPd/280daf53dab4b57b4fdc92aeae60d1ed&amp;default-tab=result\" height=\"700\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed oNqPjPd/280daf53dab4b57b4fdc92aeae60d1ed\" title=\"CodePen Embed oNqPjPd/280daf53dab4b57b4fdc92aeae60d1ed\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>And here is the one with the Flexbox implementation</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_QWmVjoy/0eb497048c318128429327316dbf0687\" src=\"//codepen.io/anon/embed/preview/QWmVjoy/0eb497048c318128429327316dbf0687?height=700&amp;theme-id=1&amp;slug-hash=QWmVjoy/0eb497048c318128429327316dbf0687&amp;default-tab=result\" height=\"700\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed QWmVjoy/0eb497048c318128429327316dbf0687\" title=\"CodePen Embed QWmVjoy/0eb497048c318128429327316dbf0687\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"wrapping-up\">Wrapping up</h3>\n\n\n<p>Oof, we are done! I know there are many CSS tricks and examples between this article and the last one, not to mention all of the other tricks I&#8217;ve referenced here from other articles I&#8217;ve written. It took me time to put everything together, and you don&#8217;t have to understand everything at once. One reading will give you a good overview of all the layouts, but you may need to read the article more than once and focus on each example to grasp all the tricks.</p>\n\n\n\n<p>Did you notice that we didn&#8217;t touch the HTML at all other than perhaps the number of images in the markup? All the layouts we made share the same HTML code, which is nothing but a list of images.</p>\n\n\n\n<p>Before I end, I will leave you with one last example. It&#8217;s a &#8220;versus&#8221; between two anime characters with a cool hover effect.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_BarmdPB\" src=\"//codepen.io/anon/embed/preview/BarmdPB?height=600&amp;theme-id=1&amp;slug-hash=BarmdPB&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed BarmdPB\" title=\"CodePen Embed BarmdPB\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>What about you? Can you create something based on what you have learned? It doesn&#8217;t need to be complex — imagine something cool or funny like I did with that anime matchup. It can be a good exercise for you, and we may end with an excellent collection in the comment section.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-grid-and-custom-shapes-part-2/\">CSS Grid and Custom Shapes, Part 2</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "category": "Article",
          "link": "https://css-tricks.com/css-grid-and-custom-shapes-part-2/",
          "creator": "Temani Afif",
          "pubDate": "Mon, 22 Aug 2022 14:08:39 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "css-tricks",
          "feed": "css tricks",
          "read": true,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "0323263024cb206e1209b89a0e67b9f4",
          "highlights": []
        },
        {
          "title": "When Do You Use CSS Columns?",
          "description": "<p>That ain&#8217;t rhetorical: I&#8217;m really interested in finding great use cases for CSS multi-column layouts.</p>\n<p>The answer seems straightforward. Use columns when you want to split any content into columns, right? Here is generally the sort of example you&#8217;ll find &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/when-do-you-use-css-columns/\">When Do You Use CSS Columns?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "content": "\n<p>That ain&#8217;t rhetorical: I&#8217;m really interested in finding great use cases for CSS multi-column layouts.</p>\n\n\n\n<p>The answer seems straightforward. Use columns when you want to split any content into columns, right? Here is generally the sort of example you&#8217;ll find in articles that show how CSS mutli-column layouts work, including our very own <a href=\"https://css-tricks.com/almanac/properties/c/columns/\">Almanac</a>:</p>\n\n\n\n<span id=\"more-372539\"></span>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yLKQNYP\" src=\"//codepen.io/anon/embed/yLKQNYP?height=450&amp;theme-id=1&amp;slug-hash=yLKQNYP&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yLKQNYP\" title=\"CodePen Embed yLKQNYP\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Right on. But is this an actual use case? <em>Mmmmmaybe.</em> If the text is relatively brief, then perhaps it&#8217;s a nice touch. That&#8217;s how I sold it to myself when redesigning my website a <a href=\"https://geoffgraham.me/website-redesign-the-homepage/\" rel=\"noopener\">few years ago</a>. It&#8217;s not that way today, but this is what it looked like then:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1440\" height=\"1662\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/mockup-03.jpg?resize=1440%2C1662&#038;ssl=1\" alt=\"\" class=\"wp-image-372542\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/mockup-03.jpg?w=1440&amp;ssl=1 1440w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/mockup-03.jpg?resize=260%2C300&amp;ssl=1 260w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/mockup-03.jpg?resize=887%2C1024&amp;ssl=1 887w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/mockup-03.jpg?resize=768%2C886&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/mockup-03.jpg?resize=1331%2C1536&amp;ssl=1 1331w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>But an entire long-form article split into columns? I love it in newspapers but am hesitant to scroll down a webpage to read one column, only to scroll back up to do it again.</p>\n\n\n\n<p>I suppose we can use it to place two elements side-by-side, but flexbox is way more suited for that. Plus, a limitation prevents us from selecting the columns to size them individually. The columns have to be the same width.</p>\n\n\n\n<p>One thing columns have going for them is that they are the only CSS layout method that <em>fragments</em> content. (That is, unless we&#8217;re counting <a href=\"https://drafts.csswg.org/css-regions/\" rel=\"noopener\">CSS Regions</a>&#8230; what happened to those, anyway?!) So, if you wanna split a paragraph up into columns, it&#8217;s already possible without additional wrappers.</p>\n\n\n\n<p>When else might you need to split a continuous block of content into columns? I remember needing to do that when I had a big ol&#8217; unordered list of items. I like the way lists can make content easy to scan, but long lists can make one side of the page look super heavy. Let&#8217;s say, for example, that we were listing out all the post tags for CSS-Tricks in alphabetical groups. A multi-column layout works beautifully for that:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_eYMQNKQ\" src=\"//codepen.io/anon/embed/eYMQNKQ?height=450&amp;theme-id=1&amp;slug-hash=eYMQNKQ&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed eYMQNKQ\" title=\"CodePen Embed eYMQNKQ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Go ahead and try resizing the viewport width. Three columns are defined but the number will change based on the amount of available space. Gotta love all that responsive goodness without the media query work!</p>\n\n\n\n<p>I was working on a demo for the <code>:left</code> pseudo-class and reached for <code>columns</code> because it’s a great way to fragment things for printing demos. So, I guess there’s another use case. And while making a demo, I realized that a multi-column layout could be used to create a masonry grid of items, like an image gallery:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_qBoQOWd\" src=\"//codepen.io/anon/embed/qBoQOWd?height=450&amp;theme-id=1&amp;slug-hash=qBoQOWd&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed qBoQOWd\" title=\"CodePen Embed qBoQOWd\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>But what else? Are we limited to short paragraphs, long lists, and free-flowing grids?</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/when-do-you-use-css-columns/\">When Do You Use CSS Columns?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "category": "Article",
          "link": "https://css-tricks.com/when-do-you-use-css-columns/",
          "creator": "Geoff Graham",
          "pubDate": "Thu, 18 Aug 2022 13:24:48 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "css-tricks",
          "feed": "css tricks",
          "read": true,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "61013535cc55645788d76aa12aac6d13",
          "highlights": []
        },
        {
          "title": "Why (and How) I Write Code With Pencil and Paper",
          "description": "<p>If the thought of handwriting code seems silly, it might surprise you to know that it&#8217;s inevitable. If you&#8217;re unsure, think about the last job interview you did, and remember how there was no computer around in the interview room &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/why-and-how-i-write-code-with-pencil-and-paper/\">Why (and How) I Write Code With Pencil and Paper</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "content": "\n<p>If the thought of handwriting code seems silly, it might surprise you to know that it&#8217;s inevitable. If you&#8217;re unsure, think about the last job interview you did, and remember how there was no computer around in the interview room — just your interviewers, a blank sheet of paper, and a blue ball-point pen.</p>\n\n\n\n<p>For the students among you, it&#8217;s even a bigger deal as your grades hang in by the lines of code you had strategically squeezed into the available space in your answer sheet.</p>\n\n\n\n<p>And not just that, experienced programmers can point you to the bundle of A4 sheets they had removed from the office copy machine to scribble down a particularly complex algorithm they had been working on.</p>\n\n\n\n<p>So whether you&#8217;re an exam student, potential job interviewee, or someone wanting to resolve their programming dead ends, I hope this article helps you out when you put your pen to the paper to code.</p>\n\n\n\n<span id=\"more-367045\"></span>\n\n\n\n<p>Although I will focus on the analog aspect of writing code, you can apply these steps to coding in any form or language. So consider this to be also like a generic coding guideline that works specifically for me but can also be very useful to you in your work.</p>\n\n\n<h3 id=\"why-write-it-down\">Why write it down?</h3>\n\n\n<p>Before we start, it&#8217;s essential to understand that no one expects you to jot down production-ready code in a notebook. It&#8217;s not like you can drop that into a code editor and compile it without an error. If producing perfect code was the goal, you would be seated in front of a computer in the interview rooms and exam halls.</p>\n\n\n\n<p>The purpose of handwriting code is to work through logic in advance. There&#8217;s s desire to &#8220;get in the browser&#8221; as soon as possible in design, but there is conventional wisdom in sketching designs by hand. A low-fidelity medium encourages quick experimentation and inexpensive mistakes.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2560\" height=\"2560\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-2-scaled.jpg?resize=2560%2C2560&#038;ssl=1\" alt=\"White lined paper with cursive handwritten notes on using :nth-child.\" class=\"wp-image-372422\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-2-scaled.jpg?w=2560&amp;ssl=1 2560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-2-scaled.jpg?resize=300%2C300&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-2-scaled.jpg?resize=1024%2C1024&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-2-scaled.jpg?resize=150%2C150&amp;ssl=1 150w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-2-scaled.jpg?resize=768%2C768&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-2-scaled.jpg?resize=1536%2C1536&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-2-scaled.jpg?resize=2048%2C2048&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The toil of trying to figure out how to affect surrounding items with one click (from my <a href=\"https://css-tricks.com/conditionally-styling-selected-elements-in-a-grid-container/\">last article</a>)</figcaption></figure>\n\n\n\n<p>The same can be true of code, mainly when working out syntax and semantics. That said, getting the correct syntax and semantics is <em>always</em> a plus point, though not the sole focus of the whole handwriting exercise.</p>\n\n\n\n<p>Let&#8217;s see where we can start when it comes to handwriting code.</p>\n\n\n<h3 id=\"know-your-question\">Know your question</h3>\n\n\n<p>During my final year in college, I couldn&#8217;t do an internship or even attend campus interviews because of health reasons. As a result, my very first job interview was quite literal with high stakes.</p>\n\n\n\n<p>When I look back now, the interview was pretty easy. But having never attended one before, I was anxious beyond reason. The first thing the interviewers asked about programming was if I could output an inverted triangle made of asterisks. As I said, it was easy — nothing a <code>for</code> loop can&#8217;t handle, right? But like I said, my anxiety was through the roof as well.</p>\n\n\n\n<p>I took a deep breath, pressed my palm against the blank sheet of paper they had laid out for me, slid it as slow as possible towards me on the table (buying time, of course), clicked the pen, and then I did something right.</p>\n\n\n\n<p>I first drew an inverted triangle made of asterisks. That&#8217;s how I found my feet on the ground to start answering their question.</p>\n\n\n\n<p>I&#8217;ve seen otherwise brilliant developers get something wrong simply because they never fully grasp what it is they are solving.</p>\n\n\n\n<p>The questions we work with are not like the questions physicists or mathematicians solve. They get a set of parameters and find the missing ones; our questions are also our results. We are already told what our results are —  we have to figure out how to reach them. That&#8217;s why it&#8217;s imperative to know the question well because you&#8217;ll see the result.</p>\n\n\n\n<p>Writing down or drawing out what you want to output is one of the best ways to start your coding. I understand that in our fast-paced industry, the expectation is that we have to jump right into the programming by running a &#8220;hello world&#8221; demo. And that&#8217;s great to familiarize yourself with an unfamiliar syntax and shake off your anxiousness about trying something new.</p>\n\n\n\n<p>But when someone asks you a question and gives you a result to work up to, wouldn&#8217;t it just be better to put that down first? That question/result is not only your starting point but also your point of reference. At any step in your coding, you can look at it to ensure you&#8217;re working towards it and that you&#8217;re on the right track.</p>\n\n\n\n<p>So whether in your answer sheets or in that blank A4 paper you&#8217;re about to write in, start by taking a second and writing down what it is you&#8217;re trying to output. You can put it in the margins or a corner if you don&#8217;t want it to be a part of your answer. Just make sure it&#8217;s somewhere where you can keep referencing it.</p>\n\n\n<h3 id=\"outline-your-code\">Outline your code</h3>\n\n\n<p>This step is like a double-edged sword. It can get you a roadmap to your program or waste your time. My job is to make sure it&#8217;s the former.</p>\n\n\n\n<p>So, first and foremost, I like to say: <strong>outlining code is unnecessary if the scope of your problem or question is small.</strong> Again, this practice is neither prescriptive nor universal to all projects or situations. Imagine I&#8217;m your interviewer, and I ask you to write how to center an element in a web page using CSS in as many ways as possible. You won&#8217;t exactly be needing an outline for this. The code snippets are relatively small for each method.</p>\n\n\n\n<p>But now, let&#8217;s say I assign you to write a web application that captures user signatures via a touchscreen interface and then saves the signature on the server. Not so straightforward, right? You&#8217;ve more than one thing to figure out. Perhaps, a little outline can help.</p>\n\n\n\n<ol><li>UI for capturing signature — HTML Canvas? WebGL?</li><li>Disable pointer events on the rest of the web page when the user is signing</li><li>Convert and save the captured image to a PNG file — JS</li><li>Then convert it to blob (maybe) and save it to the visitor&#8217;s log data table.</li></ol>\n\n\n\n<p>I&#8217;ve written a rough sequence of actions I think I might have to code. It could&#8217;ve been shorter or longer, depending on what I wanted from it.</p>\n\n\n\n<p>I highly recommend outlining code for client projects. Write the outline along with your user requirements or on the back of wireframes you&#8217;ve printed out.</p>\n\n\n\n<p>Your quick snapshot of bullet points gives you a map, a to-do list, and a checklist to verify against when you reach the end of the project — pretty much your whole project&#8217;s summary in a low-fidelity list. It can also become a template to start your next similar project.</p>\n\n\n\n<p>But like I said before, this step is like a double-edged sword. You&#8217;ll have to keep this short for examinees and interviewees when there are time constraints.</p>\n\n\n\n<p>If you don&#8217;t know where to start, write down just three essential functions you&#8217;ll have to code in your application, and if you have got the time, make it five.</p>\n\n\n\n<p>But that&#8217;s about it. Spend as little time as possible on this, and don&#8217;t sweat over the details. The outline is not going to score you extra points. It&#8217;s there only to help you make sure you have everything covered. It captures your initial gut reaction and keeps you honest throughout the project&#8217;s life.</p>\n\n\n<h3 id=\"longhand-vs-shorthand\">Longhand vs. shorthand</h3>\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2560\" height=\"2560\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-1-scaled.jpg?resize=2560%2C2560&#038;ssl=1\" alt=\"White lined paper with cursive handwritten notes in black ink.\" class=\"wp-image-372425\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-1-scaled.jpg?w=2560&amp;ssl=1 2560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-1-scaled.jpg?resize=300%2C300&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-1-scaled.jpg?resize=1024%2C1024&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-1-scaled.jpg?resize=150%2C150&amp;ssl=1 150w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-1-scaled.jpg?resize=768%2C768&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-1-scaled.jpg?resize=1536%2C1536&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-1-scaled.jpg?resize=2048%2C2048&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>A quick reference to disable text selection</figcaption></figure>\n\n\n\n<p>Time to start coding. So, what do you write? &#8220;Bdrs&#8221; or &#8220;<code>border-radius</code>&#8220;; &#8220;<code>div -&gt; p</code>&#8221; or &#8220;<code>&lt;div&gt;&lt;p&gt;&lt;/div&gt;&lt;/p&gt;</code>&#8220;; &#8220;<code>pl()</code>&#8221; or &#8220;<code>println()</code>&#8220;; &#8220;<code>q()</code>&#8221; or &#8220;<code>querySelector()</code>&#8220;?</p>\n\n\n\n<p>If someone else is grading your code, then there&#8217;s no choice. Leave out abbreviations, pseudo-codes, Emmet shortcuts, and any other form of shorthand writing. Otherwise, there&#8217;s no reason to assume that anyone reading this knows what your abbreviations mean.</p>\n\n\n\n<p>It&#8217;s really up to you.</p>\n\n\n\n<p>If you&#8217;ve gotten out of touch with writing by hand — and many of us have — it&#8217;s better not to go overboard with the longhand notations, as they get tedious. At the same time, there&#8217;s no such thing as being too frugal with your writing. Not if you want to be able to look back on it one day and understand what you&#8217;d written down.</p>\n\n\n\n<p>I have an open file in my note-taking app and a lined notepad on my desk where I write down code snippets I want to save for later reference. They are unorganized, just a long stream of snippets. That&#8217;s why when I browse through older notes, I wouldn&#8217;t know what I meant to write if I had not written them down clearly.</p>\n\n\n\n<p>I forget syntaxes all the time. For instance, I&#8217;ve been using the arrow notation for JavaScript functions since it was introduced (because it&#8217;s shorter), and I&#8217;m pretty sure if someone suddenly asks me to define a function using the <code>function</code> keyword, I might even misplace the parentheses or the function name, inciting a syntax error.</p>\n\n\n\n<p>It&#8217;s not unusual for us to forget syntaxes we haven&#8217;t used in a while. That&#8217;s why it&#8217;s better to write your notes clearly when you know you need them for future reference.</p>\n\n\n<h3 id=\"the-nonsequential-flow-of-code\">The non-sequential flow of code</h3>\n\n\n<p>Unlike the last step, which doesn&#8217;t apply to those of you interviewees and test-takers, this one is catered especially to you.</p>\n\n\n\n<p>Most programming languages are interpreted, compiled, and executed so that sometimes pre-written code in the source is executed later when called. We do it in JavaScript, for example, with function calling — functions can be defined initially, then executed later. Examinees and interviewees can use this to start working on the critical point of your answer first.</p>\n\n\n\n<p>As I&#8217;ve said from the very beginning, the purpose of handwriting code is to work through or test the logic of whatever it is you program. It&#8217;s best when you focus on resolving that first.</p>\n\n\n\n<p>Let&#8217;s take a classic textbook example — a program to find the nth <a href=\"https://en.wikipedia.org/wiki/Fibonacci_number\" rel=\"noopener\">Fibonacci number</a>. If I were to write a simple outline for it, it would be something like this:</p>\n\n\n\n<ol><li>Get the input.</li><li>Calculate the Fibonacci number.</li><li>Summarise the output.</li><li>Print the output.</li></ol>\n\n\n\n<p>All the steps in that outline are essential; however, 1, 3, and 4 are more obligatory. They are necessary but not important enough to focus on right away.</p>\n\n\n\n<p>It&#8217;s better to start writing down the code to calculate the Fibonacci number rather than to fetch the input. Wrap it in a function, then go ahead and write the code sequentially and write down a line to call that function where appropriate.</p>\n\n\n\n<p>Spend your time writing code that focuses on the heart of the problem.</p>\n\n\n\n<p>Real professionals can skip ahead. Let&#8217;s say I have a client project, and I have to work with some triangle geometry — got two sides, opposite angle, and gotta find the third side&#8217;s length. And I&#8217;ve decided to scribble on paper to get started rather than opening my <abbr title=\"integrated development environment\">IDE</abbr>.</p>\n\n\n\n<p>First, I would draw the triangle, of course (that&#8217;s something I&#8217;m very experienced with, as you can tell). I would write down some sample lengths and angles. Then I&#8217;d write the formula (compliments of online searching, for sure), and then I&#8217;d jump right to the code for the function.</p>\n\n\n\n<p>There&#8217;s no point in me writing down the obligatory steps even though I&#8217;ll need them in production-ready code. But it would be different if I had to write that on an answer sheet in an exam. I can&#8217;t skip the other steps; however, I can still start with the code for the formula.</p>\n\n\n<h3 id=\"pseudocode\">Pseudo-code</h3>\n\n\n<p>Chris has already written a <a href=\"https://css-tricks.com/pseudo-code/\">handy article on pseudo-code</a> that I highly recommend you give a solid read.</p>\n\n\n\n<p>For all those professionals who feel like the whole handwriting code thing doesn&#8217;t seem like your cup of tea but still might be curious if it can help you, then <strong>pseudo-code</strong> might be the balance you&#8217;re looking for.</p>\n\n\n\n<p>It&#8217;s similar to outlining the code, as I mentioned in one of the previous steps. However, it&#8217;s briefer and feels more like shorthand coding. It&#8217;s sometimes also referred to as &#8220;skeleton code.&#8221;</p>\n\n\n\n<p>Here&#8217;s some quick pseudo-code for a CSS grid layout:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">Grid\n5 60px rows\n6 100px columns</code></pre>\n\n\n\n<p>There isn&#8217;t much to write! So, even though putting a pencil to paper is excellent for this sort of thing, it&#8217;s just as effective, fast, and inexpensive to jot some pseudo code into whatever program you&#8217;re using.</p>\n\n\n<h3 id=\"space-and-comments\">Space and comments</h3>\n\n\n<p>I believe code is 90% keywords and 10% tabs. Withoutspacesthereadabilityofwordsdecreases. Indentations are necessary for handwritten code as well. However, please don&#8217;t use it for every level because the width of the paper will limit you. Use spaces judiciously, but use them.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2560\" height=\"2560\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-3-scaled.jpg?resize=2560%2C2560&#038;ssl=1\" alt=\"Yellow unlined paper with code handwritten in cursive in black ink.\" class=\"wp-image-372426\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-3-scaled.jpg?w=2560&amp;ssl=1 2560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-3-scaled.jpg?resize=300%2C300&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-3-scaled.jpg?resize=1024%2C1024&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-3-scaled.jpg?resize=150%2C150&amp;ssl=1 150w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-3-scaled.jpg?resize=768%2C768&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-3-scaled.jpg?resize=1536%2C1536&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/preethi-notes-3-scaled.jpg?resize=2048%2C2048&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Prized OG snippet, written with extra TLC</figcaption></figure>\n\n\n\n<p>If you&#8217;re writing code for your use, I also believe that if you&#8217;ve followed everything I&#8217;ve mentioned so far and have already written down your output and an outline on the page, you may not even need to include comments. Comments tell you quickly what its following set of code does. If you have already written and read an outline for the code, then comments are redundant notes.</p>\n\n\n\n<p>However, if your judgment says to put down one, then do it. Add it to the right side of the code (since you won&#8217;t be able to insert it between already written lines the way you could in, say, VS Code). Use forward slashes, brackets, or arrows to denote that they are comments.</p>\n\n\n\n<p>For examinees who are unconfident with a certain syntax, write down comments. This way, at least, you&#8217;re letting the person grading your paper know your intention with that incorrectly formatted code. And use only the correct delimiters to denote comments — for example, that would be the forward slashes for JavaScript.</p>\n\n\n<h3 id=\"analog-vs-digital\">Analog vs. digital</h3>\n\n\n<p>As I mentioned earlier, everything I&#8217;m providing here can is generic coding advice. If you don&#8217;t want to try this with physical paper, any note-taking application also works.</p>\n\n\n\n<p>But if you&#8217;re going to try the digital route, my recommendation is to try using something other than a straight note-taking app. Work with more visual digital tools — flow diagrams, mind maps, wireframes, etc. They can help you visualize your result, the outlines, and the code itself.</p>\n\n\n\n<p>I am not much of a digital citizen (except for working on the web and recently converting to reading e-books), so I stick to physical notebooks.</p>\n\n\n<h3 id=\"my-favorite-tools-for-handwriting-code\">My favorite tools for handwriting code</h3>\n\n\n<p>Any pencil and paper will do! But there are lots of options out there, and these are a few choice tools I use:</p>\n\n\n\n<ul><li><a href=\"https://www.amazon.com/Staedtler-Pigment-Liner-0-3mm-308-0-3/dp/B00AHW572W\" rel=\"noopener\">Staedtler Pigment Liner 0.3mm</a> (Black)</li><li><a href=\"https://www.amazon.com/Mitsubishi-Pencil-ballpoint-stream-SXN220007-24/dp/B00O4P5CI2/ref=sr_1_5?crid=SN007BBRD9TB&amp;keywords=Mitsubishi+JETSTREAM+101+0.7&amp;qid=1658334470&amp;s=office-products&amp;sprefix=mitsubishi+jetstream+101+0.7%2Coffice-products%2C99&amp;sr=1-5\" rel=\"noopener\">Mitsubishi JETSTREAM 101 0.7mm</a> (Black)</li><li><a href=\"https://www.amazon.com/MUJI-Blank-Notebook-Unruled-30sheets/dp/B00IQQE5EM/ref=sr_1_5?crid=3EQV4ID50LZ56&amp;keywords=MUJI+Notebook+A5&amp;qid=1658334618&amp;s=office-products&amp;sprefix=muji+notebook+a5%2Coffice-products%2C101&amp;sr=1-5\" rel=\"noopener\">MUJI Notebook A5 6mm Rule 30 sheets</a> (Lightweight and easy to carry)</li><li><a href=\"https://www.amazon.com/MUJI-Twin-Tip-Highlighter-3-colors-Pack/dp/B0736YVQBC/ref=sr_1_2?crid=3A01WD7YWRCWY&amp;keywords=MUJI+Twin-Tip+Highlighter&amp;qid=1658334679&amp;s=office-products&amp;sprefix=muji+twin-tip+highlighter%2Coffice-products%2C88&amp;sr=1-2\" rel=\"noopener\">MUJI Twin-Tip Highlighter Pen</a> (Yellow)</li></ul>\n\n\n<h3 id=\"there-is-no-write-way-to-code\">There is no &#8220;write&#8221; way to code</h3>\n\n\n<p>I hope, if nothing else, my little way of handwriting code with pencil and paper makes you evaluate the way you already plan and write code. I like knowing how other developers approach their work, and this is my way of giving you a peek into the way I do things.</p>\n\n\n\n<p>Again, nothing here is scientific or an exact art. But if you want to give handwritten code planning a try, here&#8217;s everything we&#8217;ve covered in a nice ordered list:</p>\n\n\n\n<ol><li>Start by writing down (with sample data, if needed) the output of your code.</li><li>Write an outline for the code. Please keep it to three steps for small projects or ones that are less complex.</li><li>Use longhand notations. Developers writing for themselves can use shorthand notations as long as the writing is legible and makes sense to you when you refer to it later.</li><li>When under a time constraint, consider writing the code that tackles the heart of the problem first. Later, write down a call to that code at the right place in your sequential code.</li><li>If you feel confident, try writing pseudo code addressing the main idea.</li><li>Use proper indentations and spaces — and be mindful of the paper&#8217;s width.</li></ol>\n\n\n\n<p>That&#8217;s it! When you&#8217;re ready to try writing code by hand, I hope this article makes it easy for you to start. And if you&#8217;re sitting down for an exam or an interview, I hope this helps you focus on getting the questions right.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/why-and-how-i-write-code-with-pencil-and-paper/\">Why (and How) I Write Code With Pencil and Paper</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "category": "Article",
          "link": "https://css-tricks.com/why-and-how-i-write-code-with-pencil-and-paper/",
          "creator": "Preethi",
          "pubDate": "Wed, 17 Aug 2022 13:21:17 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "css-tricks",
          "feed": "css tricks",
          "read": true,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "89ff68560b33f64b9e52f34f84794ca1",
          "highlights": []
        },
        {
          "title": "CSS Grid and Custom Shapes, Part 1",
          "description": "<p>In a previous article, I looked at CSS Grid&#8217;s ability to <a href=\"https://css-tricks.com/exploring-css-grids-implicit-grid-and-auto-placement-powers/\">create complex layouts using its auto-placement powers</a>. I took that one step further in another article that <a href=\"https://css-tricks.com/zooming-images-in-a-grid-layout\">added a zooming hover effect to images in a grid layout</a>&#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-grid-and-custom-shapes-part-1/\">CSS Grid and Custom Shapes, Part 1</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "content": "\n<p>In a previous article, I looked at CSS Grid&#8217;s ability to <a href=\"https://css-tricks.com/exploring-css-grids-implicit-grid-and-auto-placement-powers/\">create complex layouts using its auto-placement powers</a>. I took that one step further in another article that <a href=\"https://css-tricks.com/zooming-images-in-a-grid-layout\">added a zooming hover effect to images in a grid layout</a>. This time, I want to dive into another type of grid, one that works with shapes.</p>\n\n\n\n<span id=\"more-367324\"></span>\n\n\n\n<p>Like, what if the images aren’t perfectly square but instead are shaped like hexagons or rhombuses? Spoiler alert: we can do it. In fact, we’re going to combine CSS Grid techniques we’ve looked at and drop in some CSS <code>clip-path</code> and <code>mask</code> magic to create fancy grids of images for just about any shape you can imagine!</p>\n\n\n<h3 id=\"lets-start-with-some-markup\">Let’s start with some markup</h3>\n\n\n<p>Most of the layouts we are going to look at may look easy to achieve at first glance, but the challenging part is to achieve them with <strong>the same HTML markup</strong>. We can use a lot of wrappers, <code>div</code>s, and whatnot, but the goal of this post is to use the same and smallest amount of HTML code and still get all the different grids we want. After all, what’s CSS but a way to separate styling and markup? Our styling should not depend on the markup, and vice versa.</p>\n\n\n\n<p>This said, let’s start with this:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"gallery\">\n  &lt;img src=\"...\" alt=\"...\">\n  &lt;img src=\"...\" alt=\"...\">\n  &lt;img src=\"...\" alt=\"...\">\n  &lt;img src=\"...\" alt=\"...\">\n  &lt;!-- as many times as we want -->\n&lt;/div></code></pre>\n\n\n\n<p>A container with images is all that we need here. Nothing more!</p>\n\n\n<h3 id=\"css-grid-of-hexagons\">CSS Grid of Hexagons</h3>\n\n\n<p>This is also sometimes referred to as a “honeycomb” grid.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_XWEWoYW\" src=\"//codepen.io/anon/embed/XWEWoYW?height=550&amp;theme-id=1&amp;slug-hash=XWEWoYW&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed XWEWoYW\" title=\"CodePen Embed XWEWoYW\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>There are already plenty of other blog posts out there that show how to make this. Heck, I <a href=\"https://css-tricks.com/hexagons-and-beyond-flexible-responsive-grid-patterns-sans-media-queries/\">wrote one</a> here on CSS-Tricks! That article is still good and goes way deep on making a responsive layout. But for this specific case, we are going to rely on a much simpler CSS approach.</p>\n\n\n\n<p>First, let’s use <code><a href=\"https://css-tricks.com/almanac/properties/c/clip-path/\">clip-path</a></code> on the images to create the hexagon shape and we place all of them in the same grid area so they overlap.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery {\n  --s: 150px; /* controls the size */\n  display: grid;\n}\n\n.gallery > img {\n  grid-area: 1/1;\n  width: var(--s);\n  aspect-ratio: 1.15;\n  object-fit: cover;\n  clip-path: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0 50%);\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"311\" height=\"277\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1659128373052_image.png?resize=311%2C277&#038;ssl=1\" alt=\"\" class=\"wp-image-367327\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1659128373052_image.png?w=311&amp;ssl=1 311w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1659128373052_image.png?resize=300%2C267&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption><code>clip-path: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0 50%)</code></figcaption></figure>\n\n\n\n<p>Nothing fancy yet. All the images are hexagons and above each other. So it looks like all we have is a single hexagon-shaped image element, but there are really seven.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_mdxMqmK/d9c9d84f1e83aea575610acfddd85105\" src=\"//codepen.io/anon/embed/preview/mdxMqmK/d9c9d84f1e83aea575610acfddd85105?height=450&amp;theme-id=1&amp;slug-hash=mdxMqmK/d9c9d84f1e83aea575610acfddd85105&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed mdxMqmK/d9c9d84f1e83aea575610acfddd85105\" title=\"CodePen Embed mdxMqmK/d9c9d84f1e83aea575610acfddd85105\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>The next step is to apply a translation to the images to correctly place them on the grid.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"472\" height=\"448\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658759154146_image.png?resize=472%2C448&#038;ssl=1\" alt=\"\" class=\"wp-image-367328\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658759154146_image.png?w=472&amp;ssl=1 472w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658759154146_image.png?resize=300%2C285&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Notice that we still want one of the images to remain in the center. The rest are placed around it using CSS <code>translate</code> and good ol’ fashioned geometry. Here’s are the mock formulas I came up with for each image in the grid:</p>\n\n\n\n<pre rel=\"Formula\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">translate((height + gap)*sin(0deg), (height + gap)*cos(0))\ntranslate((height + gap)*sin(60deg), (height + gap)*cos(60deg))\ntranslate((height + gap)*sin(120deg), (height + gap)*cos(120deg))\ntranslate((height + gap)*sin(180deg), (height + gap)*cos(180deg))\ntranslate((height + gap)*sin(240deg), (height + gap)*cos(240deg))\ntranslate((height + gap)*sin(300deg), (height + gap)*cos(300deg))</code></pre>\n\n\n\n<p>A few calculations and optimization later (let’s skip that boring part, right?) we get the following CSS:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery {\n  --s: 150px; /* control the size */\n  --g: 10px;  /* control the gap */\n  display: grid;\n}\n.gallery > img {\n  grid-area: 1/1;\n  width: var(--s);\n  aspect-ratio: 1.15;\n  object-fit: cover;\n  clip-path: polygon(25% 0%, 75% 0%, 100% 50% ,75% 100%, 25% 100%, 0 50%);\n  transform: translate(var(--_x,0), var(--_y,0));\n}\n.gallery > img:nth-child(1) { --_y: calc(-100% - var(--g)); }\n.gallery > img:nth-child(7) { --_y: calc( 100% + var(--g)); }\n.gallery > img:nth-child(3),\n.gallery > img:nth-child(5) { --_x: calc(-75% - .87*var(--g)); }\n.gallery > img:nth-child(4),\n.gallery > img:nth-child(6) { --_x: calc( 75% + .87*var(--g)); }\n.gallery > img:nth-child(3),\n.gallery > img:nth-child(4) { --_y: calc(-50% - .5*var(--g)); }\n.gallery > img:nth-child(5), \n.gallery > img:nth-child(6) { --_y: calc( 50% + .5*var(--g)); }</code></pre>\n\n\n\n<p class=\"is-style-explanation\">Maybe that&#8217;ll be easier when we get <a href=\"https://chromestatus.com/feature/5165381072191488\" rel=\"noopener\">real trigonometry functions in CSS</a>!</p>\n\n\n\n<p>Each image is translated by the <code>--_x</code> and <code>--_y</code> variables that are based on those formulas. Only the second image (<code>nth-child(2)</code>) is undefined in any selector because it’s the one in the center. It can be any image if you decide to use a different order. Here’s the order I’m using:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"484\" height=\"490\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658778323505_image.png?resize=484%2C490&#038;ssl=1\" alt=\"\" class=\"wp-image-367329\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658778323505_image.png?w=484&amp;ssl=1 484w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658778323505_image.png?resize=296%2C300&amp;ssl=1 296w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>With only a few lines of code, we get a cool grid of images. To this, I added a little hover effect to the images to make things fancier.</p>\n\n\n\n<p>Guess what? We can get another hexagon grid by simply updating a few values.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_xxWLJOR/a7d6f76d210b629398f5fc900cd68719\" src=\"//codepen.io/anon/embed/xxWLJOR/a7d6f76d210b629398f5fc900cd68719?height=550&amp;theme-id=1&amp;slug-hash=xxWLJOR/a7d6f76d210b629398f5fc900cd68719&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed xxWLJOR/a7d6f76d210b629398f5fc900cd68719\" title=\"CodePen Embed xxWLJOR/a7d6f76d210b629398f5fc900cd68719\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>If you check the code and compare it with the previous one you will notice that I have simply swapped the values inside <code>clip-path</code> and I switched between <code>--x</code> and <code>--y</code>. That’s all!</p>\n\n\n<h3 id=\"css-grid-of-rhombuses\">CSS Grid of Rhombuses</h3>\n\n\n<p>Rhombus is such a fancy word for a square that’s rotated 45 degrees.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_KKowpYz\" src=\"//codepen.io/anon/embed/KKowpYz?height=600&amp;theme-id=1&amp;slug-hash=KKowpYz&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed KKowpYz\" title=\"CodePen Embed KKowpYz\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Same HTML, remember? We first start by defining a 2×2 grid of images in CSS:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery {\n  --s: 150px; /* controls the size */\n\n  display: grid;\n  gap: 10px;\n  grid: auto-flow var(--s) / repeat(2, var(--s));\n  place-items: center;\n}\n.gallery > img {\n  width: 100%; \n  aspect-ratio: 1;\n  object-fit: cover;\n}</code></pre>\n\n\n\n<p>The first thing that might catch your eye is the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/grid\" rel=\"noopener\"><code>grid</code></a> property. It’s pretty uncommonly used but is super helpful in that it’s a shorthand that lets you define a complete grid in one declaration. It’s not the most intuitive — and not to mention readable — property, but we are here to <em>learn</em> and <em>discover</em> new things, so let’s use it rather than writing out all of the individual grid properties.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">grid: auto-flow var(--s) / repeat(2,var(--s));\n\n/* is equivalent to this: */\ngrid-template-columns: repeat(2, var(--s));\ngrid-auto-rows: var(--s);</code></pre>\n\n\n\n<p>This defines two columns equal to the <code>--s</code> variable and sets the height of all the rows to <code>--s</code> as well. Since we have four images, we will automatically get a 2×2 grid.</p>\n\n\n\n<p>Here’s another way we could have written it:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">grid-template-columns: repeat(2, var(--s));\ngrid-template-rows: repeat(2, var(--s));</code></pre>\n\n\n\n<p>…which can be reduced with the <code>grid</code> shorthand:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">grid: repeat(2,var(--s)) / repeat(2,var(--s));</code></pre>\n\n\n\n<p>After setting the grid, we rotate it and the images with CSS <code>transform</code>s and we get this:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gOexjRd/81e863cc4d71bd6047a7cd9be29062a3\" src=\"//codepen.io/anon/embed/preview/gOexjRd/81e863cc4d71bd6047a7cd9be29062a3?height=600&amp;theme-id=1&amp;slug-hash=gOexjRd/81e863cc4d71bd6047a7cd9be29062a3&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gOexjRd/81e863cc4d71bd6047a7cd9be29062a3\" title=\"CodePen Embed gOexjRd/81e863cc4d71bd6047a7cd9be29062a3\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Note how I rotate them both by <code>45deg</code>, but in the opposite direction.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery {\n  /* etc. */\n  transform: rotate(45deg);\n}\n.gallery > img {\n  /* etc. */\n  transform: rotate(-45deg);\n}</code></pre>\n\n\n\n<p>Rotating the images in the negative direction prevents them from getting rotated with the grid so they stay straight. Now, we apply a <code>clip-path</code> to clip a rhombus shape out of them.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"319\" height=\"316\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658781081072_image.png?resize=319%2C316&#038;ssl=1\" alt=\"\" class=\"wp-image-367330\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658781081072_image.png?w=319&amp;ssl=1 319w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658781081072_image.png?resize=300%2C297&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658781081072_image.png?resize=150%2C150&amp;ssl=1 150w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption><code>clip-path: polygon(50% 0, 100% 50%, 50% 100%, 0 50%)</code></figcaption></figure>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_qBoXyVX/36921e398a269bbfb6a143d969e1b1a1\" src=\"//codepen.io/anon/embed/preview/qBoXyVX/36921e398a269bbfb6a143d969e1b1a1?height=600&amp;theme-id=1&amp;slug-hash=qBoXyVX/36921e398a269bbfb6a143d969e1b1a1&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed qBoXyVX/36921e398a269bbfb6a143d969e1b1a1\" title=\"CodePen Embed qBoXyVX/36921e398a269bbfb6a143d969e1b1a1\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We are almost done! We need to rectify the size of the image to make them fit together. Otherwise, they’re spaced far apart to the point where it doesn’t look like a grid of images.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"542\" height=\"514\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658781816498_image.png?resize=542%2C514&#038;ssl=1\" alt=\"\" class=\"wp-image-367331\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658781816498_image.png?w=542&amp;ssl=1 542w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658781816498_image.png?resize=300%2C285&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>The image is within the boundary of the green circle, which is the inscribed circle of the grid area where the image is placed. What we want is to make the image bigger to fit inside the red circle, which is the circumscribed circle of the grid area.</p>\n\n\n\n<p>Don’t worry, I won’t introduce any more boring geometry. All you need to know is that the relationship between the radius of each circle is the square root of 2 (<code>sqrt(2)</code>). This is the value we need to increase the size of our images to fill the area. We will use <code>100%*sqrt(2) = 141%</code> and be done!</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"11\"><code markup=\"tt\">.gallery {\n  --s: 150px; /* control the size */\n\n  display: grid;\n  grid: auto-flow var(--s) / repeat(2,var(--s));\n  gap: 10px;\n  place-items: center;\n  transform: rotate(45deg);\n}\n.gallery > img {\n  width: 141%; /* 100%*sqrt(2) = 141% */\n  aspect-ratio: 1;\n  object-fit: cover;\n  transform: rotate(-45deg);\n  clip-path: polygon(50% 0, 100% 50%, 50% 100%, 0 50%);\n}</code></pre>\n\n\n\n<p>Like the hexagon grid, we can make things fancier with that nice zooming hover effect:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_KKowpYz\" src=\"//codepen.io/anon/embed/KKowpYz?height=600&amp;theme-id=1&amp;slug-hash=KKowpYz&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed KKowpYz\" title=\"CodePen Embed KKowpYz\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"css-grid-of-triangular-shapes\">CSS Grid of Triangular Shapes</h3>\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_PoRGPoW\" src=\"//codepen.io/anon/embed/PoRGPoW?height=600&amp;theme-id=1&amp;slug-hash=PoRGPoW&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed PoRGPoW\" title=\"CodePen Embed PoRGPoW\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>You probably know by now that the big trick is figuring out the <code>clip-path</code> to get the shapes we want. For this grid, each element has its own <code>clip-path</code> value whereas the last two grids worked with a consistent shape. So, this time around, it’s like we’re working with a few different triangular shapes that come together to form a rectangular grid of images.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"290\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658828688674_image.png?resize=1024%2C290&#038;ssl=1\" alt=\"\" class=\"wp-image-367332\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658828688674_image.png?resize=1024%2C290&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658828688674_image.png?resize=300%2C85&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658828688674_image.png?resize=768%2C218&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658828688674_image.png?w=1030&amp;ssl=1 1030w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The three images at the top</figcaption></figure>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1013\" height=\"279\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658828620332_image.png?resize=1013%2C279&#038;ssl=1\" alt=\"\" class=\"wp-image-367333\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658828620332_image.png?w=1013&amp;ssl=1 1013w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658828620332_image.png?resize=300%2C83&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658828620332_image.png?resize=768%2C212&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The three images at the bottom</figcaption></figure>\n\n\n\n<p>We place them inside a 3×2 grid with the following CSS:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery {\n  display: grid;\n  gap: 10px; \n  grid-template-columns: auto auto auto; /* 3 columns */\n  place-items: center;\n}\n.gallery > img {\n  width: 200px; /* controls the size */\n  aspect-ratio: 1;\n  object-fit: cover;\n}\n/* the clip-path values */\n.gallery > img:nth-child(1) { clip-path: polygon(0 0, 50% 0, 100% 100% ,0 100%); }\n.gallery > img:nth-child(2) { clip-path: polygon(0 0, 100% 0, 50% 100%); }\n.gallery > img:nth-child(3) { clip-path: polygon(50% 0, 100% 0, 100% 100%, 0 100%); }\n.gallery > img:nth-child(4) { clip-path: polygon(0 0, 100% 0, 50% 100%, 0 100%); }\n.gallery > img:nth-child(5) { clip-path: polygon(50% 0, 100% 100%, 0% 100%); }\n.gallery > img:nth-child(6) { clip-path: polygon(0 0, 100% 0 ,100% 100%, 50% 100%); } }</code></pre>\n\n\n\n<p>Here’s what we get:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_abYygLB/ec7e8106f450cf7ddb9e3d7796108e0a\" src=\"//codepen.io/anon/embed/preview/abYygLB/ec7e8106f450cf7ddb9e3d7796108e0a?height=600&amp;theme-id=1&amp;slug-hash=abYygLB/ec7e8106f450cf7ddb9e3d7796108e0a&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed abYygLB/ec7e8106f450cf7ddb9e3d7796108e0a\" title=\"CodePen Embed abYygLB/ec7e8106f450cf7ddb9e3d7796108e0a\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>The final touch is to make the width of the middle column equal <code>0</code> to get rid of the spaces between the images. The same sort of spacing problem we had with the rhombus grid, but with a different approach for the shapes we’re using:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">grid-template-columns: auto 0 auto;</code></pre>\n\n\n\n<p>I had to fiddle with the <code>clip-path</code> values to make sure they would all appear to fit together nicely like a puzzle. The original images overlap when the middle column has zero width, but after slicing the images, the illusion is perfect:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"940\" height=\"459\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658829628433_image.png?resize=940%2C459&#038;ssl=1\" alt=\"\" class=\"wp-image-367334\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658829628433_image.png?w=940&amp;ssl=1 940w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658829628433_image.png?resize=300%2C146&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658829628433_image.png?resize=768%2C375&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"css-pizza-pie-grid\">CSS Pizza Pie Grid</h3>\n\n\n<p>Guess what? We can get another cool grid by simply adding <code>border-radius</code> and <code>overflow</code> to our grid or triangular shapes. &#x1f389;</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_abYygRW/ba0f716af470c64ce13f6f7f2958cbfe\" src=\"//codepen.io/anon/embed/abYygRW/ba0f716af470c64ce13f6f7f2958cbfe?height=600&amp;theme-id=1&amp;slug-hash=abYygRW/ba0f716af470c64ce13f6f7f2958cbfe&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed abYygRW/ba0f716af470c64ce13f6f7f2958cbfe\" title=\"CodePen Embed abYygRW/ba0f716af470c64ce13f6f7f2958cbfe\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"css-grid-of-puzzle-pieces\">CSS Grid of Puzzle Pieces</h3>\n\n\n<p>This time we are going to play with the CSS <a href=\"https://css-tricks.com/almanac/properties/m/mask/\"><code>mask</code></a> property to make the images look like pieces of a puzzle.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_OJvWKPm\" src=\"//codepen.io/anon/embed/OJvWKPm?height=600&amp;theme-id=1&amp;slug-hash=OJvWKPm&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed OJvWKPm\" title=\"CodePen Embed OJvWKPm\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p class=\"is-style-explanation\">If you haven’t used <code>mask</code> with <a href=\"https://css-tricks.com/a-complete-guide-to-css-gradients/\">CSS gradients</a>, I highly recommend <a href=\"https://css-tricks.com/css-borders-using-masks/\">this other article</a> I wrote on the topic because it’ll help with what comes next. Why gradients? Because that’s what we’re using to get the round notches in the puzzle piece shapes.</p>\n\n\n\n<p>Setting up the grid should be a cinch by now, so let’s focus instead on the <code>mask</code> part.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_mdxBXwP/e13c06c572e0c93d95d92e98995d05e0\" src=\"//codepen.io/anon/embed/mdxBXwP/e13c06c572e0c93d95d92e98995d05e0?height=450&amp;theme-id=1&amp;slug-hash=mdxBXwP/e13c06c572e0c93d95d92e98995d05e0&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed mdxBXwP/e13c06c572e0c93d95d92e98995d05e0\" title=\"CodePen Embed mdxBXwP/e13c06c572e0c93d95d92e98995d05e0\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>As illustrated in the above demo, we need two gradients to create the final shape. One gradient creates a circle (the green part) and the other creates the right curve while filling in the top part.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">--g: 6px; /* controls the gap */\n--r: 42px;  /* control the circular shapes */\n\nbackground: \n  radial-gradient(var(--r) at left 50% bottom var(--r), green 95%, #0000),\n  radial-gradient(calc(var(--r) + var(--g)) at calc(100% + var(--g)) 50%, #0000 95%, red)\n  top/100% calc(100% - var(--r)) no-repeat;</code></pre>\n\n\n\n<p>Two variables control the shape. The <code>--g</code> variable is nothing but the grid gap. We need to account for the gap to correctly place our circles so they overlap perfectly when the whole puzzle is assembled. The <code>--r</code> variable controls the size of circular parts of the puzzle shape.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"756\" height=\"369\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658918624175_image.png?resize=756%2C369&#038;ssl=1\" alt=\"\" class=\"wp-image-367336\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658918624175_image.png?w=756&amp;ssl=1 756w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658918624175_image.png?resize=300%2C146&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Now we take the same CSS and update a few values in it to create the three other shapes:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_JjLrByR/c51f0db4eb02c1d75ca1709c1dc0a4a1\" src=\"//codepen.io/anon/embed/preview/JjLrByR/c51f0db4eb02c1d75ca1709c1dc0a4a1?height=600&amp;theme-id=1&amp;slug-hash=JjLrByR/c51f0db4eb02c1d75ca1709c1dc0a4a1&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed JjLrByR/c51f0db4eb02c1d75ca1709c1dc0a4a1\" title=\"CodePen Embed JjLrByR/c51f0db4eb02c1d75ca1709c1dc0a4a1\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We have the shapes, but not the overlapping edges we need to make them fit together. Each image is limited to the grid cell it’s in, so it makes sense why the shapes are sort of jumbled at the moment:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"497\" height=\"478\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658932167687_image.png?resize=497%2C478&#038;ssl=1\" alt=\"\" class=\"wp-image-367338\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658932167687_image.png?w=497&amp;ssl=1 497w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_439748D2E51CEE00C19ACF67FECB0A1399157182BB8316D665E85AB17DDCA064_1658932167687_image.png?resize=300%2C289&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We need to create an overflow by increasing the height/width of the images. From the above figure, we have to increase the height of the first and fourth images while we increase the width of the second and third ones. You have probably already guessed that we need to increase them using the <code>--r</code> variable.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery > img:is(:nth-child(1),:nth-child(4)) {\n  width: 100%;\n  height: calc(100% + var(--r));\n}\n.gallery > img:is(:nth-child(2),:nth-child(3)) {\n  height: 100%;\n  width: calc(100% + var(--r));\n}</code></pre>\n\n\n\n<p>We are getting closer!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_dymVjdz/839e965687fb03aff15cf4d11fc21e09\" src=\"//codepen.io/anon/embed/preview/dymVjdz/839e965687fb03aff15cf4d11fc21e09?height=600&amp;theme-id=1&amp;slug-hash=dymVjdz/839e965687fb03aff15cf4d11fc21e09&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed dymVjdz/839e965687fb03aff15cf4d11fc21e09\" title=\"CodePen Embed dymVjdz/839e965687fb03aff15cf4d11fc21e09\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We created the overlap but, by default, our images either overlap on the right (if we increase the width) or the bottom (if we increase the height). But that’s not what we want for the second and fourth images. The fix is to use <code>place-self: end</code> on those two images and our full code becomes this:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_OJvWKPm\" src=\"//codepen.io/anon/embed/preview/OJvWKPm?height=600&amp;theme-id=1&amp;slug-hash=OJvWKPm&amp;default-tab=css,result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed OJvWKPm\" title=\"CodePen Embed OJvWKPm\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Here is another example where I am using a conic gradient instead of a radial gradient. This gives us triangular puzzle pieces while keeping the same underlying HTML and CSS.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_RwMLmjr/d3e678a4e6f858b7782fe7338cf641f9\" src=\"//codepen.io/anon/embed/preview/RwMLmjr/d3e678a4e6f858b7782fe7338cf641f9?height=600&amp;theme-id=1&amp;slug-hash=RwMLmjr/d3e678a4e6f858b7782fe7338cf641f9&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed RwMLmjr/d3e678a4e6f858b7782fe7338cf641f9\" title=\"CodePen Embed RwMLmjr/d3e678a4e6f858b7782fe7338cf641f9\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>A last one! This time I am using <code>clip-path</code> and since it&#8217;s a property we can animate, we get a cool hover by simply updating the custom property that controls the shape.<br></p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_gOezMrY\" src=\"//codepen.io/anon/embed/preview/gOezMrY?height=600&amp;theme-id=1&amp;slug-hash=gOezMrY&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed gOezMrY\" title=\"CodePen Embed gOezMrY\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"wrapping-up\">Wrapping up</h3>\n\n\n<p>That’s all for this first part! By combining the things we’ve already learned about CSS Grid with some added <code>clip-path</code> and <code>mask</code> magic, we were able to make grid layouts featuring different kinds of shapes. And we used the same HTML markup each time! And the markup itself is nothing more than a container with a handful of image elements!</p>\n\n\n\n<p>In the second part, we are going to explore more complex-looking grids with more fancy shapes and hover effects.</p>\n\n\n\n<p>I’m planning to take the demo of expanding image panels we made together in <a href=\"https://css-tricks.com/zooming-images-in-a-grid-layout\">this other article</a>:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_WNzxeOO/fae9ee2f379890e26459f66cff344cee\" src=\"//codepen.io/anon/embed/preview/WNzxeOO/fae9ee2f379890e26459f66cff344cee?height=450&amp;theme-id=1&amp;slug-hash=WNzxeOO/fae9ee2f379890e26459f66cff344cee&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed WNzxeOO/fae9ee2f379890e26459f66cff344cee\" title=\"CodePen Embed WNzxeOO/fae9ee2f379890e26459f66cff344cee\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>…and transform it into a zig-zag image panels! And this is only one example among the many we will discover in the next article.</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='251' src='https://videopress.com/embed/nLE0fL33?cover=1&amp;playsinline=1&amp;preloadContent=metadata&amp;useAverageColor=1&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" allow='clipboard-write'></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1658470809'></script>\n</div></figure>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/css-grid-and-custom-shapes-part-1/\">CSS Grid and Custom Shapes, Part 1</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "category": "Article",
          "link": "https://css-tricks.com/css-grid-and-custom-shapes-part-1/",
          "creator": "Temani Afif",
          "pubDate": "Mon, 15 Aug 2022 13:13:47 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "css-tricks",
          "feed": "css tricks",
          "read": true,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "a4d9cef54220b0ed7413704cc5794aba",
          "highlights": []
        },
        {
          "title": "Quick Tip: Clear VS Code Cache for Open Files",
          "description": "<p>If you use VS Code, you might have enabled the setting for re-opening a previously open file next time the app launches. I do. I like that.</p>\n<p>Hey, thanks for remembering, buddy! &#x1f917;</p>\n<p>But sometimes you really, really don&#8217;t want &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/quick-tip-clear-vs-code-cache-for-open-files/\">Quick Tip: Clear VS Code Cache for Open Files</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "content": "\n<p>If you use VS Code, you might have enabled the setting for re-opening a previously open file next time the app launches. I do. I like that.</p>\n\n\n\n<span id=\"more-367403\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1003\" height=\"563\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/vs-code-open-last-file.png?resize=1003%2C563&#038;ssl=1\" alt=\"\" class=\"wp-image-367404\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/vs-code-open-last-file.png?w=1003&amp;ssl=1 1003w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/vs-code-open-last-file.png?resize=300%2C168&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/vs-code-open-last-file.png?resize=768%2C431&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Hey, thanks for remembering, buddy! &#x1f917;</figcaption></figure>\n\n\n\n<p>But sometimes you really, really don&#8217;t want that to happen.</p>\n\n\n\n<p>I recently ran into one of those times! I had to reinstall my local copy of this site and, with it, the 3GB+ database that accompanies it. Being a WordPress site and all, I needed to open up the SQL database file to search-and-replace some stuff.</p>\n\n\n\n<p>If you&#8217;ve ever tried to open a super duper large file in VS Code, then you know you might need to jiggle a few settings that increase the memory limit and all that. The app is super flexible like that. There&#8217;s even a <a href=\"https://marketplace.visualstudio.com/items?itemName=mbehr1.vsc-lfs\" rel=\"noopener\">nice extension</a> that&#8217;ll both increase the memory <em>and</em> perform a search-and-replace on open.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"507\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/vs-code-memory-limit.png?resize=1024%2C507&#038;ssl=1\" alt=\"\" class=\"wp-image-367406\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/vs-code-memory-limit.png?resize=1024%2C507&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/vs-code-memory-limit.png?resize=300%2C149&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/vs-code-memory-limit.png?resize=768%2C381&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/vs-code-memory-limit.png?w=1223&amp;ssl=1 1223w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Anyway, that big ol’ database file crashed VS Code several times and I wound up finding another way to go about things. However, VS Code keeps trying to open that file and inevitably crashes even though I nuked the file. And that means I wait for the MacOS beachball of fun to spin around before the app crashes and I can reopen it again for reals.</p>\n\n\n\n<p>Well, I finally decided to fix that today and spent a little time searching around. One <a href=\"https://stackoverflow.com/questions/57887568/vs-code-crashing-on-restart-after-opening-large-file\" rel=\"noopener\">Stack Overflow thread</a> suggests disabling extensions and increasing the memory limit via the command line. I&#8217;m glad that worked for some folks, but I had to keep looking.</p>\n\n\n\n<p><a href=\"https://stackoverflow.com/questions/45216264/clear-file-content-cache-in-visual-studio-code\" rel=\"noopener\">Another thread</a> suggests clearing the app&#8217;s cache from the command palette.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1223\" height=\"606\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/vs-code-clear-history.png?resize=1223%2C606&#038;ssl=1\" alt=\"\" class=\"wp-image-367407\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/vs-code-clear-history.png?w=1223&amp;ssl=1 1223w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/vs-code-clear-history.png?resize=300%2C149&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/vs-code-clear-history.png?resize=1024%2C507&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/vs-code-clear-history.png?resize=768%2C381&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Nice, but no dice. &#x1f3b2;</p>\n\n\n\n<p>I wound up going with a scorched earth strategy <a href=\"https://www.youtube.com/watch?v=pmI-rgGNZcs\" rel=\"noopener\">shared by Jie Jenn in a helpful YouTube video</a>. You&#8217;ve gotta manually trash the cached files from VS Code. The video walks through it in Windows, but it&#8217;s pretty darn similar in MacOS. The VS Code cache is located in your user folder.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2614\" height=\"1136\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Screen-Shot-2022-08-04-at-1.59.25-PM.png?resize=2614%2C1136&#038;ssl=1\" alt=\"\" class=\"wp-image-367411\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Screen-Shot-2022-08-04-at-1.59.25-PM.png?w=2614&amp;ssl=1 2614w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Screen-Shot-2022-08-04-at-1.59.25-PM.png?resize=300%2C130&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Screen-Shot-2022-08-04-at-1.59.25-PM.png?resize=1024%2C445&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Screen-Shot-2022-08-04-at-1.59.25-PM.png?resize=768%2C334&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Screen-Shot-2022-08-04-at-1.59.25-PM.png?resize=1536%2C668&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/Screen-Shot-2022-08-04-at-1.59.25-PM.png?resize=2048%2C890&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Notice that I have the <code>Backups</code> folder highlighted there. Jie removed the files from the <code>CachedData</code> folder, but all that did was trigger a prompt for me to re-install the app. So, I took a risk and deleted what appeared to be a 3GB+ file in <code>Backups</code>. I showed that file the door and VS Code has been happy ever since.</p>\n\n\n\n<p>Ask me again in a week and maybe I&#8217;ll find out that I really screwed something up. But so far, so good!</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/quick-tip-clear-vs-code-cache-for-open-files/\">Quick Tip: Clear VS Code Cache for Open Files</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "category": "Article",
          "link": "https://css-tricks.com/quick-tip-clear-vs-code-cache-for-open-files/",
          "creator": "Geoff Graham",
          "pubDate": "Thu, 11 Aug 2022 13:35:56 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "css-tricks",
          "feed": "css tricks",
          "read": true,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "ed92926fc97dd27d23c2ce0330a4f04e",
          "highlights": []
        },
        {
          "title": "Designing for Long-Form Articles",
          "description": "<p>Designing a beautiful “article” is wrought with tons of considerations. Unlike, say, a homepage, a long-form article is less about designing an interface than it is designing text in a way that creates a relaxed and comfortable reading experience.</p>\n<p>That’s &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/designing-for-long-form-articles/\">Designing for Long-Form Articles</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "content": "\n<p>Designing a beautiful “article” is wrought with tons of considerations. Unlike, say, a homepage, a long-form article is less about designing an interface than it is designing text in a way that creates a relaxed and comfortable reading experience.</p>\n\n\n\n<p>That’s because articles deal with long-form content which, in turn, tends to be valued by a ”time on page” interaction with users. We want someone to read a complete narrative. There’s a natural space between the time someone lands on an article and reads all the words. And hopefully, that space is immersive enough to not only hold a user’s, but provoke thoughts, ideas, and, possibly, actions. At least that’s what I’m hoping as I have your attention and you make your way through the very article you’re reading.</p>\n\n\n\n<p>There’s a balance. On one hand, we hear that <a href=\"https://geoffgraham.me/no-one-reads-the-internet/\" rel=\"noopener\">“no one reads the Internet.”</a> On the other, a long-form article demands careful attention. Considering the current value of content marketing and the growing impatience in users, captivating readers for as long as possible should be a key concern. Let’s take a look at some best practices and examples of incredible article pages to get a better idea of what makes a visually appealing reading experience for long-form articles (without sacrificing user experience), and how we can replicate the effects.</p>\n\n\n\n<span id=\"more-367370\"></span>\n\n\n<h3 id=\"quick-wins\">Quick wins</h3>\n\n\n<p>Let me quickly list out what I think might already be obvious to many of you, but are effective things for content legibility:</p>\n\n\n\n<ul><li><strong>Increase the font size:</strong> We know that <code>16px</code> is the default and is perfectly fine in many designs, but a larger font size is inviting in that it implies the user is free to lean back and settle in without having to angle forward with the screen in their face to read.</li><li><strong>Aim for characters per line:</strong> Very few people I know like to work harder than they need to, and that goes for reading too. Rather than using the full viewport width, try to narrow things down and balance that with your larger font size to get <em>fewer</em> characters on each line of text. Your sweet spot may vary, though many folks suggest somewhere between 45-75 characters per line to help limit how far the reader’s eye has to work to go from left to right. Chris has a <a href=\"https://css-tricks.com/bookmarklet-colorize-text-45-75-characters-line-length-testing/\">bookmarklet to help count characters</a>, but we also have the <code>ch</code> unit in CSS to get predictable results.</li><li><strong>Bump up the line height:</strong> A default line height is going to feel smashed. It’s funny, but more space between lines (up to a point, of course) is less work for eyes, which seems antithetical to the characters-per-line advice where we generally want eyes to travel a shorter distance. A line height between <code>1.2</code> and <code>1.5</code> seems to be a pretty typical range for long-form content.</li></ul>\n\n\n\n<p>If you haven’t seen it before,&nbsp;<a target=\"_blank\" href=\"https://www.pierrickcalvez.com/journal/a-five-minutes-guide-to-better-typography\" rel=\"noreferrer noopener\">Pierrick Calvez has a great</a><a target=\"_blank\" href=\"https://www.pierrickcalvez.com/journal/a-five-minutes-guide-to-better-typography\" rel=\"noreferrer noopener\">&nbsp;</a><a target=\"_blank\" href=\"https://www.pierrickcalvez.com/journal/a-five-minutes-guide-to-better-typography\" rel=\"noreferrer noopener\">“five-minute”</a><a target=\"_blank\" href=\"https://www.pierrickcalvez.com/journal/a-five-minutes-guide-to-better-typography\" rel=\"noreferrer noopener\">&nbsp;guide to typography</a>&nbsp;that packs in a bunch of low-hanging fruit like these.</p>\n\n\n<h3 id=\"design-for-extra-breathing-room\">Design for extra breathing room</h3>\n\n\n<p>You may be accustomed to designing&nbsp;“above&nbsp;the fold” where real estate is a prime commodity. That’s sort of like beach-front property in the web world because it’s where we’re used to packing in high-value things, like hero banners, calls to action, and anything else to help sell a thing. Above the fold can be a lot like a dense urban downtown with high traffic and high-rise buildings.</p>\n\n\n\n<p>Articles are different. They allow you to stretch out a bit. If we want to take the city development analogy a little further, articles have the acreage to lean into a&nbsp;“less&nbsp;is more” sort of design approach. That’s what makes seemingly small design choices — like type — so important to the overall experience.</p>\n\n\n\n<p>Check out&nbsp;the example below.&nbsp;The link underlines have a little more room to breathe&nbsp;(specifically,&nbsp;they appear below the descenders). This is actually something that you can enable sitewide but looks especially nice on article pages since it increases readability.&nbsp;That’s the sort of subtle design choice that contributes to extra breathing room.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2880\" height=\"1800\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657124967787_1.png?resize=2880%2C1800&#038;ssl=1\" alt=\"A long-form article on the Taste website.\" class=\"wp-image-367371\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657124967787_1.png?w=2880&amp;ssl=1 2880w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657124967787_1.png?resize=300%2C188&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657124967787_1.png?resize=1024%2C640&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657124967787_1.png?resize=768%2C480&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657124967787_1.png?resize=1536%2C960&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657124967787_1.png?resize=2048%2C1280&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p><code>text-underline-position: under;</code> is the line of CSS that makes this work. Naturally, <code>text-decoration</code> must be set to something other than <code>none</code> (<code>underline</code> in this case), too.</p>\n\n\n\n<p>The example above also features <code>text-decoration-thickness</code>, which alters the thickness of underlines (and other line types). You can use this CSS property to match a line’s thickness to a font’s size and/or weight.</p>\n\n\n\n<p>Here’s a full example:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a {\n  text-decoration: underline;\n  text-decoration-thickness: 2px;\n\n  /* or */\n  text-decoration: underline 2px;\n  text-underline-position: under;\n}</code></pre>\n\n\n\n<p>But before you reach for the <code>text-decoration</code> shorthand, Šime Vidas has <a href=\"https://css-tricks.com/when-to-avoid-css-text-decoration-shorthand/\">a few “gotchas”</a> when it comes to using it that are worth reviewing.</p>\n\n\n<h3 id=\"leading-into-the-content\">Leading into the content</h3>\n\n\n<p><dfn>Drop caps</dfn> are stylized letters that can be placed at the beginning of a document or document section. <a href=\"https://www.smashingmagazine.com/2012/04/drop-caps-historical-use-and-current-best-practices/\" rel=\"noopener\">They were once used in Latin texts</a>, but today they’re mostly used for decorative reasons.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2880\" height=\"1800\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125520626_2.png?resize=2880%2C1800&#038;ssl=1\" alt=\"\" class=\"wp-image-367372\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125520626_2.png?w=2880&amp;ssl=1 2880w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125520626_2.png?resize=300%2C188&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125520626_2.png?resize=1024%2C640&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125520626_2.png?resize=768%2C480&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125520626_2.png?resize=1536%2C960&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125520626_2.png?resize=2048%2C1280&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Personally, I think that drop caps hinder readability. However, they can be a nice way to “lead” a reader into the main content, and they shouldn’t introduce any serious accessibility issues as long as you’re using the <a href=\"https://css-tricks.com/almanac/selectors/f/first-letter/\"><code>::first-letter</code></a> pseudo-element. There are <a href=\"https://css-tricks.com/snippets/css/drop-caps/\">other (older)</a> <a href=\"https://css-tricks.com/snippets/css/drop-caps/\">methods</a> that involve more HTML and CSS as well as the use of ARIA attributes in order for the content to remain accessible.</p>\n\n\n\n<p>Using <code>::first-letter</code>, the CSS would look something like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* select the first letter of the first paragraph */\narticle > p:first-child::first-letter {\n  color: #903;\n  float: left;\n  font-family: Georgia;\n  font-size: 75px;\n  line-height: 60px;\n  padding-top: 4px;\n  padding-right: 8px;\n  padding-left: 3px;\n}</code></pre>\n\n\n\n<p>It sure would be nice if we could use the <a href=\"https://css-tricks.com/almanac/properties/i/initial-letter/\"><code>initial-letter</code></a> property, but there’s pretty much no support for it at the time I’m writing this. If we had it, all that math for font size and line height would be calculated for us!</p>\n\n\n\n<p>CodePen challenged folks to show off their drop-cap-styling skills several years ago and you can see a whole bunch of neat examples from it in <a href=\"https://codepen.io/collection/DrBKPx\" rel=\"noopener\">this collection</a>.</p>\n\n\n<h3 id=\"skip-to-main-content\">Skip to main content</h3>\n\n\n<p>Screen readers allow users to skip to the main content as long as it wraps it within a <code>&lt;main&gt;</code> element. However, those who navigate websites by tabbing don’t benefit from this. Instead, we must create a &#8220;skip to main content&#8221; anchor link. This link is customarily hidden but revealed once the user makes their first tab (i.e. show on focus).</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"640\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125343081_3.png?resize=1024%2C640&#038;ssl=1\" alt=\"\" class=\"wp-image-367377\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125343081_3.png?resize=1024%2C640&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125343081_3.png?resize=300%2C188&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125343081_3.png?resize=768%2C480&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125343081_3.png?resize=1536%2C960&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125343081_3.png?resize=2048%2C1280&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>It would look something like this:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;!-- anchor -->\n&lt;a id=\"skip-link\" href=\"#main\">Skip to main content&lt;/a>\n\n&lt;!-- target -->\n&lt;main class=\"main\">\n  &lt;!-- main content -->\n&lt;/main></code></pre>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">#skip-link {\n  position: absolute; /* remove it from the flow */\n  transform: translateX(-100%); /* move it off-screen so that it appears hidden but remains focusable */\n}\n#skip-link:focus {\n  position: unset; /* insert it back into the flow */\n  transform: unset; /* move it back onto the screen */\n}\n\n.main {\n  scroll-margin: 1rem; /* adds breathing room above the scroll target */\n}</code></pre>\n\n\n\n<p>There are other ways to go about it, of course. Here are a couple of deeper dives on creating skip links.</p>\n\n\n\n    \t\t\n    <div class=\"in-article-cards\">\n      <article class=\"in-article-card article\" id=\"mini-post-367370\">\n\n  <time datetime=\"2021-08-03\" title=\"Originally published Aug 10, 2022\">\n    <strong>\n                \n        Article\n      </strong>\n\n    on\n\n    Aug 3, 2021  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/a-deep-dive-on-skipping-to-content/\">\n      A Deep Dive on Skipping to Content    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/design/\" rel=\"tag\">design</a> <a href=\"https://css-tricks.com/tag/design-principles/\" rel=\"tag\">design principles</a> <a href=\"https://css-tricks.com/tag/editorial/\" rel=\"tag\">editorial</a> <a href=\"https://css-tricks.com/tag/typography/\" rel=\"tag\">typography</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/paulratcliffe/\" aria-label=\"Author page of Paul Ratcliffe\">\n      <img loading=\"lazy\" alt=\"\" class=\"avatar avatar-80 photo avatar-default\" height=\"80\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/1618384308886.jpeg?resize=80%2C80&#038;ssl=1\" width=\"80\"  data-recalc-dims=\"1\">    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/paulratcliffe/\">\n      Paul Ratcliffe    </a>\n  </div>\n\n</article>\n<article class=\"in-article-card article\" id=\"mini-post-367370\">\n\n  <time datetime=\"2020-03-17\" title=\"Originally published Aug 10, 2022\">\n    <strong>\n                \n        Article\n      </strong>\n\n    on\n\n    Aug 25, 2021  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/how-to-create-a-skip-to-content-link/\">\n      How to Create a “Skip to Content” Link    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/design/\" rel=\"tag\">design</a> <a href=\"https://css-tricks.com/tag/design-principles/\" rel=\"tag\">design principles</a> <a href=\"https://css-tricks.com/tag/editorial/\" rel=\"tag\">editorial</a> <a href=\"https://css-tricks.com/tag/typography/\" rel=\"tag\">typography</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/paulryan/\" aria-label=\"Author page of Paul Ryan\">\n      <img loading=\"lazy\" alt=\"\" class=\"avatar avatar-80 photo avatar-default\" height=\"80\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/04/headshot.jpg?resize=80%2C80&#038;ssl=1\" width=\"80\"  data-recalc-dims=\"1\">    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/paulryan/\">\n      Paul Ryan    </a>\n  </div>\n\n</article>\n    </div>\n  \n\n\n<h3 id=\"seamless-visuals\">Seamless visuals</h3>\n\n\n<p>I love the illustrations in <a href=\"https://tastecooking.com/women-arent-ruining-food/\" rel=\"noopener\">this article</a>. Despite how incredible they look, they don’t demand too much cognitive attention. They introduce brief moments of delight but also suggest that the article itself has something more important to say. Partly, this comes down to the use of transparency, whereas rectangular images capture more negative space and therefore demand more attention (which is fine if that’s the desired effect and images are crucial to the story).</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2880\" height=\"1800\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125405252_4.png?resize=2880%2C1800&#038;ssl=1\" alt=\"\" class=\"wp-image-367379\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125405252_4.png?w=2880&amp;ssl=1 2880w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125405252_4.png?resize=300%2C188&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125405252_4.png?resize=1024%2C640&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125405252_4.png?resize=768%2C480&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125405252_4.png?resize=1536%2C960&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125405252_4.png?resize=2048%2C1280&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>However, it’s important to know that the images aren’t actually transparent at all, but instead are non-transparent JPEGs with the same background color as the content. I’m presuming that’s to keep the size of the images smaller compared to PNGs that support transparency.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"3662\" height=\"2234\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659378344997_ScreenShot2022-08-01at12.25.29PM.png?resize=3662%2C2234&#038;ssl=1\" alt=\"Inspecting an image element in DevTools showing the JPEG images in the source.\" class=\"wp-image-367380\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659378344997_ScreenShot2022-08-01at12.25.29PM.png?w=3662&amp;ssl=1 3662w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659378344997_ScreenShot2022-08-01at12.25.29PM.png?resize=300%2C183&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659378344997_ScreenShot2022-08-01at12.25.29PM.png?resize=1024%2C625&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659378344997_ScreenShot2022-08-01at12.25.29PM.png?resize=768%2C469&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659378344997_ScreenShot2022-08-01at12.25.29PM.png?resize=1536%2C937&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659378344997_ScreenShot2022-08-01at12.25.29PM.png?resize=2048%2C1249&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659378344997_ScreenShot2022-08-01at12.25.29PM.png?w=3000&amp;ssl=1 3000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>The downside to “faking” a transparent background like this is that it would require additional trickery (and maintenance) to support a <a href=\"https://css-tricks.com/a-complete-guide-to-dark-mode-on-the-web/\">dark mode UI</a> if your site happens to offer one. If the illustrations are pretty flat and simple, then SVG might be the way to go instead since it’s small, scalable, and capable of blending into whatever background it’s on.</p>\n\n\n\n<p>But if you’re bound to using raster images and would rather work with PNG files for transparency, you’ll want to look into using <a href=\"https://css-tricks.com/a-guide-to-the-responsive-images-syntax-in-html/\">responsive images</a> and the <a href=\"https://css-tricks.com/native-lazy-loading/\"><code>loading=\"lazy\"</code> attribute</a> for faster loading times.</p>\n\n\n<h3 id=\"put-the-focus-on-the-type-and-semantics\">Put the focus on the type and semantics</h3>\n\n\n<p>You may have very little say over&nbsp;<em>how</em>&nbsp;or&nbsp;<em>where</em>&nbsp;someone reads content on the web these days. Whether the user receives it in an RSS feed, gets it delivered by email, sees it copy-and-pasted from a colleague, finds it on a scraped site, or whatnot, your content might look&nbsp;<em>different</em>&nbsp;than you prefer. You could design what you think is the most gorgeous article in all the land and the user still might&nbsp;<a target=\"_blank\" href=\"https://css-tricks.com/reader-mode-the-button-to-beat/\" rel=\"noreferrer noopener\">smash that Reader Mode button</a>&nbsp;to your dismay.</p>\n\n\n\n<p>That’s ok! The discoverability of content is very much as important as the design of it, and many users have their own ways of discovering content and preferences for what makes a good reading experience.</p>\n\n\n\n<p>But there are reasons why someone would want a Reader Mode. For one, it’s like&nbsp;“not&nbsp;seeing any CSS”&nbsp;at all. By that,&nbsp;I mean&nbsp;<a href=\"https://css-tricks.com/reader-mode-the-button-to-beat/\" target=\"_blank\" rel=\"noreferrer noopener\">Safari’s Reader Mode</a>&nbsp;or&nbsp;<a href=\"https://brave.com/speed-reader/\" target=\"_blank\" rel=\"noreferrer noopener\">Brave SpeedReader</a>, which use machine learning to detect articles. There’s no fetching or executing of CSS, JavaScript, or non-article images, which boosts performance and also blocks ads and tracking.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2880\" height=\"1800\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125432425_5.png?resize=2880%2C1800&#038;ssl=1\" alt=\"Fong-form article viewed with Brave's SpeedReader feature.\" class=\"wp-image-367381\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125432425_5.png?w=2880&amp;ssl=1 2880w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125432425_5.png?resize=300%2C188&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125432425_5.png?resize=1024%2C640&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125432425_5.png?resize=768%2C480&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125432425_5.png?resize=1536%2C960&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_69172BC482E4A61507CBC00C42BDC8B5C2BA73BD5B5CB79986763479C3E54010_1657125432425_5.png?resize=2048%2C1280&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>This sort of&nbsp;<a target=\"_blank\" href=\"https://css-tricks.com/this-page-is-a-truly-naked-brutalist-html-quine/\" rel=\"noreferrer noopener\">“brute</a><a target=\"_blank\" href=\"https://css-tricks.com/this-page-is-a-truly-naked-brutalist-html-quine/\" rel=\"noreferrer noopener\">&nbsp;minimalism”</a>&nbsp;puts the focus on the content rather than the styles. So, you might actually&nbsp;<em>want</em>&nbsp;to embrace a browser’s opinionated reading styles specifically for that purpose.</p>\n\n\n\n<p>The way to do that is not by using CSS, but by paying closer attention to your HTML. Reader modes work best with markup that uses simple, semantic, article-related HTML. You’ve got to do more than&nbsp;simply&nbsp;slapping&nbsp;&lt;article&gt;&nbsp;tags around the article to get the most from it.</p>\n\n\n\n<p>You might just find that a minimal design that emphasizes legibility over slickness is actually a good strategy to use in your site’s design. I’d strongly suggest reading Robin’s post on the&nbsp;<a target=\"_blank\" href=\"https://www.robinrendle.com/notes/the-smallest-css/\" rel=\"noreferrer noopener\">“smallest</a><a target=\"_blank\" href=\"https://www.robinrendle.com/notes/the-smallest-css/\" rel=\"noreferrer noopener\">&nbsp;CSS” for a solid reading experience</a>.</p>\n\n\n<h3 id=\"roundup-of-longform-articles\">Roundup of long-form articles!</h3>\n\n\n<p>I’ve shared a lot of what I think makes for a great reading experience for long-form articles on the web. But seeing is believing and I’ve rounded up a bunch of examples that showcase what we’ve covered.</p>\n\n\n\n<div class=\"wp-block-jetpack-slideshow aligncenter\" data-effect=\"slide\"><div class=\"wp-block-jetpack-slideshow_container swiper-container\"><ul class=\"wp-block-jetpack-slideshow_swiper-wrapper swiper-wrapper\"><li class=\"wp-block-jetpack-slideshow_slide swiper-slide\"><figure><img loading=\"lazy\" width=\"1779\" height=\"2160\" alt=\"\" class=\"wp-block-jetpack-slideshow_image wp-image-367382\" data-id=\"367382\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659379883676_ScreenShot2022-08-01at12.44.00PM.png?resize=1779%2C2160&#038;ssl=1\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659379883676_ScreenShot2022-08-01at12.44.00PM.png?w=1779&amp;ssl=1 1779w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659379883676_ScreenShot2022-08-01at12.44.00PM.png?resize=247%2C300&amp;ssl=1 247w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659379883676_ScreenShot2022-08-01at12.44.00PM.png?resize=843%2C1024&amp;ssl=1 843w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659379883676_ScreenShot2022-08-01at12.44.00PM.png?resize=768%2C932&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659379883676_ScreenShot2022-08-01at12.44.00PM.png?resize=1265%2C1536&amp;ssl=1 1265w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659379883676_ScreenShot2022-08-01at12.44.00PM.png?resize=1687%2C2048&amp;ssl=1 1687w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption class=\"wp-block-jetpack-slideshow_caption gallery-caption\">Polygon uses a strong, provacative visual to hook readers into the ain content. Notice how the drop cap, larger font size, and increased line height make this feel like a page you can sit back with and relax.</figcaption></figure></li><li class=\"wp-block-jetpack-slideshow_slide swiper-slide\"><figure><img loading=\"lazy\" width=\"1779\" height=\"2160\" alt=\"\" class=\"wp-block-jetpack-slideshow_image wp-image-367395\" data-id=\"367395\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659380220626_ScreenShot2022-08-01at12.47.09PM-1.png?resize=1779%2C2160&#038;ssl=1\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659380220626_ScreenShot2022-08-01at12.47.09PM-1.png?w=1779&amp;ssl=1 1779w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659380220626_ScreenShot2022-08-01at12.47.09PM-1.png?resize=247%2C300&amp;ssl=1 247w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659380220626_ScreenShot2022-08-01at12.47.09PM-1.png?resize=843%2C1024&amp;ssl=1 843w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659380220626_ScreenShot2022-08-01at12.47.09PM-1.png?resize=768%2C932&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659380220626_ScreenShot2022-08-01at12.47.09PM-1.png?resize=1265%2C1536&amp;ssl=1 1265w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659380220626_ScreenShot2022-08-01at12.47.09PM-1.png?resize=1687%2C2048&amp;ssl=1 1687w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption class=\"wp-block-jetpack-slideshow_caption gallery-caption\">The TASTE website uses transparent images that blend into the background color of the content. There’s plenty of space between elements and bold accents — like thick borders and a heavy drop cap — pull the reader’s eye down the page.</figcaption></figure></li><li class=\"wp-block-jetpack-slideshow_slide swiper-slide\"><figure><img loading=\"lazy\" width=\"1779\" height=\"2160\" alt=\"\" class=\"wp-block-jetpack-slideshow_image wp-image-367385\" data-id=\"367385\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659380247983_ScreenShot2022-08-01at12.44.40PM-1.png?resize=1779%2C2160&#038;ssl=1\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659380247983_ScreenShot2022-08-01at12.44.40PM-1.png?w=1779&amp;ssl=1 1779w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659380247983_ScreenShot2022-08-01at12.44.40PM-1.png?resize=247%2C300&amp;ssl=1 247w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659380247983_ScreenShot2022-08-01at12.44.40PM-1.png?resize=843%2C1024&amp;ssl=1 843w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659380247983_ScreenShot2022-08-01at12.44.40PM-1.png?resize=768%2C932&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659380247983_ScreenShot2022-08-01at12.44.40PM-1.png?resize=1265%2C1536&amp;ssl=1 1265w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/s_8B730484E143550BCB8F0F59E6B2D68F390D4B08B7A19C0B75094011BF998518_1659380247983_ScreenShot2022-08-01at12.44.40PM-1.png?resize=1687%2C2048&amp;ssl=1 1687w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption class=\"wp-block-jetpack-slideshow_caption gallery-caption\">The Outline is a prime example of minimalism. Notice how something as subtle as a squiggly horizontal rule can be an eye-catching embellishment when there are fewer things competing for attention.</figcaption></figure></li><li class=\"wp-block-jetpack-slideshow_slide swiper-slide\"><figure><img loading=\"lazy\" width=\"3322\" height=\"4050\" alt=\"\" class=\"wp-block-jetpack-slideshow_image wp-image-367386\" data-id=\"367386\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/dropbox-work-in-progress.png?resize=3322%2C4050&#038;ssl=1\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/dropbox-work-in-progress.png?w=3322&amp;ssl=1 3322w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/dropbox-work-in-progress.png?resize=246%2C300&amp;ssl=1 246w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/dropbox-work-in-progress.png?resize=840%2C1024&amp;ssl=1 840w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/dropbox-work-in-progress.png?resize=768%2C936&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/dropbox-work-in-progress.png?resize=1260%2C1536&amp;ssl=1 1260w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/dropbox-work-in-progress.png?resize=1680%2C2048&amp;ssl=1 1680w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/dropbox-work-in-progress.png?w=2000&amp;ssl=1 2000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/dropbox-work-in-progress.png?w=3000&amp;ssl=1 3000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption class=\"wp-block-jetpack-slideshow_caption gallery-caption\">The brutalist style of the Dropbox blog is probably a controversial one. The colors, fonts, and use of space are all over the place, and the content being floated to the right just feels unfamiliar. But does it break any design ‘rules’? Nope. I could grow to like it in time, especially in a milder form.</figcaption></figure></li><li class=\"wp-block-jetpack-slideshow_slide swiper-slide\"><figure><img loading=\"lazy\" width=\"3234\" height=\"3962\" alt=\"\" class=\"wp-block-jetpack-slideshow_image wp-image-367394\" data-id=\"367394\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/beardbrand.png?resize=3234%2C3962&#038;ssl=1\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/beardbrand.png?w=3234&amp;ssl=1 3234w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/beardbrand.png?resize=245%2C300&amp;ssl=1 245w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/beardbrand.png?resize=836%2C1024&amp;ssl=1 836w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/beardbrand.png?resize=768%2C941&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/beardbrand.png?resize=1254%2C1536&amp;ssl=1 1254w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/beardbrand.png?resize=1672%2C2048&amp;ssl=1 1672w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/beardbrand.png?w=2000&amp;ssl=1 2000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/beardbrand.png?w=3000&amp;ssl=1 3000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption class=\"wp-block-jetpack-slideshow_caption gallery-caption\">Urban Beardsman’s design is extremely linear. As somebody that has difficulty concentrating and is easily distracted by sidebars, in-article CTA boxes, and even blockquotes, I very much enjoy how easy it is to read this blog like a book. The perfect example of &#8220;less is more.&#8221;</figcaption></figure></li><li class=\"wp-block-jetpack-slideshow_slide swiper-slide\"><figure><img loading=\"lazy\" width=\"3234\" height=\"3962\" alt=\"\" class=\"wp-block-jetpack-slideshow_image wp-image-367393\" data-id=\"367393\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/gosquared-1.png?resize=3234%2C3962&#038;ssl=1\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/gosquared-1.png?w=3234&amp;ssl=1 3234w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/gosquared-1.png?resize=245%2C300&amp;ssl=1 245w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/gosquared-1.png?resize=836%2C1024&amp;ssl=1 836w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/gosquared-1.png?resize=768%2C941&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/gosquared-1.png?resize=1254%2C1536&amp;ssl=1 1254w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/gosquared-1.png?resize=1672%2C2048&amp;ssl=1 1672w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/gosquared-1.png?w=2000&amp;ssl=1 2000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/gosquared-1.png?w=3000&amp;ssl=1 3000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption class=\"wp-block-jetpack-slideshow_caption gallery-caption\">There’s nothing unique about the GoSquared blog, but it managed to include pretty much all of the things we discussed in the article — a better underline design, seamless images, and some very readable typography. Quite impressive.</figcaption></figure></li><li class=\"wp-block-jetpack-slideshow_slide swiper-slide\"><figure><img loading=\"lazy\" width=\"3322\" height=\"4050\" alt=\"\" class=\"wp-block-jetpack-slideshow_image wp-image-367391\" data-id=\"367391\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/spi-1.png?resize=3322%2C4050&#038;ssl=1\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/spi-1.png?w=3322&amp;ssl=1 3322w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/spi-1.png?resize=246%2C300&amp;ssl=1 246w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/spi-1.png?resize=840%2C1024&amp;ssl=1 840w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/spi-1.png?resize=768%2C936&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/spi-1.png?resize=1260%2C1536&amp;ssl=1 1260w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/spi-1.png?resize=1680%2C2048&amp;ssl=1 1680w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/spi-1.png?w=2000&amp;ssl=1 2000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/spi-1.png?w=3000&amp;ssl=1 3000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption class=\"wp-block-jetpack-slideshow_caption gallery-caption\">The Smart Passive Income blog proves how far you can get just by choosing a legible font and using readable font sizes, line heights, letter spacings, and paragraph spacings.</figcaption></figure></li><li class=\"wp-block-jetpack-slideshow_slide swiper-slide\"><figure><img loading=\"lazy\" width=\"3322\" height=\"4050\" alt=\"\" class=\"wp-block-jetpack-slideshow_image wp-image-367390\" data-id=\"367390\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/little-fat-bot-recipes-1.png?resize=3322%2C4050&#038;ssl=1\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/little-fat-bot-recipes-1.png?w=3322&amp;ssl=1 3322w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/little-fat-bot-recipes-1.png?resize=246%2C300&amp;ssl=1 246w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/little-fat-bot-recipes-1.png?resize=840%2C1024&amp;ssl=1 840w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/little-fat-bot-recipes-1.png?resize=768%2C936&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/little-fat-bot-recipes-1.png?resize=1260%2C1536&amp;ssl=1 1260w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/little-fat-bot-recipes-1.png?resize=1680%2C2048&amp;ssl=1 1680w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/little-fat-bot-recipes-1.png?w=2000&amp;ssl=1 2000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/little-fat-bot-recipes-1.png?w=3000&amp;ssl=1 3000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption class=\"wp-block-jetpack-slideshow_caption gallery-caption\">Recipe pages are consistently sucky, but not Little Fat Boy. The lack of sameness throughout the page makes it easy jump to different parts of the recipe without getting lost. Plus, the ingredients are pinned to the top-right for your convenience.</figcaption></figure></li></ul><a class=\"wp-block-jetpack-slideshow_button-prev swiper-button-prev swiper-button-white\" role=\"button\"></a><a class=\"wp-block-jetpack-slideshow_button-next swiper-button-next swiper-button-white\" role=\"button\"></a><a aria-label=\"Pause Slideshow\" class=\"wp-block-jetpack-slideshow_button-pause\" role=\"button\"></a><div class=\"wp-block-jetpack-slideshow_pagination swiper-pagination swiper-pagination-white\"></div></div></div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/designing-for-long-form-articles/\">Designing for Long-Form Articles</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "category": "Article",
          "link": "https://css-tricks.com/designing-for-long-form-articles/",
          "creator": "Daniel Schwarz",
          "pubDate": "Wed, 10 Aug 2022 14:30:01 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "css-tricks",
          "feed": "css tricks",
          "read": true,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "7044b82d5020055c20c74b55355c711e",
          "highlights": []
        },
        {
          "title": "Committing CSS Crimes",
          "description": "<p>The time for CSS-Tricks is over. Now is the time for CSS Crimes!</p>\n<p>In this current landscape of content service providers, users are often limited to expressing themselves in text, links, and images. Sanitization rules tend to strip out HTML, &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/committing-css-crimes/\">Committing CSS Crimes</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "content": "\n<p>The time for CSS-Tricks is over. Now is the time for CSS Crimes!</p>\n\n\n\n<p>In this current landscape of content service providers, users are often limited to expressing themselves in text, links, and images. Sanitization rules tend to strip out HTML, JavaScript, and various attributes.</p>\n\n\n\n<p>Social media service <a href=\"https://cohost.org/\" rel=\"noopener\">Cohost</a> allows users to have greater freedom with markup and inline styles than we may be typically used to. Some users have taken advantage of this freedom to commit CSS Crimes! It has resulted in creative recreations of familiar interfaces and interactive games by using properties in unconventional ways.</p>\n\n\n\n<span id=\"more-367369\"></span>\n\n\n\n<p><a href=\"https://cohost.org/blackle/post/42994-div-style-pointer\" rel=\"noopener\">Blackle Mori created a contraption</a> where pulling a handle slowly turns a series of gears, pulleys, and chains. Eventually an aperture opens to reveal the site&#8217;s mascot (&#8220;eggbug&#8221;) and the proclamation &#8220;Good Job!&#8221;. I have stared at this in Developer Tools and it is an amazing combination of <code>grid</code>, <code>resize</code>, <code>transform</code>, and <code>calc()</code>. I ended up adding a <code>border</code> to all <code>&lt;div&gt;</code>s to try and get a better understanding of how each individual element moved.</p>\n\n\n\n<ul><li>Several other CSS Crimes use <code>resize</code> to allow viewers rudimentary click and drag functionality.<ul><li><a href=\"https://cohost.org/blackle/post/31913-tutorial-how-to-mak\" rel=\"noopener\">Blackle Mori explains this technique here!</a></li></ul></li><li>Other CSS Crimes create limited interaction through <a href=\"https://css-tricks.com/quick-reminder-that-details-summary-is-the-easiest-way-ever-to-make-an-accordion/\"><code>&lt;details&gt;</code> and <code>&lt;summary&gt;</code></a>.<ul><li><a href=\"https://cohost.org/blackle/post/31694-tutorial-how-to-mak\" rel=\"noopener\">Blackle Mori explains this technique here!</a></li></ul></li><li>Some members of the community have taken Andrew Siller&#8217;s technique from <a href=\"https://www.youtube.com/watch?v=GJa6eD7tFbY\" rel=\"noopener\">&#8220;Night of the Living GIF: Making Interactive Multiplayer Experiences&#8221;</a> to create a multiplayer Pokemon experience!</li></ul>\n\n\n\n<p>There have been situations in the past where I have been restricted from using the full toolkit of HTML, JavaScript, and CSS. There have been many instances of using decorative <a href=\"https://css-tricks.com/the-shapes-of-css/\">CSS shapes</a> to get around images. I have used <code>:hover</code> as a workaround for <code>mouseenter</code> and <code>mouseleave</code>. I have used <a href=\"https://css-tricks.com/the-checkbox-hack/\"><code>input:checked</code> as a sibling selector</a> for toggling.</p>\n\n\n\n<p>While CSS Crimes are probably not something you would want to employ on a regular basis, we should embrace experiments within constraints that can foster creative solutions.</p>\n<p><a href=\"https://www.theverge.com/2022/8/3/23288689/cohost-social-media-css-games\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/committing-css-crimes/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/committing-css-crimes/\">Committing CSS Crimes</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "category": "Link",
          "link": "https://css-tricks.com/committing-css-crimes/",
          "creator": "Bradley Kouchi",
          "pubDate": "Tue, 09 Aug 2022 13:01:44 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "css-tricks",
          "feed": "css tricks",
          "read": true,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "1f7e8511ecef89ff257b6c57433abd7f",
          "highlights": []
        },
        {
          "title": "Zooming Images in a Grid Layout",
          "description": "<p>Creating a grid of images is easy, thanks to CSS Grid. But making the grid do fancy things <em>after</em> the images have been placed can be tricky to pull off.</p>\n<p>Say you want to add some fancy hover effect to &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/zooming-images-in-a-grid-layout/\">Zooming Images in a Grid Layout</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "content": "\n<p>Creating a grid of images is easy, thanks to CSS Grid. But making the grid do fancy things <em>after</em> the images have been placed can be tricky to pull off.</p>\n\n\n\n<p>Say you want to add some fancy hover effect to the images where they grow and zoom beyond the rows and columns where they sit? We can do that!</p>\n\n\n\n<span id=\"more-367204\"></span>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_MWVyaMe\" src=\"//codepen.io/anon/embed/MWVyaMe?height=650&amp;theme-id=1&amp;slug-hash=MWVyaMe&amp;default-tab=result\" height=\"650\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed MWVyaMe\" title=\"CodePen Embed MWVyaMe\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Cool, right? If you check the code, you won’t find any JavaScript, complex selectors, or even <a href=\"https://css-tricks.com/magic-numbers-in-css/\">magic numbers</a>. And this is only one example among many we will explore!</p>\n\n\n<h3 id=\"building-the-grid\">Building the grid</h3>\n\n\n<p>The HTML code to create the grid is as simple as a list of images within a container. We don’t need more than that.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"gallery\">\n  &lt;img>\n  &lt;img>\n  &lt;img>\n  &lt;!-- etc. -->\n&lt;/div></code></pre>\n\n\n\n<p>For the CSS, we first start by setting the grid using the following:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery {\n  --s: 150px; /* controls the size */\n  --g: 10px;  /* controls the gap */\n\n  display: grid;\n  gap: var(--g);\n  width: calc(3*var(--s) + 2*var(--g)); /* 3 times the size plus 2 times the gap */\n  aspect-ratio: 1;\n  grid-template-columns: repeat(3, auto);\n}</code></pre>\n\n\n\n<p>In short, we have two variables, one that controls the size of the images and one that sets the size of the gap between images. <a href=\"https://css-tricks.com/almanac/properties/a/aspect-ratio/\"><code>aspect-ratio</code></a> helps keep things in proportion.</p>\n\n\n\n<p>You might be wondering why we are only defining three columns but no rows. No, I didn’t forget the rows — we just don’t need to explicitly set them. CSS Grid is capable of automatically placing items on <a href=\"https://css-tricks.com/difference-explicit-implicit-grids/\">implicit rows and columns</a>, meaning we get as many rows as needed to any number of images we throw at it. We can explicitly define the rows instead but we need to add <code>grid-auto-flow: column</code> to make sure the browser will create the needed columns for us.</p>\n\n\n\n<p>Here is an example to illustrate both cases. The difference is that one flows in a <code>row</code> direction an the other in a <code>column</code> direction.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_GRxZVyL/eb5ac7548fd3e32099046f0b7ee5d402\" src=\"//codepen.io/anon/embed/GRxZVyL/eb5ac7548fd3e32099046f0b7ee5d402?height=375&amp;theme-id=1&amp;slug-hash=GRxZVyL/eb5ac7548fd3e32099046f0b7ee5d402&amp;default-tab=result\" height=\"375\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed GRxZVyL/eb5ac7548fd3e32099046f0b7ee5d402\" title=\"CodePen Embed GRxZVyL/eb5ac7548fd3e32099046f0b7ee5d402\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p class=\"is-style-explanation\">Check out <a href=\"https://css-tricks.com/exploring-css-grids-implicit-grid-and-auto-placement-powers\">this other article I wrote</a> for more about the implicit grids and the auto-placement algorithm.</p>\n\n\n\n<p>Now that we have our grid, it’s time to style the images:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery > img {\n  width: 0;\n  height: 0;\n  min-height: 100%;\n  min-width: 100%;\n  object-fit: cover;\n}</code></pre>\n\n\n\n<p>The hover effect we’re making relies on this CSS. It probably looks weird to you that we’re making images that have both no width or height but have a minimum width and height of 100%. But you will see that it’s a pretty neat trick for what we are trying to achieve.</p>\n\n\n\n<p>What I’m doing here is telling the browser that the images need to have <code>0</code> width and height but also need to have a minimum height equal to <code>100%</code>… but <code>100%</code> of what? When using percentages, the value is <a href=\"https://css-tricks.com/its-all-relative/\">relative to something else</a>. In this case, our image is placed inside a <a href=\"https://www.w3.org/TR/css-grid-1/#grid-track-concept\" rel=\"noopener\">grid cell</a> and we need to know that size to know what’s <code>100%</code> is relative to.</p>\n\n\n\n<p>The browser will first ignore <code>min-height: 100%</code> to calculate the size of the grid cells, but it will use the <code>height: 0</code> in its calculation. That means our images will not contribute to the size of the grid cells… because they technically have no physical size. This will result in three equal columns and rows that are based on the size of the grid (which we defined on the <code>.gallery</code>’s width and <code>aspect-ratio</code>). The height of each grid cell is nothing but the variable <code>--s</code> we defined (same for the width).</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"683\" height=\"543\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_01F8E5AC73A410E2BD248A1E8BF44B1521B06E917569E7B737C2E757E4896704_1657396789143_image.png?resize=683%2C543&#038;ssl=1\" alt=\"\" class=\"wp-image-367205\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_01F8E5AC73A410E2BD248A1E8BF44B1521B06E917569E7B737C2E757E4896704_1657396789143_image.png?w=683&amp;ssl=1 683w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_01F8E5AC73A410E2BD248A1E8BF44B1521B06E917569E7B737C2E757E4896704_1657396789143_image.png?resize=300%2C239&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Now that we have the dimensions of our grid’s cells, the browser will use it with <code>min-height: 100%</code> (and <code>min-width: 100%</code>) which will force the images to completely fill the space of each grid cell. The whole thing may look a bit confusing but the main idea is to make sure that the grid defines the size of the images rather than the other way around. I don’t want the image to define the size of the grid and you will understand why after adding the hover effect.</p>\n\n\n<h3 id=\"creating-the-hover-effect\">Creating the hover effect</h3>\n\n\n<p>What we need to do is increase the scale of the images when they’re hovered. We can do that by adjusting an image’s <code>width</code> and <code>height</code> on <code>:hover</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery {\n  --f: 1.5; /* controls the scale factor */\n}\n\n.gallery img:hover{\n  width:  calc(var(--s) * var(--f));\n  height: calc(var(--s) * var(--f));\n}</code></pre>\n\n\n\n<p>I added a new custom variable, <code>--f</code>, to the mix as a scale factor to control the size on hover. Notice how I’m multiplying the size variable, <code>--s</code>, by it to calculate the new image size.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>But you said that the image size needs to be 0. What is going on? I am lost&#8230;</p></blockquote>\n\n\n\n<p>What I said is still true but I am making an exception for the hovered image. I am telling the browser that only one image will have a size that’s not equal to zero — so it will contribute to the dimension of the grid — while all the others remain equal to <code>0</code>.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"850\" height=\"405\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_01F8E5AC73A410E2BD248A1E8BF44B1521B06E917569E7B737C2E757E4896704_1657399681779_image.png?resize=850%2C405&#038;ssl=1\" alt=\"\" class=\"wp-image-367206\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_01F8E5AC73A410E2BD248A1E8BF44B1521B06E917569E7B737C2E757E4896704_1657399681779_image.png?w=850&amp;ssl=1 850w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_01F8E5AC73A410E2BD248A1E8BF44B1521B06E917569E7B737C2E757E4896704_1657399681779_image.png?resize=300%2C143&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_01F8E5AC73A410E2BD248A1E8BF44B1521B06E917569E7B737C2E757E4896704_1657399681779_image.png?resize=768%2C366&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>The left side shows the grid in its natural state without any hovered images, which is what the right side is showing. All the grid cells on the left side are equal in size since all the images have no physical dimensions.</p>\n\n\n\n<p>On the right side, the second image in the first row is hovered, which gives it dimensions that affect the grid cell’s size. The browser will make that specific grid cell bigger on hover, which contributes to the overall size. And since the size of the whole grid is set (because we set a fixed <code>width</code> on the <code>.gallery</code>), the other grid cells will logically respond by becoming smaller in order to keep the <code>.gallery</code>‘s overall size in tact.</p>\n\n\n\n<p>That’s our zoom effect in action! By increasing the size of only one image we affect the whole grid configuration, and we said before that the grid defines the size of the images so that each image stretches inside its grid cell to fill all the space.</p>\n\n\n\n<p>To this, we add a touch of <code>transition</code> and use <code>object-fit</code> to avoid image distortion and the illusion is perfect!</p>\n\n\n\n<p>I know that the logic behind the trick is not easy to grasp. Don’t worry if you don’t fully understand it. The most important is to understand the structure of the code used and how to modify it to get more variations. That’s what we will do next!</p>\n\n\n<h3 id=\"adding-more-images\">Adding more images</h3>\n\n\n<p>We created a 3×3 grid to explain the main trick, but you have probably guessed that we there’d no need to stop there. We can make the number of columns and rows variables and add as many images as we want.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_abYNPaG/ad9882af8ae5e2661895e62b63b0249f\" src=\"//codepen.io/anon/embed/abYNPaG/ad9882af8ae5e2661895e62b63b0249f?height=750&amp;theme-id=1&amp;slug-hash=abYNPaG/ad9882af8ae5e2661895e62b63b0249f&amp;default-tab=result\" height=\"750\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed abYNPaG/ad9882af8ae5e2661895e62b63b0249f\" title=\"CodePen Embed abYNPaG/ad9882af8ae5e2661895e62b63b0249f\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery {\n  --n: 3; /* number of rows*/\n  --m: 4; /* number of columns */\n  --s: 150px; /* control the size */\n  --g: 10px;  /* control the gap */\n  --f: 1.5;   /* control the scale factor */\n\n  display: grid;\n  gap: var(--g);\n  width:  calc(var(--m)*var(--s) + (var(--m) - 1)*var(--g));\n  height: calc(var(--n)*var(--s) + (var(--n) - 1)*var(--g));\n  grid-template-columns: repeat(var(--m),auto);\n}</code></pre>\n\n\n\n<p>We have two new variables for the number of rows and columns. Then we simply define the width and height of our grid using them. Same for <code>grid-template-columns</code> which uses the <code>--m</code> variable. And just like before, we don’t need to explicitly define the rows since the CSS Grid’s auto-placement feature will do the job for us no matter how many image elements we’re using.</p>\n\n\n\n<p>Why not different values for the width and height? We can do that:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ExEKGGL/4ebfa4c36fcd988c96fd3ca404a5587f\" src=\"//codepen.io/anon/embed/ExEKGGL/4ebfa4c36fcd988c96fd3ca404a5587f?height=600&amp;theme-id=1&amp;slug-hash=ExEKGGL/4ebfa4c36fcd988c96fd3ca404a5587f&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ExEKGGL/4ebfa4c36fcd988c96fd3ca404a5587f\" title=\"CodePen Embed ExEKGGL/4ebfa4c36fcd988c96fd3ca404a5587f\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery {\n  --n: 3; /* number of rows*/\n  --m: 4; /* number of columns */\n  --h: 120px; /* control the height */\n  --w: 150px; /* control the width */\n  --g: 10px;  /* control the gap */\n  --f: 1.5;   /* control the scale factor */\n\n  display: grid;\n  gap: var(--g);\n  width:  calc(var(--m)*var(--w) + (var(--m) - 1)*var(--g));\n  height: calc(var(--n)*var(--h) + (var(--n) - 1)*var(--g));\n  grid-template-columns: repeat(var(--m),auto);\n}\n\n.gallery img:hover{\n  width:  calc(var(--w)*var(--f));\n  height: calc(var(--h)*var(--f));\n}</code></pre>\n\n\n\n<p>We replace <code>--s</code> with two variables, one for the width, <code>--w</code>, and another one for the height, <code>--h</code>. Then we adjust everything else accordingly.</p>\n\n\n\n<p>So, we started with a grid with a fixed size and number of elements, but then we made a new set of variables to get any configuration we want. All we have to do is to add as many images as we want and adjust the CSS variables accordingly. The combinations are limitless!</p>\n\n\n<h3 id=\"a-fullscreen-gallery-of-images\">A full-screen gallery of images</h3>\n\n\n<p>What about a full-screen version? Yes, that’s also possible. All we need is to know what values we need to assign to our variables. If we want <code>N</code> rows of images and we want our grid to be full screen, we first need to solve for a height of <code>100vh</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">var(--n) * var(--h) + (var(--n) - 1) * var(--g) = 100vh</code></pre>\n\n\n\n<p>Same logic for the width, but using <code>vw</code> instead of <code>vh</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">var(--m) * var(--w) + (var(--m) - 1) * var(--g) = 100vw</code></pre>\n\n\n\n<p>We do the math to get:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">--w: (100vw - (var(--m) - 1) * var(--g)) / var(--m)\n--h: (100vh - (var(--n) - 1) * var(--g)) / var(--n)</code></pre>\n\n\n\n<p>Done!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_eYMZbwy/25fa03e17ac76431733157d58e026bfb\" src=\"//codepen.io/anon/embed/eYMZbwy/25fa03e17ac76431733157d58e026bfb?height=650&amp;theme-id=1&amp;slug-hash=eYMZbwy/25fa03e17ac76431733157d58e026bfb&amp;default-tab=result\" height=\"650\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed eYMZbwy/25fa03e17ac76431733157d58e026bfb\" title=\"CodePen Embed eYMZbwy/25fa03e17ac76431733157d58e026bfb\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>It’s the same exact HTML but with some updated variables that change the grid’s sizing and behavior.</p>\n\n\n\n<p>Note that I have omitted the formula we previously set on the <code>.gallery</code>‘s <code>width</code> and <code>height</code> and replaced them with <code>100vw</code> and <code>100vh</code>, respectively. The formula will give us the same result but since we know what value we want, we can ditch all that added complexity.</p>\n\n\n\n<p>We can also simplify the <code>--h</code> and <code>--w</code> by removing the gap from the equation in favor of this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">--h: calc(100vh / var(--n)); /* Viewport height divided by number of rows */\n--w: calc(100vw / var(--m)); /* Viewport width divided by number of columns */</code></pre>\n\n\n\n<p>This will make the hovered image grow a bit more than the previous example, but it is no big deal since we can control the scale with the <code>--f</code> variable we’re using as a multiplier.</p>\n\n\n\n<p>And since the variables are used in one place we can still simplify the code by removing them altogether:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_eYMZxYV/c8d3ee9c92f1cf6d8487cd6a0c8619e3\" src=\"//codepen.io/anon/embed/eYMZxYV/c8d3ee9c92f1cf6d8487cd6a0c8619e3?height=650&amp;theme-id=1&amp;slug-hash=eYMZxYV/c8d3ee9c92f1cf6d8487cd6a0c8619e3&amp;default-tab=result\" height=\"650\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed eYMZxYV/c8d3ee9c92f1cf6d8487cd6a0c8619e3\" title=\"CodePen Embed eYMZxYV/c8d3ee9c92f1cf6d8487cd6a0c8619e3\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>It’s important to note this optimization applies only to the full-screen example and not to the examples we’ve covered. This example is a particular case where we can make the code lighter by removing some of the complex calculation work we needed in the other examples.</p>\n\n\n\n<p>We actually have everything we need to create the popular pattern of expanding panels:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_WNzxeOO/fae9ee2f379890e26459f66cff344cee\" src=\"//codepen.io/anon/embed/WNzxeOO/fae9ee2f379890e26459f66cff344cee?height=450&amp;theme-id=1&amp;slug-hash=WNzxeOO/fae9ee2f379890e26459f66cff344cee&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed WNzxeOO/fae9ee2f379890e26459f66cff344cee\" title=\"CodePen Embed WNzxeOO/fae9ee2f379890e26459f66cff344cee\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 id=\"lets-dig-even-deeper\">Let’s dig even deeper</h3>\n\n\n<p>Did you notice that our scale factor can be less than <code>1</code>? We can define the size of the hovered image to be smaller than <code>--h</code> or <code>--w</code> but the image gets bigger on hover.</p>\n\n\n\n<p>The initial grid cell size is equal to <code>--w</code> and <code>--h</code>, so why do a smaller values make the grid cell <em>bigger</em>? Shouldn’t the cell get <em>smaller</em>, or at least maintain its initial size? And what is the final size of the grid cell?</p>\n\n\n\n<p>We need to dig deeper into how the CSS Grid algorithm calculates the size of the grid cells. And this is involves understanding CSS Grid’s default <strong>stretch alignment</strong>.</p>\n\n\n\n<p>Here’s an example to understand the logic.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_YzaWKYX/e4ecf08477c67eb6406a99b10653ee0e\" src=\"//codepen.io/anon/embed/YzaWKYX/e4ecf08477c67eb6406a99b10653ee0e?height=350&amp;theme-id=1&amp;slug-hash=YzaWKYX/e4ecf08477c67eb6406a99b10653ee0e&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed YzaWKYX/e4ecf08477c67eb6406a99b10653ee0e\" title=\"CodePen Embed YzaWKYX/e4ecf08477c67eb6406a99b10653ee0e\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>On the left side of the demo, I defined a two-column with <code>auto</code> width. We get the intuitive result: two equal columns (and two equal grid cells). But the grid I set up on the right side of the demo, where I am updating the alignment using <code>place-content: start</code>, appears to have nothing.</p>\n\n\n\n<p>DevTools helps show us what’s really happening in both cases:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"574\" height=\"269\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_01F8E5AC73A410E2BD248A1E8BF44B1521B06E917569E7B737C2E757E4896704_1657403436182_image-1.png?resize=574%2C269&#038;ssl=1\" alt=\"\" class=\"wp-image-367208\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_01F8E5AC73A410E2BD248A1E8BF44B1521B06E917569E7B737C2E757E4896704_1657403436182_image-1.png?w=574&amp;ssl=1 574w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_01F8E5AC73A410E2BD248A1E8BF44B1521B06E917569E7B737C2E757E4896704_1657403436182_image-1.png?resize=300%2C141&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>In the second grid, we have two columns, but their widths equal zero, so we get two grid cells that are collapsed at the top-left corner of the grid container. This is <em>not</em> a bug but the logical result of the grid’s alignment. When we size a column (or row) with <code>auto</code>, it means that its content dictates its size — but we have an empty <code>div</code> with no content to make room for.</p>\n\n\n\n<p>But since <code>stretch</code> is the default alignment and we have enough space inside our grid, the browser will stretch both grid cells equally to cover all that area. That’s how the grid on the left winds up with two equal columns.</p>\n\n\n\n<p>From <a href=\"https://www.w3.org/TR/css-grid-1/#grid-align\" rel=\"noopener\">the specification</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note that certain values of <a href=\"https://www.w3.org/TR/css-align-3/#propdef-justify-content\" rel=\"noopener\"><code>justify-content</code></a> and <a href=\"https://www.w3.org/TR/css-align-3/#propdef-align-content\" rel=\"noopener\"><code>align-content</code></a> can cause the tracks to be spaced apart (<a href=\"https://www.w3.org/TR/css-align-3/#valdef-align-content-space-around\" rel=\"noopener\"><code>space-around</code></a>, <a href=\"https://www.w3.org/TR/css-align-3/#valdef-align-content-space-between\" rel=\"noopener\"><code>space-between</code></a>, <a href=\"https://www.w3.org/TR/css-align-3/#valdef-align-content-space-evenly\" rel=\"noopener\"><code>space-evenly</code></a>) or to be resized (<a href=\"https://www.w3.org/TR/css-align-3/#valdef-align-content-stretch\" rel=\"noopener\"><code>stretch</code></a>).</p></blockquote>\n\n\n\n<p>Note the “to be resized” which is the key here. In the last example, I used <code>place-content</code> which is the shorthand for <code>justify-content</code> and <code>align-content</code></p>\n\n\n\n<p>And this is buried somewhere in <a href=\"https://www.w3.org/TR/css-grid-1/#algo-stretch\" rel=\"noopener\">the Grid Sizing algorithm</a> specs:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>This step expands tracks that have an <a href=\"https://www.w3.org/TR/css-grid-1/#valdef-grid-template-columns-auto\" rel=\"noopener\">auto</a> <a href=\"https://www.w3.org/TR/css-grid-1/#max-track-sizing-function\" rel=\"noopener\">max track sizing function</a> by dividing any remaining positive, <a href=\"https://www.w3.org/TR/css-sizing-3/#definite\" rel=\"noopener\">definite</a> <a href=\"https://www.w3.org/TR/css-grid-1/#free-space\" rel=\"noopener\">free space</a> equally amongst them. If the free space is <a href=\"https://www.w3.org/TR/css-sizing-3/#indefinite\" rel=\"noopener\">indefinite</a>, but the <a href=\"https://www.w3.org/TR/css-grid-1/#grid-container\" rel=\"noopener\">grid container</a> has a definite <a href=\"https://www.w3.org/TR/CSS2/visudet.html#propdef-min-width\" rel=\"noopener\">min-width/height</a>, use that size to calculate the free space for this step instead.</p></blockquote>\n\n\n\n<p>“Equally&#8221; explains why we wind up with equal grid cells, but it applies to “the free space” which is very important.</p>\n\n\n\n<p>Let’s take the previous example and add content to one of the <code>div</code>s:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_YzaWKLy/fafb5ed1e0f73bb07f99bbd8feca8c1a\" src=\"//codepen.io/anon/embed/YzaWKLy/fafb5ed1e0f73bb07f99bbd8feca8c1a?height=350&amp;theme-id=1&amp;slug-hash=YzaWKLy/fafb5ed1e0f73bb07f99bbd8feca8c1a&amp;default-tab=result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed YzaWKLy/fafb5ed1e0f73bb07f99bbd8feca8c1a\" title=\"CodePen Embed YzaWKLy/fafb5ed1e0f73bb07f99bbd8feca8c1a\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>We added a square <code>50px</code> image. Here’s an illustration of how each grid in our example responds to that image:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"599\" height=\"280\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_01F8E5AC73A410E2BD248A1E8BF44B1521B06E917569E7B737C2E757E4896704_1657404278772_image.png?resize=599%2C280&#038;ssl=1\" alt=\"\" class=\"wp-image-367209\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_01F8E5AC73A410E2BD248A1E8BF44B1521B06E917569E7B737C2E757E4896704_1657404278772_image.png?w=599&amp;ssl=1 599w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_01F8E5AC73A410E2BD248A1E8BF44B1521B06E917569E7B737C2E757E4896704_1657404278772_image.png?resize=300%2C140&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>In the first case, we can see that the first cell (in red) is bigger than the second one (in blue). In the second case, the size of the first cell changes to fit the physical size of the image while the second cell remains with no dimensions. The free space is divided equally, but the first cell has more content inside which makes it bigger.</p>\n\n\n\n<p>This is the math to figure out our free space:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">(grid width) - (gap) - (image width) = (free space)\n200px - 5px - 50px = 145px </code></pre>\n\n\n\n<p>Divided by two — the number of columns — we get a width of <code>72.5px</code> for each column. But we add the size of the image, <code>50px</code>, to the first column which leaves us with one column at <code>122.5px</code> and the second one equal to <code>72.5px</code>.</p>\n\n\n\n<p>The same logic applies to our grid of images. All the images have a size equal to <code>0</code> (no content) while the hovered image contributes to size — even if it’s just <code>1px</code> — making its grid cell bigger than the others. For this reason, the scale factor can be any value bigger than <code>0</code> even decimals between <code>0</code> and <code>1</code>.</p>\n\n\n\n<p>To get the final width of the grid cells, we do the same calculation to get the following:</p>\n\n\n\n<pre rel=\"\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">(container width) - (sum of all gaps) - (hovered image width) = (free space)</code></pre>\n\n\n\n<p>The width of container is defined by:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">var(--m)*var(--w) + (var(--m) - 1)*var(--g)</code></pre>\n\n\n\n<p>…and all the gaps are equal to:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">(var(--m) - 1)*var(--g)</code></pre>\n\n\n\n<p>…and for the hovered image we have:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">var(--w)*var(--f)</code></pre>\n\n\n\n<p>We can calculate all of that with our variables:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">var(--m)*var(--w) - var(--w)*var(--f) = var(--w)*(var(--m) - var(--f))</code></pre>\n\n\n\n<p>The number of columns is defined by <code>--m</code> ,so we divide that free space equally to get:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">var(--w)*(var(--m) - var(--f))/var(--m)</code></pre>\n\n\n\n<p>…which gives us the size of the non-hovered images. For hovered images, we have this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">var(--w)*(var(--m) - var(--f))/var(--m) + var(--w)*var(--f)\nvar(--w)*((var(--m) - var(--f))/var(--m) + var(--f))</code></pre>\n\n\n\n<p>If we want to control the final size of the hovered image, we consider the above formula to get the exact size we want. If, for example, we want the image to be twice as big:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">(var(--m) - var(--f))/var(--m) + var(--f) = 2</code></pre>\n\n\n\n<p>So, the value of our scale multiplier, <code>--f</code>, needs to be equal to:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">var(--m)/(var(--m) - 1)</code></pre>\n\n\n\n<p>For three columns we will have <code>3/2 = 1.5</code> and that’s the scale factor I used in the first demo of this article because I wanted to make the image twice as big on hover!</p>\n\n\n\n<p>The same logic applies to the height calculation and in case we want to control both of them independently we will need to consider two scale factors to make sure we have a specific width and height on hover.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.gallery {\n  /* same as before */\n   --fw: 1.5; /* controls the scale factor for the width */\n   --fh: 1.2; /* controls the scale factor for the height */\n\n  /* same as before */\n}\n\n.gallery img:hover{\n  width:  calc(var(--w)*var(--fw));\n  height: calc(var(--h)*var(--fh));\n}</code></pre>\n\n\n\n<p>Now, you know all the secrets to create any kind of image grid with a cool hover effect while also having control of the sizing you want using the math we just covered.</p>\n\n\n<h3 id=\"wrapping-up\">Wrapping up</h3>\n\n\n<p>In my <a href=\"https://css-tricks.com/exploring-css-grids-implicit-grid-and-auto-placement-powers\">last article</a>, we created a complex-looking grid with a few lines of CSS that put CSS Grid’s implicit grid and auto-placement features to use. In this article, we relied on some CSS Grid sizing trickery to create a fancy grid of images that zoom on hover and cause the grid to adjust accordingly. All of this with a simplified code that is easy to adjust using CSS variables!</p>\n\n\n\n<p>In the next article, we will play with shapes! We will combine CSS grid with mask and clip-path to get fancy grid of images.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/zooming-images-in-a-grid-layout/\">Zooming Images in a Grid Layout</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "category": "Article",
          "link": "https://css-tricks.com/zooming-images-in-a-grid-layout/",
          "creator": "Temani Afif",
          "pubDate": "Mon, 08 Aug 2022 12:55:49 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "css-tricks",
          "feed": "css tricks",
          "read": true,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "95106872c04c410595264f7974e8415b",
          "highlights": []
        },
        {
          "title": "How I Added Scroll Snapping To My Twitter Timeline",
          "description": "<p><a href=\"https://css-tricks.com/practical-css-scroll-snapping/\">CSS Scroll Snap</a> allows websites to snap the web page or any other scroll container to a specific scroll position when the user performs a scrolling operation. This feature has been <a href=\"https://caniuse.com/css-snappoints\" rel=\"noopener\">supported in all modern browsers</a> for over two years, &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/how-i-added-scroll-snapping-to-my-twitter-timeline/\">How I Added Scroll Snapping To My Twitter Timeline</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "content": "\n<p><a href=\"https://css-tricks.com/practical-css-scroll-snapping/\">CSS Scroll Snap</a> allows websites to snap the web page or any other scroll container to a specific scroll position when the user performs a scrolling operation. This feature has been <a href=\"https://caniuse.com/css-snappoints\" rel=\"noopener\">supported in all modern browsers</a> for over two years, but many websites that could benefit from it are still not using it.</p>\n\n\n\n<p>Scroll snapping is probably most associated with horizontal carousels (see <a href=\"https://css-tricks.com/css-only-carousel/\">Chris’s CSS-only approach</a>) and particular web pages divided into full-screen slides. But why stop there? I believe that snapping can improve the scrolling experience on any web page that lays out items in a grid or feed.</p>\n\n\n\n<span id=\"more-367283\"></span>\n\n\n\n<p>For example, most shopping websites show products in a grid. Ideally, the user would like to jump between the grid rows with minimal effort. The user can press <kbd>Space</kbd> to scroll the page by roughly one screen (viewport height), but depending on the height of the grid rows, the scroll position will eventually get “out of sync” with the grid, and the user will have to re-adjust it manually.</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='276' src='https://videopress.com/embed/iAdN0niy?cover=1&amp;playsinline=1&amp;preloadContent=metadata&amp;useAverageColor=1&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" allow='clipboard-write'></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1658470809'></script>\n</div></figure>\n\n\n\n<p>If we add scroll snapping to this page, the user can consistently scroll to the next row with the <kbd>Space</kbd> key (pressing <kbd>Shift</kbd> + <kbd>Space</kbd> will scroll to the previous row). It’s pretty effortless.</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='276' src='https://videopress.com/embed/UhR3Z1B1?cover=1&amp;playsinline=1&amp;posterUrl=https%3A%2F%2Fcss-tricks.com%2Fwp-content%2Fuploads%2F2022%2F07%2Fhm-scroll-snap-after_mp4_dvd.original.jpg&amp;preloadContent=metadata&amp;useAverageColor=1&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" allow='clipboard-write'></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1658470809'></script>\n</div></figure>\n\n\n\n<p>I think that scroll snapping would be a welcome addition to this website. And it’s not even that complicated to implement. The CSS code that I used for this example is relatively simple:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">html {\n  scroll-snap-type: y proximity;\n}\n\n.product-item {\n  scroll-snap-align: start;\n  scroll-margin-top: 75px; /* height of web page’s sticky header */\n}</code></pre>\n\n\n\n<p>You don’t have to wait if a website you visit regularly hasn’t yet added scroll snapping and you think it would improve your scrolling experience. You can add scroll snapping yourself — with user styles.</p>\n\n\n<h3 id=\"adding-user-styles-to-websites\">Adding user styles to websites</h3>\n\n\n<p>In the video above, you can see that I selected a user.css file in Safari’s advanced preferences. This file is a user style sheet. It contains CSS styles that I’ve written, stored in a local <code>.css</code> file, and added to Safari. These “user styles” are then applied to every web page I open in Safari.</p>\n\n\n\n<p>Chrome and Firefox do not allow users to select a user style sheet. Firefox supported a similar feature called <code>userContent.css</code> in the past, but that feature was deprecated and <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1541233\" rel=\"noopener\">disabled by default</a> in 2019. I recommend the <a href=\"https://add0n.com/stylus.html\" rel=\"noopener\">Stylus browser extension</a> for these two browsers (and other Chromium-based browsers).</p>\n\n\n\n<p>One significant advantage of Stylus is that it allows you to write user styles for specific websites and URLs. Safari’s user style sheet applies to all websites, but this can be worked around, e.g., by using the new <code>:has()</code> pseudo-class to <a href=\"https://twitter.com/derSchepp/status/1548755658845085697\" rel=\"noopener\">create selectors that only match specific websites</a>.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2243\" height=\"911\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/stylus-extension-chrome-firefox.png?resize=2243%2C911&#038;ssl=1\" alt=\"\" class=\"wp-image-367288\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/stylus-extension-chrome-firefox.png?w=2243&amp;ssl=1 2243w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/stylus-extension-chrome-firefox.png?resize=300%2C122&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/stylus-extension-chrome-firefox.png?resize=1024%2C416&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/stylus-extension-chrome-firefox.png?resize=768%2C312&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/stylus-extension-chrome-firefox.png?resize=1536%2C624&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/stylus-extension-chrome-firefox.png?resize=2048%2C832&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The Stylus extension has been reviewed by both Chrome and Firefox teams and received a badge that denotes high standards.</figcaption></figure>\n\n\n\n<p>The CSS Cascading module defines a <a href=\"https://drafts.csswg.org/css-cascade/#cascading-origins\" rel=\"noopener\">User Origin</a> for styles the user adds. Safari’s user style sheet belongs to this origin, but the Stylus extension injects user styles to the Author Origin, where the website’s style sheets live. Specifically, Stylus inserts user styles directly to the page via a <code>&lt;style&gt;</code> element at the end of <code>&lt;html&gt;</code> which makes it the <a href=\"https://twitter.com/simevidas/status/1549659536168042501\" rel=\"noopener\">final style sheet on the page</a>. Technically, this means styles added via Stylus are classified as author styles since they’re not in the User Origin, but I will continue to call them user styles because the user adds them.</p>\n\n\n\n<p>However, it’s worth keeping this distinction in mind because it affects the cascade. When selector specificity is equal, a real user style is weaker than the page’s own style. This makes user styles an excellent<a href=\"https://twitter.com/simevidas/status/1490189228306837508\" rel=\"noopener\"> fit for user defaults</a>. Under the same conditions, a style added via Stylus is <em>stronger</em> than the page‘s style, so Stylus cannot as easily be used to define user defaults.</p>\n\n\n\n<p>If we add <code>!important</code> to the mix, both real user styles and styles added via Stylus are stronger than the page’s styles. So when you want to impose your user styles on a website, it doesn’t matter if you use Safari’s “Style sheet” option or the Stylus extension. Your <code>!important</code> styles will win either way.</p>\n\n\n\n<p>In the next section, I will use a set of <code>!important</code> user styles to enforce scroll snapping on the timeline page of Twitter’s website. My goal is to speed up the process of reading my Twitter timeline by avoiding awkward scroll positions where the topmost tweet is only partially on screen.</p>\n\n\n<h3 id=\"scroll-snap-for-twitters-timeline\">Scroll snap for Twitter’s timeline</h3>\n\n\n<p>After some experimentation, I’ve settled on the following CSS code. These styles work well in Firefox, but I’ve experienced some issues in Chrome and Safari. I will describe these issues in more detail later in the article, but for now, let’s focus on the behavior in Firefox.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">html {\n  scroll-snap-type: y mandatory !important;\n}\n\n/* tweets in the timeline are &lt;article> elements */\narticle {\n  scroll-snap-align: start !important;\n}\n\n/* un-stick the sticky header and make it “snappable” as well */\n[aria-label=\"Home timeline\"] > :first-child {\n  position: static !important;\n  scroll-snap-align: start !important;\n}\n\n/* hide the “new Tweets available” floating toast notification */\n[aria-label=\"New Tweets are available.\"] {\n  display: none !important;\n}</code></pre>\n\n\n\n<p class=\"is-style-explanation\">It is necessary to add <code>!important</code> to each declaration because all the user styles must win over the web page’s own styles for our custom scroll snapping implementation to work correctly. I wish that instead of repeatedly writing <code>!important</code>, I could just put my user styles in an “important layer,” but <a href=\"https://twitter.com/simevidas/status/1547645242932809730\" rel=\"noopener\">such a CSS feature does not exist</a> (yet).</p>\n\n\n\n<p>Watch the video below to see my scroll snap user styles in action. Notice how each press on the <kbd>Space</kbd> key scrolls the next set of tweets into view, and the first tweet of each set is aligned to the top edge of the viewport. This allows me to read my timeline more quickly. When I need to go back to the previous set of tweets, I can press <kbd>Shift</kbd> + <kbd>Space</kbd>.</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='277' src='https://videopress.com/embed/nIXD4Q1t?cover=1&amp;playsinline=1&amp;preloadContent=metadata&amp;useAverageColor=1&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" allow='clipboard-write'></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1658470809'></script>\n</div></figure>\n\n\n\n<p>What I like about this type of scroll snapping is that it allows me to predict how far the page will scroll whenever I press <kbd>Space</kbd>. Each scroll distance equals the combined heights of the visible tweets that are entirely on the screen. In other words, the partially visible tweet at the bottom of the screen will move to the top of the screen, which is precisely what I want.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2560\" height=\"1420\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/scroll-snap-distance.png?resize=2560%2C1420&#038;ssl=1\" alt=\"\" class=\"wp-image-367295\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/scroll-snap-distance.png?w=2560&amp;ssl=1 2560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/scroll-snap-distance.png?resize=300%2C166&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/scroll-snap-distance.png?resize=1024%2C568&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/scroll-snap-distance.png?resize=768%2C426&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/scroll-snap-distance.png?resize=1536%2C852&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/scroll-snap-distance.png?resize=2048%2C1136&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>I know in advance that pressing <code>Space</code> will scroll Dave’s tweet to the top of the screen.</figcaption></figure>\n\n\n\n<p>To try out my scroll snap user styles on your own Twitter timeline, follow these steps:</p>\n\n\n\n<ol><li>Install the <a href=\"https://add0n.com/stylus.html\" rel=\"noopener\">Stylus extension</a> with Firefox Add-ons or the Chrome Web Store.</li><li>Navigate to your Twitter timeline at <a href=\"https://twitter.com/home\" rel=\"noopener\">https://twitter.com/home</a>.</li><li>Click the Stylus icon in the browser’s toolbar and click “this URL” in the pop-up.</li><li>Stylus will open a code editor in a new browser tab. Copy-paste my scroll snap user styles into the editor and press the Save button in the sidebar on the left. The styles will be applied to your Twitter timeline immediately (no need to reload the page).</li><li>You can update the styles at any time. Click the Stylus icon and the Pencil icon to open the editor again.</li></ol>\n\n\n<h3 id=\"inability-to-override-snapping\">Inability to override snapping</h3>\n\n\n<p>My implementation of scroll snapping for Twitter’s timeline has one major flaw. If a tweet is taller than the viewport, it is impossible to scroll the page to reveal the bottom part of that tweet (e.g., if you want to like or retweet that tweet) because the browser forcefully snaps the page to show the top of the tweet (or the top of the following tweet).</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='277' src='https://videopress.com/embed/WmY6xjoq?cover=1&amp;playsinline=1&amp;preloadContent=metadata&amp;useAverageColor=1&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" allow='clipboard-write'></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1658470809'></script>\n</div></figure>\n\n\n\n<p class=\"is-style-explanation\">The severity of this problem depends on the user’s display. Viewing Twitter’s timeline on a large desktop monitor at a small page zoom factor, you may not encounter any tweets taller than the viewport.</p>\n\n\n\n<p>I have asked the CSS Working Group if it would be possible to add a mechanism allowing the user to <a href=\"https://github.com/w3c/csswg-drafts/issues/7530\" rel=\"noopener\">override the browser’s mandatory scroll snapping</a>. I should probably mention that this problem could, at least in theory, be resolved by switching from <code>mandatory</code> to <code>proximity</code> snapping. I’ve tested <code>proximity</code> snapping in Chrome and Firefox, and I found it inconsistent and confusing. The browser would often snap when I didn’t expect it to, and vice versa. Maybe Twitter’s code is interfering with the <code>proximity</code> algorithm, the browsers are still a bit buggy, or perhaps I’m just “scrolling it wrong,” if that’s even possible. I don’t know.</p>\n\n\n\n<p>But the main reason why I went with <code>mandatory</code> snapping is that I wanted to avoid situations where the topmost tweet is only partially on screen after a scroll. The type of fast-scrolling between sets of tweets that I’ve shown in the video above is only possible with <code>mandatory</code> snapping.</p>\n\n\n\n<p>If you, like me, prefer <code>mandatory</code> snapping, I can suggest the following two workarounds for the “tall tweet” problem:</p>\n\n\n\n<ul><li>You can open the tweet on its own page and return to the timeline afterward.</li><li>If you only want to click the Like or Retweet buttons, you can <kbd>Shift</kbd>-click the tweet to select it and then press <kbd>L</kbd> to like it, or <kbd>T</kbd> followed by <kbd>Enter</kbd> to retweet it.</li></ul>\n\n\n<h3 id=\"issues-in-chrome-and-safari\">Issues in Chrome and Safari</h3>\n\n\n<p>My scroll snap user styles produce noticeably different scroll snapping behaviors in Chrome, Safari, and Firefox. Those differences are in part since the exact implementation of the snapping mechanism is <a href=\"https://drafts.csswg.org/css-scroll-snap-1/#overview\" rel=\"noopener\">left up to the browser</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>The CSS Scroll Snap Module intentionally does not specify nor mandate any precise animations or physics used to enforce snap positions; this is left up to the user agent.</p></blockquote>\n\n\n\n<p>The current version of Safari has a bug that prevents scroll snapping from working correctly on the Twitter timeline. I have <a href=\"https://bugs.webkit.org/show_bug.cgi?id=243107\" rel=\"noopener\">reported this bug</a>.</p>\n\n\n\n<p>In Chrome, I have encountered the following problems:</p>\n\n\n\n<ul><li>The scrolling operations animate inconsistently. Sometimes the animation is slow, sometimes it’s instant, and sometimes it starts slow but is then cut short. I found this irritating.</li><li>The scrolling operations animate too slowly in general. I performed a test in Chrome and Firefox (20 <kbd>Space</kbd> presses), and it took me 70% more time to cover the same distance on my Twitter timeline in Chrome than in Firefox (18.5 seconds in Chrome vs. 11 seconds in Firefox).</li><li>When I scroll using my laptop’s trackpad, the page flickers a lot. When I attempt to scroll fast by holding down the <kbd>Space</kbd> key, the page scrolls very slowly and oscillates. I suspect that both issues are caused by the same algorithm. It seems that Chrome re-snaps at a very high rate in these cases. I have <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=1346716\" rel=\"noopener\">reported this bug</a>.</li></ul>\n\n\n\n<p>These browser bugs and differences between browsers can be a problem for websites considering implementing scroll snapping. For example, a web developer might hold back because they don’t like how scroll snapping behaves in one particular browser. Browsers can mitigate this problem by becoming more interoperable. In fact, Scroll Snap is one of the areas of focus of the cross-browser <a href=\"https://web.dev/interop-2022/\" rel=\"noopener\">Interop 2022 effort</a>.</p>\n\n\n\n<p>Another way the situation could be improved is by introducing new CSS properties that would make scroll snapping more configurable. This could include the duration of the snapping animation, the length of the proximity threshold for snapping, and a mechanism to override mandatory snapping.</p>\n\n\n<h3 id=\"to-snap-or-not-to-snap\">To snap or not to snap?</h3>\n\n\n<p>I’ve been using my scroll snap user styles on Twitter’s timeline for a couple of weeks, and I don’t want to go back. The ability to quickly flip through my feed with only the <kbd>Space</kbd> key is just on another level.</p>\n\n\n\n<p>However, I consider this an advanced feature that probably isn’t for everyone. There’s a reason why I’ve enabled it only on the timeline (<code>/home</code> path) and nowhere else on Twitter’s website. Snapping is a significant change in how the page scrolls, and it takes some time to get used to. It can work great for a specific use case, but it can also get in the way and frustrate the user.</p>\n\n\n\n<p>Websites with feeds should therefore consider offering scroll snapping only as an optional feature, after careful consideration and plenty of testing in different browsers and with different input methods (mouse, keyboard, trackpad, touch screen, etc.).</p>\n\n\n<h3 id=\"before-you-go\">Before you go…</h3>\n\n\n<p>Finally, I highly recommend installing and trying out the <a href=\"https://add0n.com/stylus.html\" rel=\"noopener\">Stylus browser extension</a>. Web developers (or anyone who knows CSS) have the power to style any website in their browser. You can apply minor improvements and fixes to your favorite websites. I mostly use it to hide page elements that I find annoying, such as sticky headers, video pop-ups, and vote counts.</p>\n\n\n\n<p>But more importantly, Stylus allows you to quickly test new CSS features on any website and report browser bugs, if necessary. By doing this, you can help make the web platform a little better.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/how-i-added-scroll-snapping-to-my-twitter-timeline/\">How I Added Scroll Snapping To My Twitter Timeline</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "category": "Article",
          "link": "https://css-tricks.com/how-i-added-scroll-snapping-to-my-twitter-timeline/",
          "creator": "Šime Vidas",
          "pubDate": "Fri, 05 Aug 2022 13:10:09 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "css-tricks",
          "feed": "css tricks",
          "read": true,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "216736d729686b608ae6e2a8f4f637fd",
          "highlights": []
        },
        {
          "title": "Actually, the San Francisco Typeface Does Ship as a Variable Font",
          "description": "<p>Apple <a href=\"https://developer.apple.com/videos/play/wwdc2022/110381/\" rel=\"noopener\">unveiled</a> an expanded version of its San Francisco system font at WWDC 2022. Then, last month, Jim Nielsen zeroed in on the font&#8217;s variations, <a href=\"https://blog.jim-nielsen.com/2022/visualizing-sf-font-variations/\" rel=\"noopener\">explaining</a> how the font provides a spectrum of variations based on the <strong>width</strong> and <strong>weight</strong>&#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/actually-the-san-francisco-typeface-does-ship-as-a-variable-font/\">Actually, the San Francisco Typeface Does Ship as a Variable Font</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "content": "\n<p>Apple <a href=\"https://developer.apple.com/videos/play/wwdc2022/110381/\" rel=\"noopener\">unveiled</a> an expanded version of its San Francisco system font at WWDC 2022. Then, last month, Jim Nielsen zeroed in on the font&#8217;s variations, <a href=\"https://blog.jim-nielsen.com/2022/visualizing-sf-font-variations/\" rel=\"noopener\">explaining</a> how the font provides a spectrum of variations based on the <strong>width</strong> and <strong>weight</strong>. It&#8217;s a remarkable read if you haven&#8217;t checked it.</p>\n\n\n\n<span id=\"more-367361\"></span>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"589\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/sf-font-grid.png?resize=1024%2C589&#038;ssl=1\" alt=\"\" class=\"wp-image-367362\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/sf-font-grid.png?resize=1024%2C589&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/sf-font-grid.png?resize=300%2C173&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/sf-font-grid.png?resize=768%2C442&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/sf-font-grid.png?resize=1536%2C883&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/sf-font-grid.png?w=1600&amp;ssl=1 1600w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>With all of these great new options, you might be tempted to use them in a web design. Chris was <a href=\"https://chriscoyier.net/2022/06/16/expanded-san-francisco-typeface/\" rel=\"noopener\">ogling over the expanded sets as well</a> over on his personal blog and pondered:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>But it’s not year clear how we might tap into the condensed, compressed, and expanded varieties in CSS, or if there is even a plan to allow that. I suppose we can peek around Apple.com eventually and see how they do it if they start using them there.</p><p>Doesn’t this make perfect sense to construct as a variable font and ship the whole kit and kaboodle that way?</p></blockquote>\n\n\n\n<p>Turns out, yes. It does make perfect sense. Chris follows up in a <a href=\"https://chriscoyier.net/2022/08/02/actually-the-san-francisco-typeface-does-ship-as-a-variable-font/\" rel=\"noopener\">new post</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>But just yesterday I randomly stumbled across the fact that&nbsp;<strong>the built-in San Francisco font (on the Apple devices that have it built-in) is already variable (!!).&nbsp;</strong>See, I was&nbsp;<a href=\"https://v-fonts.com/fonts/roboto-flex\" rel=\"noopener\">derping around with Roboto Flex</a>, and had&nbsp;<code>system-ui</code>&nbsp;as the fallback font, and I was noticing that during the FOUT, the&nbsp;<code>font-variation-settings</code>&nbsp;I was using had an effect on the fallback font, which renders as San Francisco on my Mac. Which… unless I’m daft… means that San Francisco is a variable font.</p></blockquote>\n\n\n\n<p>So, as for using it? Chris has a demo, of course:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_RwMQYyQ\" src=\"//codepen.io/anon/embed/RwMQYyQ?height=450&amp;theme-id=1&amp;slug-hash=RwMQYyQ&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed RwMQYyQ\" title=\"CodePen Embed RwMQYyQ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>There are some gotchas to all this, the most significant being fallbacks for non-Apple devices. After all, that demo is simply calling <code>system-ui</code> for the font family — it&#8217;s not telling the browser to download a font file or anything and who knows if Apple is gonna ever ship a variable font file we can serve up as an actual custom web font.</p>\n\n\n\n<p>The other interesting thing? Chris did some sleuthing and counted 35 layout featured included in that system font. Go <a href=\"https://chriscoyier.net/2022/08/02/actually-the-san-francisco-typeface-does-ship-as-a-variable-font/\" rel=\"noopener\">read the rest of the post</a> to see &#8217;em all (and to get a good ol&#8217; dose of Chris-isms — I know I miss them!).</p>\n<p><a href=\"https://chriscoyier.net/2022/08/02/actually-the-san-francisco-typeface-does-ship-as-a-variable-font/\" rel=\"noopener\">To Shared Link</a> &#8212; <a href=\"https://css-tricks.com/actually-the-san-francisco-typeface-does-ship-as-a-variable-font/\">Permalink on CSS-Tricks</a></p><hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/actually-the-san-francisco-typeface-does-ship-as-a-variable-font/\">Actually, the San Francisco Typeface Does Ship as a Variable Font</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "category": "Link",
          "link": "https://css-tricks.com/actually-the-san-francisco-typeface-does-ship-as-a-variable-font/",
          "creator": "Geoff Graham",
          "pubDate": "Thu, 04 Aug 2022 20:20:28 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "css-tricks",
          "feed": "css tricks",
          "read": true,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "9f4b328705871b6f2b7abd832744003f",
          "highlights": []
        },
        {
          "title": "Converting Speech to PDF with NextJS and ExpressJS",
          "description": "<p>With speech interfaces becoming more of a thing, it’s worth exploring some of the things we can do with speech interactions. Like, what if we could say something and have that transcribed and pumped out as a downloadable PDF?</p>\n<p>Well, &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/converting-speech-to-pdf-with-nextjs-and-expressjs/\">Converting Speech to PDF with NextJS and ExpressJS</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "content": "\n<p>With speech interfaces becoming more of a thing, it’s worth exploring some of the things we can do with speech interactions. Like, what if we could say something and have that transcribed and pumped out as a downloadable PDF?</p>\n\n\n\n<p>Well, spoiler alert: we absolutely <em>can</em> do that! There are libraries and frameworks we can cobble together to make it happen, and that’s what we’re going to do together in this article.</p>\n\n\n\n<span id=\"more-367238\"></span>\n\n\n\n<div class=\"wp-container-3 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://github.com/bonarhyme/audio-to-pdf-server\" rel=\"noopener\">Server repo </a></div>\n\n\n\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://github.com/bonarhyme/audio-to-pdf-web-client\" rel=\"noopener\">Client repo</a></div>\n</div>\n\n\n<h3 id=\"these-are-the-tools-were-using\">These are the tools we‘re using</h3>\n\n\n<p>First off, these are the two big players: Next.js and Express.js.</p>\n\n\n\n<p><a href=\"https://nextjs.org\" rel=\"noopener\">Next.js</a> tacks on additional functionalities to React, including key features for building static sites. It&#8217;s a go-to for many developers because of what it offers right out of the box, like dynamic routing, image optimization, built-in-domain and subdomain routing, fast refreshes, file system routing, and API routes… among <a href=\"https://nextjs.org/docs/getting-started\" rel=\"noopener\">many, many other things</a>.</p>\n\n\n\n<p>In our case, we definitely need Next.js for its <a href=\"https://nextjs.org/docs/api-routes/introduction\" rel=\"noopener\">API routes</a> on our client server. We want a route that takes a text file, converts it to PDF, writes it to our filesystem, then sends a response to the client.</p>\n\n\n\n<p><a href=\"https://expressjs.com\" rel=\"noopener\">Express.js</a> allows us to get a little Node.js app going with routing, HTTP helpers, and templating. It’s a server for our own API, which is what we’ll need as we pass and parse data between things.</p>\n\n\n\n<p>We have some other dependencies we’ll be putting to use:</p>\n\n\n\n<ol><li><a href=\"https://www.npmjs.com/package/react-speech-recognition\" rel=\"noopener\">react-speech-recognition</a>: A library for converting speech to text, making it available to React components.</li><li><a href=\"https://www.npmjs.com/package/regenerator-runtime\" rel=\"noopener\">regenerator-runtime</a>: A library for troubleshooting the “<code>regeneratorRuntime</code> is not defined” error that shows up in Next.js when using react-speech-recognition</li><li><a href=\"https://www.npmjs.com/package/html-pdf-node\" rel=\"noopener\">html-pdf-node</a>: A library for converting an HTML page or public URL into a PDF</li><li><a href=\"https://axios-http.com/\" rel=\"noopener\">axios</a>: A library for making HTTP requests in both the browser and Node.js</li><li><a href=\"https://www.npmjs.com/package/cors\" rel=\"noopener\">cors</a>: A library that allows cross-origin resource sharing</li></ol>\n\n\n<h3 id=\"setting-up\">Setting up</h3>\n\n\n<p>The first thing we want to do is create two project folders, one for the client and one for the server. Name them whatever you’d like. I’m naming mine <code>audio-to-pdf-client</code> and <code>audio-to-pdf-server</code>, respectively.</p>\n\n\n\n<p>The fastest way to get started with Next.js on the client side is to bootstrap it with <a href=\"https://nextjs.org/learn/basics/create-nextjs-app/setup\" rel=\"noopener\">create-next-app</a>. So, open your terminal and run the following command from your client project folder:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">npx create-next-app client</code></pre>\n\n\n\n<p>Now we need our Express server. We can get it by <code>cd</code>-ing into the server project folder and running the <code>npm init</code> command. A <code>package.json</code> file will be created in the server project folder once it’s done.</p>\n\n\n\n<p>We still need to actually install Express, so let’s do that now with <code>npm install express</code>. Now we can create a new <code>index.js</code> file in the server project folder and drop this code in there:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const express = require(\"express\")\nconst app = express()\n\napp.listen(4000, () => console.log(\"Server is running on port 4000\"))</code></pre>\n\n\n\n<p>Ready to run the server?</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">node index.js</code></pre>\n\n\n\n<p>We’re going to need a couple more folders and and another file to move forward:</p>\n\n\n\n<ul><li>Create a <code>components</code> folder in the client project folder.</li><li>Create a <code>SpeechToText.jsx</code> file in the <code>components</code> subfolder.</li></ul>\n\n\n\n<p>Before we go any further, we have a little cleanup to do. Specifically, we need to replace the default code in the <code>pages/index.js</code> file with this:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import Head from \"next/head\";\nimport SpeechToText from \"../components/SpeechToText\";\n\nexport default function Home() {\n  return (\n    &lt;div className=\"home\">\n      &lt;Head>\n        &lt;title>Audio To PDF&lt;/title>\n        &lt;meta\n          name=\"description\"\n          content=\"An app that converts audio to pdf in the browser\"\n        />\n        &lt;link rel=\"icon\" href=\"/favicon.ico\" />\n      &lt;/Head>\n\n      &lt;h1>Convert your speech to pdf&lt;/h1>\n\n      &lt;main>\n        &lt;SpeechToText />\n      &lt;/main>\n    &lt;/div>\n  );\n}</code></pre>\n\n\n\n<p class=\"is-style-explanation\">The imported <code>SpeechToText</code> component will eventually be exported from <code>components/SpeechToText.jsx</code>.</p>\n\n\n<h3 id=\"lets-install-the-other-dependencies\">Let’s install the other dependencies</h3>\n\n\n<p>Alright, we have the initial setup for our app out of the way. Now we can install the libraries that handle the data that’s passed around.</p>\n\n\n\n<p>We can install our client dependencies with:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">npm install react-speech-recognition regenerator-runtime axios</code></pre>\n\n\n\n<p>Our Express server dependencies are up next, so let’s <code>cd</code> into the server project folder and install those:</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">npm install html-pdf-node cors</code></pre>\n\n\n\n<p>Probably a good time to pause and make sure the files in our project folders are in tact. Here&#8217;s what you should have in the client project folder at this point:</p>\n\n\n\n<pre rel=\"File structure\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">/audio-to-pdf-web-client\n├─ /components\n|  └── SpeechToText.jsx\n├─ /pages\n|  ├─ _app.js\n|  └── index.js\n└── /styles\n    ├─globals.css\n    └── Home.module.css</code></pre>\n\n\n\n<p>And here&#8217;s what you should have in the server project folder:</p>\n\n\n\n<pre rel=\"File structure\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">/audio-to-pdf-server\n└── index.js</code></pre>\n\n\n<h3 id=\"building-the-ui\">Building the UI</h3>\n\n\n<p>Well, our speech-to-PDF wouldn’t be all that great if there’s no way to interact with it, so let’s make a React component for it that we can call <code>&lt;SpeechToText&gt;</code>.</p>\n\n\n\n<p>You can totally use your own markup. Here’s what I’ve got to give you an idea of the pieces we’re putting together:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import React from \"react\";\n\nconst SpeechToText = () => {\n  return (\n    &lt;>\n      &lt;section>\n        &lt;div className=\"button-container\">\n          &lt;button type=\"button\" style={{ \"--bgColor\": \"blue\" }}>\n            Start\n          &lt;/button>\n          &lt;button type=\"button\" style={{ \"--bgColor\": \"orange\" }}>\n            Stop\n          &lt;/button>\n        &lt;/div>\n        &lt;div\n          className=\"words\"\n          contentEditable\n          suppressContentEditableWarning={true}\n        >&lt;/div>\n        &lt;div className=\"button-container\">\n          &lt;button type=\"button\" style={{ \"--bgColor\": \"red\" }}>\n            Reset\n          &lt;/button>\n          &lt;button type=\"button\" style={{ \"--bgColor\": \"green\" }}>\n            Convert to pdf\n          &lt;/button>\n        &lt;/div>\n      &lt;/section>\n    &lt;/>\n  );\n};\n\nexport default SpeechToText;</code></pre>\n\n\n\n<p>This component returns a <a href=\"https://reactjs.org/docs/fragments.html\" rel=\"noopener\">React fragment</a> that contains an HTML <code>&lt;``section``&gt;</code> element that contains three divs:</p>\n\n\n\n<ul><li><code><strong>.button-container</strong></code> contains two buttons that will be used to start and stop speech recognition.</li><li><code><strong>.words</strong></code> has <code>contentEditable</code> and <code>suppressContentEditableWarning</code> attributes to make this element editable and suppress any warnings from React.</li><li>Another <code><strong>.button-container</strong></code> holds two more buttons that will be used to reset and convert speech to PDF, respectively.</li></ul>\n\n\n\n<p>Styling is another thing altogether. I won’t go into it here, but you’re welcome to use some styles I wrote either as a starting point for your own <code>styles/global.css</code> file.</p>\n\n\n\n<details >\n  <summary>\n          View Full CSS      </summary>\n  \n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">html,\nbody {\n  padding: 0;\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,\n    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n}\n\na {\n  color: inherit;\n  text-decoration: none;\n}\n\n* {\n  box-sizing: border-box;\n}\n\n.home {\n  background-color: #333;\n  min-height: 100%;\n  padding: 0 1rem;\n  padding-bottom: 3rem;\n}\n\nh1 {\n  width: 100%;\n  max-width: 400px;\n  margin: auto;\n  padding: 2rem 0;\n  text-align: center;\n  text-transform: capitalize;\n  color: white;\n  font-size: 1rem;\n}\n\n.button-container {\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  gap: 3rem;\n}\n\nbutton {\n  color: white;\n  background-color: var(--bgColor);\n  font-size: 1.2rem;\n  padding: 0.5rem 1.5rem;\n  border: none;\n  border-radius: 20px;\n  cursor: pointer;\n}\n\nbutton:hover {\n  opacity: 0.9;\n}\n\nbutton:active {\n  transform: scale(0.99);\n}\n\n.words {\n  max-width: 700px;\n  margin: 50px auto;\n  height: 50vh;\n  border-radius: 5px;\n  padding: 1rem 2rem 1rem 5rem;\n  background-image: -webkit-gradient(\n    linear,\n    0 0,\n    0 100%,\n    from(#d9eaf3),\n    color-stop(4%, #fff)\n  ) 0 4px;\n  background-size: 100% 3rem;\n  background-attachment: scroll;\n  position: relative;\n  line-height: 3rem;\n  overflow-y: auto;\n}\n\n.success,\n.error {\n  background-color: #fff;\n  margin: 1rem auto;\n  padding: 0.5rem 1rem;\n  border-radius: 5px;\n  width: max-content;\n  text-align: center;\n  display: block;\n}\n\n.success {\n  color: green;\n}\n\n.error {\n  color: red;\n}\n</code></pre>\n\n\n\n<p class=\"is-style-explanation\">The CSS variables in there are being used to control the background color of the buttons.</p>\n\n\n</details>\n\n\n<p>Let’s see the latest changes! Run <code>npm run dev</code> in the terminal and check them out.</p>\n\n\n\n<p>You should see this in browser when you visit <code>http://localhost:3000</code>:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1090\" height=\"697\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_D09CDE89B0809DBB7217DBFE31A1A6C02D83CF5EAA9F5F83BA51E451EE05F6A0_1659002561753_welcome-to-nextjs.png?resize=1090%2C697&#038;ssl=1\" alt=\"\" class=\"wp-image-367242\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_D09CDE89B0809DBB7217DBFE31A1A6C02D83CF5EAA9F5F83BA51E451EE05F6A0_1659002561753_welcome-to-nextjs.png?w=1090&amp;ssl=1 1090w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_D09CDE89B0809DBB7217DBFE31A1A6C02D83CF5EAA9F5F83BA51E451EE05F6A0_1659002561753_welcome-to-nextjs.png?resize=300%2C192&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_D09CDE89B0809DBB7217DBFE31A1A6C02D83CF5EAA9F5F83BA51E451EE05F6A0_1659002561753_welcome-to-nextjs.png?resize=1024%2C655&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/s_D09CDE89B0809DBB7217DBFE31A1A6C02D83CF5EAA9F5F83BA51E451EE05F6A0_1659002561753_welcome-to-nextjs.png?resize=768%2C491&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 id=\"our-first-speech-to-text-conversion\">Our first speech to text conversion!</h3>\n\n\n<p>The first action to take is to import the necessary dependencies into our <code>&lt;SpeechToText&gt;</code> component:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import React, { useRef, useState } from \"react\";\nimport SpeechRecognition, {\n  useSpeechRecognition,\n} from \"react-speech-recognition\";\nimport axios from \"axios\";</code></pre>\n\n\n\n<p>Then we check if speech recognition is supported by the browser and render a notice if not supported:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const speechRecognitionSupported =\n  SpeechRecognition.browserSupportsSpeechRecognition();\n\nif (!speechRecognitionSupported) {\n  return &lt;div>Your browser does not support speech recognition.&lt;/div>;\n}</code></pre>\n\n\n\n<p>Next up, let’s extract <code>transcript</code> and <code>resetTranscript</code> from the <code>useSpeechRecognition()</code> hook:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const { transcript, resetTranscript } = useSpeechRecognition();</code></pre>\n\n\n\n<p>This is what we need for the state that handles <code>listening</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const [listening, setListening] = useState(false);</code></pre>\n\n\n\n<p>We also need a <code>ref</code> for the <code>div</code> with the <code>contentEditable</code> attribute, then we need to add the <code>ref</code> attribute to it and pass <code>transcript</code> as <code>children</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const textBodyRef = useRef(null);</code></pre>\n\n\n\n<p>…and:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;div\n  className=\"words\"\n  contentEditable\n  ref={textBodyRef}\n  suppressContentEditableWarning={true}\n  >\n  {transcript}\n&lt;/div></code></pre>\n\n\n\n<p>The last thing we need here is a function that triggers speech recognition and to tie that function to the <code>onClick</code> event listener of our button. The button sets listening to <code>true</code> and makes it run continuously. We’ll disable the button while it’s in that state to prevent us from firing off additional events.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const startListening = () => {\n  setListening(true);\n  SpeechRecognition.startListening({\n    continuous: true,\n  });\n};</code></pre>\n\n\n\n<p>…and:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;button\n  type=\"button\"\n  onClick={startListening}\n  style={{ \"--bgColor\": \"blue\" }}\n  disabled={listening}\n>\n  Start\n&lt;/button></code></pre>\n\n\n\n<p>Clicking on the button should now start up the transcription.</p>\n\n\n<h3 id=\"more-functions\">More functions</h3>\n\n\n<p>OK, so we have a component that can <em>start</em> listening. But now we need it to do a few other things as well, like <code>stopListening</code>, <code>resetText</code> and <code>handleConversion</code>. Let’s make those functions.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const stopListening = () => {\n  setListening(false);\n  SpeechRecognition.stopListening();\n};\n\nconst resetText = () => {\n  stopListening();\n  resetTranscript();\n  textBodyRef.current.innerText = \"\";\n};\n\nconst handleConversion = async () => {}</code></pre>\n\n\n\n<p>Each of the functions will be added to an <code>onClick</code> event listener on the appropriate buttons:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;button\n  type=\"button\"\n  onClick={stopListening}\n  style={{ \"--bgColor\": \"orange\" }}\n  disabled={listening === false}\n>\n  Stop\n&lt;/button>\n\n&lt;div className=\"button-container\">\n  &lt;button\n    type=\"button\"\n    onClick={resetText}\n    style={{ \"--bgColor\": \"red\" }}\n  >\n    Reset\n  &lt;/button>\n  &lt;button\n    type=\"button\"\n    style={{ \"--bgColor\": \"green\" }}\n    onClick={handleConversion}\n  >\n    Convert to pdf\n  &lt;/button>\n&lt;/div></code></pre>\n\n\n\n<p class=\"is-style-explanation\">The <code>handleConversion</code> function is asynchronous because we will eventually be making an API request. The “Stop” button has the disabled attribute that would be be triggered when listening is false.</p>\n\n\n\n<p>If we restart the server and refresh the browser, we can now start, stop, and reset our speech transcription in the browser.</p>\n\n\n\n<p>Now what we need is for the app to <em>transcribe</em> that recognized speech by converting it to a PDF file. For that, we need the server-side path from Express.js.</p>\n\n\n<h3 id=\"setting-up-the-api-route\">Setting up the API route</h3>\n\n\n<p>The purpose of this route is to take a text file, convert it to a PDF, write that PDF to our filesystem, then send a response to the client.</p>\n\n\n\n<p>To setup, we would open the <code>server/index.js</code> file and import the <code>html-pdf-node</code> and <code>fs</code> dependencies that will be used to write and open our filesystem.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const HTMLToPDF = require(\"html-pdf-node\");\nconst fs = require(\"fs\");\nconst cors = require(\"cors)</code></pre>\n\n\n\n<p>Next, we will setup our route:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">app.use(cors())\napp.use(express.json())\n\napp.post(\"/\", (req, res) => {\n  // etc.\n})</code></pre>\n\n\n\n<p>We then proceed to define our options required in order to use <code>html-pdf-node</code> inside the route:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">let options = { format: \"A4\" };\nlet file = {\n  content: `&lt;html>&lt;body>&lt;pre style='font-size: 1.2rem'>${req.body.text}&lt;/pre>&lt;/body>&lt;/html>`,\n};</code></pre>\n\n\n\n<p>The <code>options</code> object accepts a value to set the paper size and style. Paper sizes follow a much different system than the sizing units we typically use on the web. For example, <a href=\"https://www.papersizes.org/a-paper-sizes.htm\" rel=\"noopener\">A4 is the typical letter size</a>.</p>\n\n\n\n<p>The <code>file</code> object accepts either the URL of a public website or HTML markup. In order to generate our HTML page, we will use the <code>html</code>, <code>body</code>, <code>pre</code> HTML tags and the text from the <code>req.body</code>.</p>\n\n\n\n<p class=\"is-style-explanation\">You can apply any styling of your choice.</p>\n\n\n\n<p>Next, we will add a <code>trycatch</code> to handle any errors that might pop up along the way:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">try {\n\n} catch(error){\n  console.log(error);\n  res.status(500).send(error);\n}</code></pre>\n\n\n\n<p>Next, we will use the <code>generatePdf</code> from the <code>html-pdf-node</code> library to generate a <code>pdfBuffer</code> (the raw PDF file) from our file and create a unique <code>pdfName</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">HTMLToPDF.generatePdf(file, options).then((pdfBuffer) => {\n  // console.log(\"PDF Buffer:-\", pdfBuffer);\n  const pdfName = \"./data/speech\" + Date.now() + \".pdf\";\n\n  // Next code here\n}</code></pre>\n\n\n\n<p>From there, we use the filesystem module to write, read and (yes, finally!) send a response to the client app:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">fs.writeFile(pdfName, pdfBuffer, function (writeError) {\n  if (writeError) {\n    return res\n      .status(500)\n      .json({ message: \"Unable to write file. Try again.\" });\n  }\n\n  fs.readFile(pdfName, function (readError, readData) {\n    if (!readError &amp;&amp; readData) {\n      // console.log({ readData });\n      res.setHeader(\"Content-Type\", \"application/pdf\");\n      res.setHeader(\"Content-Disposition\", \"attachment\");\n      res.send(readData);\n      return;\n    }\n\n    return res\n      .status(500)\n      .json({ message: \"Unable to write file. Try again.\" });\n  });\n});</code></pre>\n\n\n\n<p>Let’s break that down a bit:</p>\n\n\n\n<ul><li>The <code>writeFile</code> filesystem module accepts a file name, data and a callback function that can returns an error message if there’s an issue writing to the file. If you’re working with a CDN that provides error endpoints, you could use those instead.</li><li>The <code>readFile</code> filesystem module accepts a file name and a callback function that is capable or returning a read error as well as the read data. Once we have no read error and the read data is present, we will construct and send a response to the client. Again, this can be replaced with your CDN’s endpoints if you have them.</li><li>The <code>res.setHeader(\"Content-Type\", \"application/pdf\");</code> tells the browser that we are sending a PDF file.</li><li>The <code>res.setHeader(\"Content-Disposition\", \"attachment\");</code> tells the browser to make the received data downloadable.</li></ul>\n\n\n\n<p>Since the API route ready, we can use it in our app at <code>http://localhost:4000</code>. We can the proceed to the client part of our application to complete the <code>handleConversion</code> function.</p>\n\n\n<h3 id=\"handling-the-conversion\">Handling the conversion</h3>\n\n\n<p>Before we can start working on a <code>handleConversion</code> function, we need to create a state that handles our API requests for loading, error, success, and other messages. We’re going use React’s <code><a href=\"https://reactjs.org/docs/hooks-state.html\" rel=\"noopener\">useState</a></code> hook to set that up:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const [response, setResponse] = useState({\n  loading: false,\n  message: \"\",\n  error: false,\n  success: false,\n});</code></pre>\n\n\n\n<p>In the <code>handleConversion</code> function, we will check for when the web page has been loaded before running our code and make sure the <code>div</code> with the <code>editable</code> attribute is not empty:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">if (typeof window !== \"undefined\") {\nconst userText = textBodyRef.current.innerText;\n  // console.log(textBodyRef.current.innerText);\n\n  if (!userText) {\n    alert(\"Please speak or write some text.\");\n    return;\n  }\n}</code></pre>\n\n\n\n<p>We proceed by wrapping our eventual API request in a <code>trycatch</code>, handling any error that may arise, and updating the response state:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">try {\n\n} catch(error){\n  setResponse({\n    ...response,\n    loading: false,\n    error: true,\n    message:\n      \"An unexpected error occurred. Text not converted. Please try again\",\n    success: false,\n  });\n}</code></pre>\n\n\n\n<p>Next, we set some values for the response state and also set config for <code>axios</code> and make a post request to the server:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">setResponse({\n  ...response,\n  loading: true,\n  message: \"\",\n  error: false,\n  success: false,\n});\nconst config = {\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n  responseType: \"blob\",\n};\n\nconst res = await axios.post(\n  \"http://localhost:4000\",\n  {\n    text: textBodyRef.current.innerText,\n  },\n  config\n);</code></pre>\n\n\n\n<p>Once we have gotten a successful response, we set the response state with the appropriate values and instruct the browser to download the received PDF:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">setResponse({\n  ...response,\n  loading: false,\n  error: false,\n  message:\n    \"Conversion was successful. Your download will start soon...\",\n  success: true,\n});\n\n// convert the received data to a file\nconst url = window.URL.createObjectURL(new Blob([res.data]));\n// create an anchor element\nconst link = document.createElement(\"a\");\n// set the href of the created anchor element\nlink.href = url;\n// add the download attribute, give the downloaded file a name\nlink.setAttribute(\"download\", \"yourfile.pdf\");\n// add the created anchor tag to the DOM\ndocument.body.appendChild(link);\n// force a click on the link to start a simulated download\nlink.click();</code></pre>\n\n\n\n<p>And we can use the following below the contentEditable <code>div</code> for displaying messages:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">&lt;div>\n  {response.success &amp;&amp; &lt;i className=\"success\">{response.message}&lt;/i>}\n  {response.error &amp;&amp; &lt;i className=\"error\">{response.message}&lt;/i>}\n&lt;/div></code></pre>\n\n\n<h3 id=\"final-code\">Final code</h3>\n\n\n<p>I’ve packaged everything up on GitHub so you can check out the full source code for both the server and the client.</p>\n\n\n\n<div class=\"wp-container-4 wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://github.com/bonarhyme/audio-to-pdf-server\" rel=\"noopener\">Server repo </a></div>\n\n\n\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://github.com/bonarhyme/audio-to-pdf-web-client\" rel=\"noopener\">Client repo</a></div>\n</div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/converting-speech-to-pdf-with-nextjs-and-expressjs/\">Converting Speech to PDF with NextJS and ExpressJS</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "category": "Article",
          "link": "https://css-tricks.com/converting-speech-to-pdf-with-nextjs-and-expressjs/",
          "creator": "Onuorah Bonaventure Chukwudi",
          "pubDate": "Thu, 04 Aug 2022 12:55:39 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "css-tricks",
          "feed": "css tricks",
          "read": true,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "536876a55182374d0082ccd4ad43a6a2",
          "highlights": []
        },
        {
          "title": "Implicit Grids, Repeatable Layout Patterns, and Danglers",
          "description": "<p><a href=\"https://daverupert.com/2022/07/solving-the-dangler-conundrum-with-has-and-container-queries/\" rel=\"noopener\">Dave Rupert with some modern CSS magic</a> that tackles one of those classic conundrums: what happens when the CSS for component is unable to handle the content we throw at it?</p>\n<p>The specific situation is when a layout grid expects &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/implicit-grids-repeatable-layout-patterns-and-danglers/\">Implicit Grids, Repeatable Layout Patterns, and Danglers</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "content": "\n<p><a href=\"https://daverupert.com/2022/07/solving-the-dangler-conundrum-with-has-and-container-queries/\" rel=\"noopener\">Dave Rupert with some modern CSS magic</a> that tackles one of those classic conundrums: what happens when the CSS for component is unable to handle the content we throw at it?</p>\n\n\n\n<p>The specific situation is when a layout grid expects an even number of items, but is supplied with an odd number instead. We’re left with a “dangling” element at the end that throws off the layout. Sounds like what’s needed is some <a href=\"https://defensivecss.dev\" rel=\"noopener\">Defensive CSS</a> and Dave accomplishes it.</p>\n\n\n\n<span id=\"more-367158\"></span>\n\n\n\n<p>He reaches for <code>:has()</code> to write a nifty selector that sniffs out the last item in a grid that contains an odd number of items:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.items:has(.item:last-of-type:nth-of-type(odd)) .item:first-of-type { }</code></pre>\n\n\n\n<p>Breaking that down:</p>\n\n\n\n<ul><li>We have a parent container of <code>.items</code>.</li><li>If the container <code>:has()</code> an <code>.item</code> child that is the last of its type,</li><li>…and that <code>.item</code> happens to be an odd-numbered instance,</li><li>…then select the first <code>.item</code> element of that type and style it!</li></ul>\n\n\n\n<p>In this case, that last <code>.item</code> can be set to go full-width to prevent holes in the layout.</p>\n\n\n\n<p>If… then… CSS has conditional logic powers! We&#8217;re only talking about support for Safari TP and Edge/Chrome Canary at the moment, but that&#8217;s pretty awesome.</p>\n\n\n\n<p>As chance has it, Temani Afif recently shared tricks he learned while <a href=\"https://css-tricks.com/exploring-css-grids-implicit-grid-and-auto-placement-powers/\">experimenting with implicit grids</a>. By taking advantage of CSS Grid’s auto-placement algorithm, we don’t even have to explicitly declare a fixed number of columns and rows for a grid — CSS will create them for us if they’re needed!</p>\n\n\n\n<p>No, Temani’s techniques aren’t alternative solutions to Dave’s “dangler” dilemma. But combining Temani’s approach to repeatable grid layout patterns with Dave’s defensive CSS use of <code>:has()</code>, we get a pretty powerful and complex-looking grid that’s lightweight and capable of handling any number of items while maintaining a balanced, repeatable pattern.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_bGvogLz\" src=\"//codepen.io/anon/embed/bGvogLz?height=850&amp;theme-id=1&amp;slug-hash=bGvogLz&amp;default-tab=result\" height=\"850\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed bGvogLz\" title=\"CodePen Embed bGvogLz\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/implicit-grids-repeatable-layout-patterns-and-danglers/\">Implicit Grids, Repeatable Layout Patterns, and Danglers</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "category": "Article",
          "link": "https://css-tricks.com/implicit-grids-repeatable-layout-patterns-and-danglers/",
          "creator": "Geoff Graham",
          "pubDate": "Tue, 02 Aug 2022 13:10:49 +0000",
          "enclosure": "",
          "enclosureType": "",
          "image": "",
          "id": "",
          "language": "en",
          "folder": "css-tricks",
          "feed": "css tricks",
          "read": true,
          "favorite": false,
          "created": false,
          "tags": [],
          "hash": "fb4d9abd02dd568f9ab2a66747cf836a",
          "highlights": []
        }
      ],
      "folder": "css-tricks",
      "name": "css tricks",
      "language": "en",
      "hash": "d788ed0e4cd1ae88b772b759e955b2ab"
    }
  ],
  "dateFormat": "YYYY-MM-DDTHH:mm:SS",
  "template": "---\nlink: {{link}}\nauthor: {{author}}\npublished: {{published}}\ntags: [{{tags:,}}]\n---\n# Highlights\n{{highlights}}\n\n---\n# {{title}}\n{{content}}",
  "pasteTemplate": "## {{title}}\n{{content}}",
  "askForFilename": true,
  "defaultFilename": "{{title}}",
  "autoSync": false,
  "hotkeys": {
    "create": "n",
    "paste": "v",
    "copy": "c",
    "favorite": "f",
    "read": "r",
    "tags": "t",
    "open": "o",
    "tts": "s",
    "previous": "ArrowLeft",
    "next": "ArrowRight"
  },
  "folded": [
    "css tricks",
    "css-tricks",
    "xkcd"
  ],
  "renamedText": {
    "filtered_folders": "",
    "folders": "",
    "no_folder": ""
  },
  "displayMedia": true
}