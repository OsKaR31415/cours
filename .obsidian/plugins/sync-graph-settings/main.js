/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SyncGraphPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var SyncGraphPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "sync-graph-colorgroups-to-localgraph",
      name: "Sync Graph Groups Settings to Local Graph",
      callback: async () => {
        await this.syncGlobalToLocal();
      }
    });
  }
  async syncGlobalToLocal() {
    const configDir = app.vault.configDir;
    const graphConfigPath = (0, import_obsidian.normalizePath)(configDir + "/graph.json");
    if (true) {
      const graphConfigJson = await this.app.vault.adapter.read(graphConfigPath);
      const graphConfig = JSON.parse(graphConfigJson);
      const graphColorGroups = graphConfig.colorGroups;
      this.getLocalGraphLeaves().forEach((leaf) => {
        this.setColorGroups(leaf, graphColorGroups);
      });
    } else {
    }
  }
  getLocalGraphLeaves() {
    return this.app.workspace.getLeavesOfType("localgraph");
  }
  setColorGroups(localGraphLeaf, colorGroups) {
    var viewState = localGraphLeaf.getViewState();
    viewState.state.options.colorGroups = colorGroups;
    localGraphLeaf.setViewState(viewState);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBXb3Jrc3BhY2VMZWFmLCBURmlsZSwgbm9ybWFsaXplUGF0aH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0IHtyZWFkRmlsZX0gZnJvbSBcImZzL3Byb21pc2VzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN5bmNHcmFwaFBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG5cdGFzeW5jIG9ubG9hZCgpIHtcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0aWQ6IFwic3luYy1ncmFwaC1jb2xvcmdyb3Vwcy10by1sb2NhbGdyYXBoXCIsXG5cdFx0XHRuYW1lOiBcIlN5bmMgR3JhcGggR3JvdXBzIFNldHRpbmdzIHRvIExvY2FsIEdyYXBoXCIsXG5cdFx0XHRjYWxsYmFjazogYXN5bmMgKCkgPT4geyBhd2FpdCB0aGlzLnN5bmNHbG9iYWxUb0xvY2FsKCkgfVxuXHRcdH0pXG5cdH1cblxuXHRhc3luYyBzeW5jR2xvYmFsVG9Mb2NhbCgpIHtcblx0XHRjb25zdCBjb25maWdEaXIgPSBhcHAudmF1bHQuY29uZmlnRGlyO1xuXHRcdGNvbnN0IGdyYXBoQ29uZmlnUGF0aCA9IG5vcm1hbGl6ZVBhdGgoY29uZmlnRGlyICsgJy9ncmFwaC5qc29uJyk7XG5cblx0XHQvLyB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoJy5vYnNpZGlhbi9ncmFwaC5qc29uJykgd291bGQgcmV0dXJuIG51bGxcblx0XHQvLyBTbyB3ZSdyZSBkb2luZyBpdCB0aGUgbGVzcyBzYWZlIHdheVxuXHRcdC8vIGNvbnN0IGdyYXBoQ29uZmlnSnNvbiA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIucmVhZChncmFwaENvbmZpZ1BhdGgpO1xuXHRcdC8vIGNvbnN0IGdyYXBoQ29uZmlnRmlsZSA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZ3JhcGhDb25maWdQYXRoKTtcblx0XHQvLyBpZiAoZ3JhcGhDb25maWdGaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcblx0XHRpZiAodHJ1ZSkge1xuXHRcdFx0Ly8gY29uc3QgZ3JhcGhDb25maWdKc29uID0gYXdhaXQgYXBwLnZhdWx0LnJlYWQoZ3JhcGhDb25maWdGaWxlKTtcblx0XHRcdGNvbnN0IGdyYXBoQ29uZmlnSnNvbiA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIucmVhZChncmFwaENvbmZpZ1BhdGgpO1xuXHRcdFx0Y29uc3QgZ3JhcGhDb25maWcgPSBKU09OLnBhcnNlKGdyYXBoQ29uZmlnSnNvbik7XG5cdFx0XHRjb25zdCBncmFwaENvbG9yR3JvdXBzID0gZ3JhcGhDb25maWcuY29sb3JHcm91cHM7XG5cdFx0XHR0aGlzLmdldExvY2FsR3JhcGhMZWF2ZXMoKS5mb3JFYWNoKChsZWFmKSA9PiB7XG5cdFx0XHRcdHRoaXMuc2V0Q29sb3JHcm91cHMobGVhZiwgZ3JhcGhDb2xvckdyb3Vwcyk7XG5cdFx0XHR9KVxuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBjb25zb2xlLmxvZyhncmFwaENvbmZpZ1BhdGgpO1xuXHRcdFx0Ly8gY29uc29sZS5sb2coZ3JhcGhDb25maWdGaWxlKTtcblx0XHR9XG5cdH1cblxuXHRnZXRMb2NhbEdyYXBoTGVhdmVzKCkge1xuXHRcdHJldHVybiB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKCdsb2NhbGdyYXBoJyk7XG5cdH1cblx0XG5cdHNldENvbG9yR3JvdXBzKGxvY2FsR3JhcGhMZWFmOiBXb3Jrc3BhY2VMZWFmLCBjb2xvckdyb3VwczogYW55KSB7XG5cdFx0dmFyIHZpZXdTdGF0ZSA9IGxvY2FsR3JhcGhMZWFmLmdldFZpZXdTdGF0ZSgpO1xuXHRcdHZpZXdTdGF0ZS5zdGF0ZS5vcHRpb25zLmNvbG9yR3JvdXBzID0gY29sb3JHcm91cHM7XG5cdFx0bG9jYWxHcmFwaExlYWYuc2V0Vmlld1N0YXRlKHZpZXdTdGF0ZSk7XG5cdH1cbn0iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQTJEO0FBSTNELElBQXFCLGtCQUFyQixjQUE2Qyx1QkFBTztBQUFBLEVBQ25ELE1BQU0sU0FBUztBQUNkLFNBQUssV0FBVztBQUFBLE1BQ2YsSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04sVUFBVSxZQUFZO0FBQUUsY0FBTSxLQUFLLGtCQUFrQjtBQUFBLE1BQUU7QUFBQSxJQUN4RCxDQUFDO0FBQUEsRUFDRjtBQUFBLEVBRUEsTUFBTSxvQkFBb0I7QUFDekIsVUFBTSxZQUFZLElBQUksTUFBTTtBQUM1QixVQUFNLGtCQUFrQixtQ0FBYyxZQUFZLGFBQWE7QUFPL0QsUUFBSSxNQUFNO0FBRVQsWUFBTSxrQkFBa0IsTUFBTSxLQUFLLElBQUksTUFBTSxRQUFRLEtBQUssZUFBZTtBQUN6RSxZQUFNLGNBQWMsS0FBSyxNQUFNLGVBQWU7QUFDOUMsWUFBTSxtQkFBbUIsWUFBWTtBQUNyQyxXQUFLLG9CQUFvQixFQUFFLFFBQVEsQ0FBQyxTQUFTO0FBQzVDLGFBQUssZUFBZSxNQUFNLGdCQUFnQjtBQUFBLE1BQzNDLENBQUM7QUFBQSxJQUNGLE9BQU87QUFBQSxJQUdQO0FBQUEsRUFDRDtBQUFBLEVBRUEsc0JBQXNCO0FBQ3JCLFdBQU8sS0FBSyxJQUFJLFVBQVUsZ0JBQWdCLFlBQVk7QUFBQSxFQUN2RDtBQUFBLEVBRUEsZUFBZSxnQkFBK0IsYUFBa0I7QUFDL0QsUUFBSSxZQUFZLGVBQWUsYUFBYTtBQUM1QyxjQUFVLE1BQU0sUUFBUSxjQUFjO0FBQ3RDLG1CQUFlLGFBQWEsU0FBUztBQUFBLEVBQ3RDO0FBQ0Q7IiwKICAibmFtZXMiOiBbXQp9Cg==
